// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_app.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Logo

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for UserFields

	// no validation rules for Version

	// no validation rules for Copyright

	// no validation rules for AllowRegistry

	// no validation rules for Description

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on GetAppByKeywordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppByKeywordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppByKeywordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppByKeywordRequestMultiError, or nil if none found.
func (m *GetAppByKeywordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppByKeywordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := GetAppByKeywordRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAppByKeywordRequestMultiError(errors)
	}

	return nil
}

// GetAppByKeywordRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppByKeywordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppByKeywordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppByKeywordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppByKeywordRequestMultiError) AllErrors() []error { return m }

// GetAppByKeywordRequestValidationError is the validation error returned by
// GetAppByKeywordRequest.Validate if the designated constraints aren't met.
type GetAppByKeywordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppByKeywordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppByKeywordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppByKeywordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppByKeywordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppByKeywordRequestValidationError) ErrorName() string {
	return "GetAppByKeywordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppByKeywordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppByKeywordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppByKeywordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppByKeywordRequestValidationError{}

// Validate checks the field values on PageAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageAppRequestMultiError,
// or nil if none found.
func (m *PageAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageAppRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageAppRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return PageAppRequestMultiError(errors)
	}

	return nil
}

// PageAppRequestMultiError is an error wrapping multiple validation errors
// returned by PageAppRequest.ValidateAll() if the designated constraints
// aren't met.
type PageAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageAppRequestMultiError) AllErrors() []error { return m }

// PageAppRequestValidationError is the validation error returned by
// PageAppRequest.Validate if the designated constraints aren't met.
type PageAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageAppRequestValidationError) ErrorName() string { return "PageAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e PageAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageAppRequestValidationError{}

// Validate checks the field values on PageAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PageAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PageAppReplyMultiError, or
// nil if none found.
func (m *PageAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageAppReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageAppReplyMultiError(errors)
	}

	return nil
}

// PageAppReplyMultiError is an error wrapping multiple validation errors
// returned by PageAppReply.ValidateAll() if the designated constraints aren't met.
type PageAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageAppReplyMultiError) AllErrors() []error { return m }

// PageAppReplyValidationError is the validation error returned by
// PageAppReply.Validate if the designated constraints aren't met.
type PageAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageAppReplyValidationError) ErrorName() string { return "PageAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageAppReplyValidationError{}

// Validate checks the field values on AddAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAppRequestMultiError, or
// nil if none found.
func (m *AddAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := AddAppRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := AddAppRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.UserFields != nil {
		// no validation rules for UserFields
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.Copyright != nil {
		// no validation rules for Copyright
	}

	if len(errors) > 0 {
		return AddAppRequestMultiError(errors)
	}

	return nil
}

// AddAppRequestMultiError is an error wrapping multiple validation errors
// returned by AddAppRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppRequestMultiError) AllErrors() []error { return m }

// AddAppRequestValidationError is the validation error returned by
// AddAppRequest.Validate if the designated constraints aren't met.
type AddAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppRequestValidationError) ErrorName() string { return "AddAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppRequestValidationError{}

// Validate checks the field values on AddAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddAppReplyMultiError, or
// nil if none found.
func (m *AddAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddAppReplyMultiError(errors)
	}

	return nil
}

// AddAppReplyMultiError is an error wrapping multiple validation errors
// returned by AddAppReply.ValidateAll() if the designated constraints aren't met.
type AddAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppReplyMultiError) AllErrors() []error { return m }

// AddAppReplyValidationError is the validation error returned by
// AddAppReply.Validate if the designated constraints aren't met.
type AddAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppReplyValidationError) ErrorName() string { return "AddAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppReplyValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppRequestMultiError, or nil if none found.
func (m *UpdateAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAppRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.AllowRegistry != nil {
		// no validation rules for AllowRegistry
	}

	if m.UserFields != nil {
		// no validation rules for UserFields
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if m.Copyright != nil {
		// no validation rules for Copyright
	}

	if len(errors) > 0 {
		return UpdateAppRequestMultiError(errors)
	}

	return nil
}

// UpdateAppRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAppRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppRequestMultiError) AllErrors() []error { return m }

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on DeleteAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppRequestMultiError, or nil if none found.
func (m *DeleteAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAppRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAppRequestMultiError(errors)
	}

	return nil
}

// DeleteAppRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAppRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppRequestMultiError) AllErrors() []error { return m }

// DeleteAppRequestValidationError is the validation error returned by
// DeleteAppRequest.Validate if the designated constraints aren't met.
type DeleteAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppRequestValidationError) ErrorName() string { return "DeleteAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppRequestValidationError{}
