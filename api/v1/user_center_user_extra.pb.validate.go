// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_user_extra.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserExtra with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserExtra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserExtra with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserExtraMultiError, or nil
// if none found.
func (m *UserExtra) ValidateAll() error {
	return m.validate(true)
}

func (m *UserExtra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Keyword

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserExtraValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserExtraValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserExtraValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return UserExtraMultiError(errors)
	}

	return nil
}

// UserExtraMultiError is an error wrapping multiple validation errors returned
// by UserExtra.ValidateAll() if the designated constraints aren't met.
type UserExtraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserExtraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserExtraMultiError) AllErrors() []error { return m }

// UserExtraValidationError is the validation error returned by
// UserExtra.Validate if the designated constraints aren't met.
type UserExtraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserExtraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserExtraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserExtraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserExtraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserExtraValidationError) ErrorName() string { return "UserExtraValidationError" }

// Error satisfies the builtin error interface
func (e UserExtraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserExtra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserExtraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserExtraValidationError{}

// Validate checks the field values on AllUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllUserExtraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllUserExtraRequestMultiError, or nil if none found.
func (m *AllUserExtraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllUserExtraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AllUserExtraRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllUserExtraRequestMultiError(errors)
	}

	return nil
}

// AllUserExtraRequestMultiError is an error wrapping multiple validation
// errors returned by AllUserExtraRequest.ValidateAll() if the designated
// constraints aren't met.
type AllUserExtraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllUserExtraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllUserExtraRequestMultiError) AllErrors() []error { return m }

// AllUserExtraRequestValidationError is the validation error returned by
// AllUserExtraRequest.Validate if the designated constraints aren't met.
type AllUserExtraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllUserExtraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllUserExtraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllUserExtraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllUserExtraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllUserExtraRequestValidationError) ErrorName() string {
	return "AllUserExtraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllUserExtraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllUserExtraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllUserExtraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllUserExtraRequestValidationError{}

// Validate checks the field values on AllUserExtraReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllUserExtraReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllUserExtraReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllUserExtraReplyMultiError, or nil if none found.
func (m *AllUserExtraReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllUserExtraReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllUserExtraReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllUserExtraReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllUserExtraReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllUserExtraReplyMultiError(errors)
	}

	return nil
}

// AllUserExtraReplyMultiError is an error wrapping multiple validation errors
// returned by AllUserExtraReply.ValidateAll() if the designated constraints
// aren't met.
type AllUserExtraReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllUserExtraReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllUserExtraReplyMultiError) AllErrors() []error { return m }

// AllUserExtraReplyValidationError is the validation error returned by
// AllUserExtraReply.Validate if the designated constraints aren't met.
type AllUserExtraReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllUserExtraReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllUserExtraReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllUserExtraReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllUserExtraReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllUserExtraReplyValidationError) ErrorName() string {
	return "AllUserExtraReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllUserExtraReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllUserExtraReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllUserExtraReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllUserExtraReplyValidationError{}

// Validate checks the field values on AddUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserExtraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserExtraRequestMultiError, or nil if none found.
func (m *AddUserExtraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserExtraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AddUserExtraRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 0 {
		err := AddUserExtraRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 0 {
		err := AddUserExtraRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() == nil {
		err := AddUserExtraRequestValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if a := m.GetValue(); a != nil {

	}

	if len(errors) > 0 {
		return AddUserExtraRequestMultiError(errors)
	}

	return nil
}

// AddUserExtraRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserExtraRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserExtraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserExtraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserExtraRequestMultiError) AllErrors() []error { return m }

// AddUserExtraRequestValidationError is the validation error returned by
// AddUserExtraRequest.Validate if the designated constraints aren't met.
type AddUserExtraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserExtraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserExtraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserExtraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserExtraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserExtraRequestValidationError) ErrorName() string {
	return "AddUserExtraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserExtraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserExtraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserExtraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserExtraRequestValidationError{}

// Validate checks the field values on DeleteUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserExtraRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserExtraRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserExtraRequestMultiError, or nil if none found.
func (m *DeleteUserExtraRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserExtraRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteUserExtraRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := DeleteUserExtraRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserExtraRequestMultiError(errors)
	}

	return nil
}

// DeleteUserExtraRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserExtraRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserExtraRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserExtraRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserExtraRequestMultiError) AllErrors() []error { return m }

// DeleteUserExtraRequestValidationError is the validation error returned by
// DeleteUserExtraRequest.Validate if the designated constraints aren't met.
type DeleteUserExtraRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserExtraRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserExtraRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserExtraRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserExtraRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserExtraRequestValidationError) ErrorName() string {
	return "DeleteUserExtraRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserExtraRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserExtraRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserExtraRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserExtraRequestValidationError{}
