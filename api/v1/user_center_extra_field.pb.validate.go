// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_extra_field.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExtraField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraFieldMultiError, or
// nil if none found.
func (m *ExtraField) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ExtraFieldMultiError(errors)
	}

	return nil
}

// ExtraFieldMultiError is an error wrapping multiple validation errors
// returned by ExtraField.ValidateAll() if the designated constraints aren't met.
type ExtraFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraFieldMultiError) AllErrors() []error { return m }

// ExtraFieldValidationError is the validation error returned by
// ExtraField.Validate if the designated constraints aren't met.
type ExtraFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraFieldValidationError) ErrorName() string { return "ExtraFieldValidationError" }

// Error satisfies the builtin error interface
func (e ExtraFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraFieldValidationError{}

// Validate checks the field values on PageExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageExtraFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageExtraFieldRequestMultiError, or nil if none found.
func (m *PageExtraFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageExtraFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageExtraFieldRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageExtraFieldRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return PageExtraFieldRequestMultiError(errors)
	}

	return nil
}

// PageExtraFieldRequestMultiError is an error wrapping multiple validation
// errors returned by PageExtraFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type PageExtraFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageExtraFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageExtraFieldRequestMultiError) AllErrors() []error { return m }

// PageExtraFieldRequestValidationError is the validation error returned by
// PageExtraFieldRequest.Validate if the designated constraints aren't met.
type PageExtraFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageExtraFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageExtraFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageExtraFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageExtraFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageExtraFieldRequestValidationError) ErrorName() string {
	return "PageExtraFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageExtraFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageExtraFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageExtraFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageExtraFieldRequestValidationError{}

// Validate checks the field values on AllExtraFieldTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllExtraFieldTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllExtraFieldTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllExtraFieldTypeReplyMultiError, or nil if none found.
func (m *AllExtraFieldTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllExtraFieldTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllExtraFieldTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllExtraFieldTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllExtraFieldTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllExtraFieldTypeReplyMultiError(errors)
	}

	return nil
}

// AllExtraFieldTypeReplyMultiError is an error wrapping multiple validation
// errors returned by AllExtraFieldTypeReply.ValidateAll() if the designated
// constraints aren't met.
type AllExtraFieldTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllExtraFieldTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllExtraFieldTypeReplyMultiError) AllErrors() []error { return m }

// AllExtraFieldTypeReplyValidationError is the validation error returned by
// AllExtraFieldTypeReply.Validate if the designated constraints aren't met.
type AllExtraFieldTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllExtraFieldTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllExtraFieldTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllExtraFieldTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllExtraFieldTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllExtraFieldTypeReplyValidationError) ErrorName() string {
	return "AllExtraFieldTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllExtraFieldTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllExtraFieldTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllExtraFieldTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllExtraFieldTypeReplyValidationError{}

// Validate checks the field values on CurrentExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentExtraFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentExtraFieldReplyMultiError, or nil if none found.
func (m *CurrentExtraFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentExtraFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CurrentExtraFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CurrentExtraFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CurrentExtraFieldReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CurrentExtraFieldReplyMultiError(errors)
	}

	return nil
}

// CurrentExtraFieldReplyMultiError is an error wrapping multiple validation
// errors returned by CurrentExtraFieldReply.ValidateAll() if the designated
// constraints aren't met.
type CurrentExtraFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentExtraFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentExtraFieldReplyMultiError) AllErrors() []error { return m }

// CurrentExtraFieldReplyValidationError is the validation error returned by
// CurrentExtraFieldReply.Validate if the designated constraints aren't met.
type CurrentExtraFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentExtraFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentExtraFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentExtraFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentExtraFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentExtraFieldReplyValidationError) ErrorName() string {
	return "CurrentExtraFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentExtraFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentExtraFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentExtraFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentExtraFieldReplyValidationError{}

// Validate checks the field values on PageExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageExtraFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageExtraFieldReplyMultiError, or nil if none found.
func (m *PageExtraFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageExtraFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageExtraFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageExtraFieldReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageExtraFieldReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageExtraFieldReplyMultiError(errors)
	}

	return nil
}

// PageExtraFieldReplyMultiError is an error wrapping multiple validation
// errors returned by PageExtraFieldReply.ValidateAll() if the designated
// constraints aren't met.
type PageExtraFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageExtraFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageExtraFieldReplyMultiError) AllErrors() []error { return m }

// PageExtraFieldReplyValidationError is the validation error returned by
// PageExtraFieldReply.Validate if the designated constraints aren't met.
type PageExtraFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageExtraFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageExtraFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageExtraFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageExtraFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageExtraFieldReplyValidationError) ErrorName() string {
	return "PageExtraFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageExtraFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageExtraFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageExtraFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageExtraFieldReplyValidationError{}

// Validate checks the field values on AddExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExtraFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExtraFieldRequestMultiError, or nil if none found.
func (m *AddExtraFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExtraFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := AddExtraFieldRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := AddExtraFieldRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddExtraFieldRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return AddExtraFieldRequestMultiError(errors)
	}

	return nil
}

// AddExtraFieldRequestMultiError is an error wrapping multiple validation
// errors returned by AddExtraFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type AddExtraFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExtraFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExtraFieldRequestMultiError) AllErrors() []error { return m }

// AddExtraFieldRequestValidationError is the validation error returned by
// AddExtraFieldRequest.Validate if the designated constraints aren't met.
type AddExtraFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExtraFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExtraFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExtraFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExtraFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExtraFieldRequestValidationError) ErrorName() string {
	return "AddExtraFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddExtraFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExtraFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExtraFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExtraFieldRequestValidationError{}

// Validate checks the field values on AddExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddExtraFieldReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddExtraFieldReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddExtraFieldReplyMultiError, or nil if none found.
func (m *AddExtraFieldReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddExtraFieldReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddExtraFieldReplyMultiError(errors)
	}

	return nil
}

// AddExtraFieldReplyMultiError is an error wrapping multiple validation errors
// returned by AddExtraFieldReply.ValidateAll() if the designated constraints
// aren't met.
type AddExtraFieldReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddExtraFieldReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddExtraFieldReplyMultiError) AllErrors() []error { return m }

// AddExtraFieldReplyValidationError is the validation error returned by
// AddExtraFieldReply.Validate if the designated constraints aren't met.
type AddExtraFieldReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddExtraFieldReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddExtraFieldReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddExtraFieldReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddExtraFieldReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddExtraFieldReplyValidationError) ErrorName() string {
	return "AddExtraFieldReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddExtraFieldReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddExtraFieldReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddExtraFieldReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddExtraFieldReplyValidationError{}

// Validate checks the field values on UpdateExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExtraFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExtraFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExtraFieldRequestMultiError, or nil if none found.
func (m *UpdateExtraFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExtraFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateExtraFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateExtraFieldRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := UpdateExtraFieldRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateExtraFieldRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateExtraFieldRequestMultiError(errors)
	}

	return nil
}

// UpdateExtraFieldRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateExtraFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExtraFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExtraFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExtraFieldRequestMultiError) AllErrors() []error { return m }

// UpdateExtraFieldRequestValidationError is the validation error returned by
// UpdateExtraFieldRequest.Validate if the designated constraints aren't met.
type UpdateExtraFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExtraFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExtraFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExtraFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExtraFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExtraFieldRequestValidationError) ErrorName() string {
	return "UpdateExtraFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExtraFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExtraFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExtraFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExtraFieldRequestValidationError{}

// Validate checks the field values on DeleteExtraFieldRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExtraFieldRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExtraFieldRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExtraFieldRequestMultiError, or nil if none found.
func (m *DeleteExtraFieldRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExtraFieldRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteExtraFieldRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteExtraFieldRequestMultiError(errors)
	}

	return nil
}

// DeleteExtraFieldRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExtraFieldRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExtraFieldRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExtraFieldRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExtraFieldRequestMultiError) AllErrors() []error { return m }

// DeleteExtraFieldRequestValidationError is the validation error returned by
// DeleteExtraFieldRequest.Validate if the designated constraints aren't met.
type DeleteExtraFieldRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExtraFieldRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExtraFieldRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExtraFieldRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExtraFieldRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExtraFieldRequestValidationError) ErrorName() string {
	return "DeleteExtraFieldRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExtraFieldRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExtraFieldRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExtraFieldRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExtraFieldRequestValidationError{}

// Validate checks the field values on AllExtraFieldTypeReplyData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllExtraFieldTypeReplyData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllExtraFieldTypeReplyData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllExtraFieldTypeReplyDataMultiError, or nil if none found.
func (m *AllExtraFieldTypeReplyData) ValidateAll() error {
	return m.validate(true)
}

func (m *AllExtraFieldTypeReplyData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	if len(errors) > 0 {
		return AllExtraFieldTypeReplyDataMultiError(errors)
	}

	return nil
}

// AllExtraFieldTypeReplyDataMultiError is an error wrapping multiple
// validation errors returned by AllExtraFieldTypeReplyData.ValidateAll() if
// the designated constraints aren't met.
type AllExtraFieldTypeReplyDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllExtraFieldTypeReplyDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllExtraFieldTypeReplyDataMultiError) AllErrors() []error { return m }

// AllExtraFieldTypeReplyDataValidationError is the validation error returned
// by AllExtraFieldTypeReplyData.Validate if the designated constraints aren't met.
type AllExtraFieldTypeReplyDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllExtraFieldTypeReplyDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllExtraFieldTypeReplyDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllExtraFieldTypeReplyDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllExtraFieldTypeReplyDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllExtraFieldTypeReplyDataValidationError) ErrorName() string {
	return "AllExtraFieldTypeReplyDataValidationError"
}

// Error satisfies the builtin error interface
func (e AllExtraFieldTypeReplyDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllExtraFieldTypeReplyData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllExtraFieldTypeReplyDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllExtraFieldTypeReplyDataValidationError{}
