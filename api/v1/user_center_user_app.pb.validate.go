// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_user_app.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserApp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserApp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserApp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserAppMultiError, or nil if none found.
func (m *UserApp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserApp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for App

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.LastLogin != nil {
		// no validation rules for LastLogin
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.ExpiredAt != nil {
		// no validation rules for ExpiredAt
	}

	if len(errors) > 0 {
		return UserAppMultiError(errors)
	}

	return nil
}

// UserAppMultiError is an error wrapping multiple validation errors returned
// by UserApp.ValidateAll() if the designated constraints aren't met.
type UserAppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAppMultiError) AllErrors() []error { return m }

// UserAppValidationError is the validation error returned by UserApp.Validate
// if the designated constraints aren't met.
type UserAppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAppValidationError) ErrorName() string { return "UserAppValidationError" }

// Error satisfies the builtin error interface
func (e UserAppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAppValidationError{}

// Validate checks the field values on AllUserAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllUserAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllUserAppRequestMultiError, or nil if none found.
func (m *AllUserAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllUserAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AllUserAppRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllUserAppRequestMultiError(errors)
	}

	return nil
}

// AllUserAppRequestMultiError is an error wrapping multiple validation errors
// returned by AllUserAppRequest.ValidateAll() if the designated constraints
// aren't met.
type AllUserAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllUserAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllUserAppRequestMultiError) AllErrors() []error { return m }

// AllUserAppRequestValidationError is the validation error returned by
// AllUserAppRequest.Validate if the designated constraints aren't met.
type AllUserAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllUserAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllUserAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllUserAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllUserAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllUserAppRequestValidationError) ErrorName() string {
	return "AllUserAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllUserAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllUserAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllUserAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllUserAppRequestValidationError{}

// Validate checks the field values on AllUserAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllUserAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllUserAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllUserAppReplyMultiError, or nil if none found.
func (m *AllUserAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllUserAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllUserAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllUserAppReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllUserAppReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllUserAppReplyMultiError(errors)
	}

	return nil
}

// AllUserAppReplyMultiError is an error wrapping multiple validation errors
// returned by AllUserAppReply.ValidateAll() if the designated constraints
// aren't met.
type AllUserAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllUserAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllUserAppReplyMultiError) AllErrors() []error { return m }

// AllUserAppReplyValidationError is the validation error returned by
// AllUserAppReply.Validate if the designated constraints aren't met.
type AllUserAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllUserAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllUserAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllUserAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllUserAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllUserAppReplyValidationError) ErrorName() string { return "AllUserAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllUserAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllUserAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllUserAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllUserAppReplyValidationError{}

// Validate checks the field values on AddUserAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserAppRequestMultiError, or nil if none found.
func (m *AddUserAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AddUserAppRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := AddUserAppRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUserAppRequestMultiError(errors)
	}

	return nil
}

// AddUserAppRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserAppRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserAppRequestMultiError) AllErrors() []error { return m }

// AddUserAppRequestValidationError is the validation error returned by
// AddUserAppRequest.Validate if the designated constraints aren't met.
type AddUserAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserAppRequestValidationError) ErrorName() string {
	return "AddUserAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserAppRequestValidationError{}

// Validate checks the field values on DisableUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserAppRequestMultiError, or nil if none found.
func (m *DisableUserAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DisableUserAppRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := DisableUserAppRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableUserAppRequestMultiError(errors)
	}

	return nil
}

// DisableUserAppRequestMultiError is an error wrapping multiple validation
// errors returned by DisableUserAppRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableUserAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserAppRequestMultiError) AllErrors() []error { return m }

// DisableUserAppRequestValidationError is the validation error returned by
// DisableUserAppRequest.Validate if the designated constraints aren't met.
type DisableUserAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserAppRequestValidationError) ErrorName() string {
	return "DisableUserAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserAppRequestValidationError{}

// Validate checks the field values on EnableUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableUserAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserAppRequestMultiError, or nil if none found.
func (m *EnableUserAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := EnableUserAppRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := EnableUserAppRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableUserAppRequestMultiError(errors)
	}

	return nil
}

// EnableUserAppRequestMultiError is an error wrapping multiple validation
// errors returned by EnableUserAppRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableUserAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserAppRequestMultiError) AllErrors() []error { return m }

// EnableUserAppRequestValidationError is the validation error returned by
// EnableUserAppRequest.Validate if the designated constraints aren't met.
type EnableUserAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserAppRequestValidationError) ErrorName() string {
	return "EnableUserAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserAppRequestValidationError{}

// Validate checks the field values on DeleteUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserAppRequestMultiError, or nil if none found.
func (m *DeleteUserAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteUserAppRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := DeleteUserAppRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserAppRequestMultiError(errors)
	}

	return nil
}

// DeleteUserAppRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserAppRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserAppRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserAppRequestMultiError) AllErrors() []error { return m }

// DeleteUserAppRequestValidationError is the validation error returned by
// DeleteUserAppRequest.Validate if the designated constraints aren't met.
type DeleteUserAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserAppRequestValidationError) ErrorName() string {
	return "DeleteUserAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserAppRequestValidationError{}
