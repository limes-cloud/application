// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllLoginPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllLoginPlatformReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllLoginPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllLoginPlatformReplyMultiError, or nil if none found.
func (m *AllLoginPlatformReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllLoginPlatformReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllLoginPlatformReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllLoginPlatformReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllLoginPlatformReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllLoginPlatformReplyMultiError(errors)
	}

	return nil
}

// AllLoginPlatformReplyMultiError is an error wrapping multiple validation
// errors returned by AllLoginPlatformReply.ValidateAll() if the designated
// constraints aren't met.
type AllLoginPlatformReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllLoginPlatformReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllLoginPlatformReplyMultiError) AllErrors() []error { return m }

// AllLoginPlatformReplyValidationError is the validation error returned by
// AllLoginPlatformReply.Validate if the designated constraints aren't met.
type AllLoginPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllLoginPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllLoginPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllLoginPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllLoginPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllLoginPlatformReplyValidationError) ErrorName() string {
	return "AllLoginPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllLoginPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllLoginPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllLoginPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllLoginPlatformReplyValidationError{}

// Validate checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordRequestMultiError, or nil if none found.
func (m *LoginByPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := LoginByPasswordRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginByPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := LoginByPasswordRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := LoginByPasswordRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := LoginByPasswordRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByPasswordRequestMultiError(errors)
	}

	return nil
}

// LoginByPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by LoginByPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginByPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordRequestMultiError) AllErrors() []error { return m }

// LoginByPasswordRequestValidationError is the validation error returned by
// LoginByPasswordRequest.Validate if the designated constraints aren't met.
type LoginByPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordRequestValidationError) ErrorName() string {
	return "LoginByPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordRequestValidationError{}

// Validate checks the field values on RegisterUsernameCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUsernameCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUsernameCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUsernameCheckRequestMultiError, or nil if none found.
func (m *RegisterUsernameCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUsernameCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := RegisterUsernameCheckRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterUsernameCheckRequestMultiError(errors)
	}

	return nil
}

// RegisterUsernameCheckRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterUsernameCheckRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterUsernameCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUsernameCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUsernameCheckRequestMultiError) AllErrors() []error { return m }

// RegisterUsernameCheckRequestValidationError is the validation error returned
// by RegisterUsernameCheckRequest.Validate if the designated constraints
// aren't met.
type RegisterUsernameCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUsernameCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUsernameCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUsernameCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUsernameCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUsernameCheckRequestValidationError) ErrorName() string {
	return "RegisterUsernameCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUsernameCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUsernameCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUsernameCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUsernameCheckRequestValidationError{}

// Validate checks the field values on RegisterUsernameCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterUsernameCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUsernameCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUsernameCheckReplyMultiError, or nil if none found.
func (m *RegisterUsernameCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUsernameCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allow

	if len(errors) > 0 {
		return RegisterUsernameCheckReplyMultiError(errors)
	}

	return nil
}

// RegisterUsernameCheckReplyMultiError is an error wrapping multiple
// validation errors returned by RegisterUsernameCheckReply.ValidateAll() if
// the designated constraints aren't met.
type RegisterUsernameCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUsernameCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUsernameCheckReplyMultiError) AllErrors() []error { return m }

// RegisterUsernameCheckReplyValidationError is the validation error returned
// by RegisterUsernameCheckReply.Validate if the designated constraints aren't met.
type RegisterUsernameCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUsernameCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUsernameCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUsernameCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUsernameCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUsernameCheckReplyValidationError) ErrorName() string {
	return "RegisterUsernameCheckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUsernameCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUsernameCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUsernameCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUsernameCheckReplyValidationError{}

// Validate checks the field values on RegisterByPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterByPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterByPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterByPasswordRequestMultiError, or nil if none found.
func (m *RegisterByPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterByPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := RegisterByPasswordRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := RegisterByPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := RegisterByPasswordRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := RegisterByPasswordRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := RegisterByPasswordRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterByPasswordRequestMultiError(errors)
	}

	return nil
}

// RegisterByPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterByPasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type RegisterByPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterByPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterByPasswordRequestMultiError) AllErrors() []error { return m }

// RegisterByPasswordRequestValidationError is the validation error returned by
// RegisterByPasswordRequest.Validate if the designated constraints aren't met.
type RegisterByPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterByPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterByPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterByPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterByPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterByPasswordRequestValidationError) ErrorName() string {
	return "RegisterByPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterByPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterByPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterByPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterByPasswordRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on ImageCaptchaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImageCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageCaptchaReplyMultiError, or nil if none found.
func (m *ImageCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Expire

	// no validation rules for Base64

	if len(errors) > 0 {
		return ImageCaptchaReplyMultiError(errors)
	}

	return nil
}

// ImageCaptchaReplyMultiError is an error wrapping multiple validation errors
// returned by ImageCaptchaReply.ValidateAll() if the designated constraints
// aren't met.
type ImageCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageCaptchaReplyMultiError) AllErrors() []error { return m }

// ImageCaptchaReplyValidationError is the validation error returned by
// ImageCaptchaReply.Validate if the designated constraints aren't met.
type ImageCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageCaptchaReplyValidationError) ErrorName() string {
	return "ImageCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImageCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageCaptchaReplyValidationError{}

// Validate checks the field values on BindByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindByEmailRequestMultiError, or nil if none found.
func (m *BindByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := BindByEmailRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := BindByEmailRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := BindByEmailRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := BindByEmailRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindByEmailRequestMultiError(errors)
	}

	return nil
}

// BindByEmailRequestMultiError is an error wrapping multiple validation errors
// returned by BindByEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type BindByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindByEmailRequestMultiError) AllErrors() []error { return m }

// BindByEmailRequestValidationError is the validation error returned by
// BindByEmailRequest.Validate if the designated constraints aren't met.
type BindByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindByEmailRequestValidationError) ErrorName() string {
	return "BindByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindByEmailRequestValidationError{}

// Validate checks the field values on LoginByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailRequestMultiError, or nil if none found.
func (m *LoginByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LoginByEmailRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := LoginByEmailRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := LoginByEmailRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := LoginByEmailRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginByEmailRequestMultiError(errors)
	}

	return nil
}

// LoginByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by LoginByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailRequestMultiError) AllErrors() []error { return m }

// LoginByEmailRequestValidationError is the validation error returned by
// LoginByEmailRequest.Validate if the designated constraints aren't met.
type LoginByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailRequestValidationError) ErrorName() string {
	return "LoginByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailRequestValidationError{}

// Validate checks the field values on RegisterByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterByEmailRequestMultiError, or nil if none found.
func (m *RegisterByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := RegisterByEmailRequestValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := RegisterByEmailRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := RegisterByEmailRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := RegisterByEmailRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterByEmailRequestMultiError(errors)
	}

	return nil
}

// RegisterByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterByEmailRequestMultiError) AllErrors() []error { return m }

// RegisterByEmailRequestValidationError is the validation error returned by
// RegisterByEmailRequest.Validate if the designated constraints aren't met.
type RegisterByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterByEmailRequestValidationError) ErrorName() string {
	return "RegisterByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterByEmailRequestValidationError{}

// Validate checks the field values on LoginEmailCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginEmailCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginEmailCaptchaRequestMultiError, or nil if none found.
func (m *LoginEmailCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginEmailCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = LoginEmailCaptchaRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginEmailCaptchaRequestMultiError(errors)
	}

	return nil
}

func (m *LoginEmailCaptchaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginEmailCaptchaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginEmailCaptchaRequestMultiError is an error wrapping multiple validation
// errors returned by LoginEmailCaptchaRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginEmailCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginEmailCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginEmailCaptchaRequestMultiError) AllErrors() []error { return m }

// LoginEmailCaptchaRequestValidationError is the validation error returned by
// LoginEmailCaptchaRequest.Validate if the designated constraints aren't met.
type LoginEmailCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginEmailCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginEmailCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginEmailCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginEmailCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginEmailCaptchaRequestValidationError) ErrorName() string {
	return "LoginEmailCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginEmailCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginEmailCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginEmailCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginEmailCaptchaRequestValidationError{}

// Validate checks the field values on BindEmailCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindEmailCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindEmailCaptchaRequestMultiError, or nil if none found.
func (m *BindEmailCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindEmailCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = BindEmailCaptchaRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindEmailCaptchaRequestMultiError(errors)
	}

	return nil
}

func (m *BindEmailCaptchaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *BindEmailCaptchaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// BindEmailCaptchaRequestMultiError is an error wrapping multiple validation
// errors returned by BindEmailCaptchaRequest.ValidateAll() if the designated
// constraints aren't met.
type BindEmailCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindEmailCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindEmailCaptchaRequestMultiError) AllErrors() []error { return m }

// BindEmailCaptchaRequestValidationError is the validation error returned by
// BindEmailCaptchaRequest.Validate if the designated constraints aren't met.
type BindEmailCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindEmailCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindEmailCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindEmailCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindEmailCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindEmailCaptchaRequestValidationError) ErrorName() string {
	return "BindEmailCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindEmailCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindEmailCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindEmailCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindEmailCaptchaRequestValidationError{}

// Validate checks the field values on RegisterEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEmailCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEmailCaptchaRequestMultiError, or nil if none found.
func (m *RegisterEmailCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEmailCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterEmailCaptchaRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterEmailCaptchaRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterEmailCaptchaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterEmailCaptchaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterEmailCaptchaRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterEmailCaptchaRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterEmailCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEmailCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEmailCaptchaRequestMultiError) AllErrors() []error { return m }

// RegisterEmailCaptchaRequestValidationError is the validation error returned
// by RegisterEmailCaptchaRequest.Validate if the designated constraints
// aren't met.
type RegisterEmailCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEmailCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEmailCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEmailCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEmailCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEmailCaptchaRequestValidationError) ErrorName() string {
	return "RegisterEmailCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEmailCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEmailCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEmailCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEmailCaptchaRequestValidationError{}

// Validate checks the field values on EmailCaptchaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmailCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailCaptchaReplyMultiError, or nil if none found.
func (m *EmailCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Expire

	if len(errors) > 0 {
		return EmailCaptchaReplyMultiError(errors)
	}

	return nil
}

// EmailCaptchaReplyMultiError is an error wrapping multiple validation errors
// returned by EmailCaptchaReply.ValidateAll() if the designated constraints
// aren't met.
type EmailCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailCaptchaReplyMultiError) AllErrors() []error { return m }

// EmailCaptchaReplyValidationError is the validation error returned by
// EmailCaptchaReply.Validate if the designated constraints aren't met.
type EmailCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailCaptchaReplyValidationError) ErrorName() string {
	return "EmailCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EmailCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailCaptchaReplyValidationError{}

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRequestMultiError, or
// nil if none found.
func (m *AuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := AuthRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthRequestMultiError(errors)
	}

	return nil
}

// AuthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRequest.ValidateAll() if the designated constraints aren't met.
type AuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequestMultiError) AllErrors() []error { return m }

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AllLoginPlatformReply_Platform with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllLoginPlatformReply_Platform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllLoginPlatformReply_Platform with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AllLoginPlatformReply_PlatformMultiError, or nil if none found.
func (m *AllLoginPlatformReply_Platform) ValidateAll() error {
	return m.validate(true)
}

func (m *AllLoginPlatformReply_Platform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for Name

	if len(errors) > 0 {
		return AllLoginPlatformReply_PlatformMultiError(errors)
	}

	return nil
}

// AllLoginPlatformReply_PlatformMultiError is an error wrapping multiple
// validation errors returned by AllLoginPlatformReply_Platform.ValidateAll()
// if the designated constraints aren't met.
type AllLoginPlatformReply_PlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllLoginPlatformReply_PlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllLoginPlatformReply_PlatformMultiError) AllErrors() []error { return m }

// AllLoginPlatformReply_PlatformValidationError is the validation error
// returned by AllLoginPlatformReply_Platform.Validate if the designated
// constraints aren't met.
type AllLoginPlatformReply_PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllLoginPlatformReply_PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllLoginPlatformReply_PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllLoginPlatformReply_PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllLoginPlatformReply_PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllLoginPlatformReply_PlatformValidationError) ErrorName() string {
	return "AllLoginPlatformReply_PlatformValidationError"
}

// Error satisfies the builtin error interface
func (e AllLoginPlatformReply_PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllLoginPlatformReply_Platform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllLoginPlatformReply_PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllLoginPlatformReply_PlatformValidationError{}
