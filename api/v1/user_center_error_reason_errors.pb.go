// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsNotFoundError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFoundError.String() && e.Code == 200
}

// 为某个枚举单独设置错误码
func NotFoundErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotFoundError.String(), "数据不存在:"+fmt.Sprintf(format, args...))
}

// 为某个枚举单独设置错误码
func NotFoundError() *errors.Error {
	return errors.New(200, ErrorReason_NotFoundError.String(), "数据不存在")
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 200
}

func DatabaseErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func DatabaseError() *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误")
}

func IsMetadataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MetadataError.String() && e.Code == 200
}

func MetadataErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_MetadataError.String(), "元数据异常:"+fmt.Sprintf(format, args...))
}

func MetadataError() *errors.Error {
	return errors.New(200, ErrorReason_MetadataError.String(), "元数据异常")
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 200
}

func TransformErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func TransformError() *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败")
}
