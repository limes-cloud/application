// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: user_center_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddAgreement = "/user_center.Service/AddAgreement"
const OperationServiceAddApp = "/user_center.Service/AddApp"
const OperationServiceAddChannel = "/user_center.Service/AddChannel"
const OperationServiceAddExtraField = "/user_center.Service/AddExtraField"
const OperationServiceAddScene = "/user_center.Service/AddScene"
const OperationServiceAddUser = "/user_center.Service/AddUser"
const OperationServiceAddUserApp = "/user_center.Service/AddUserApp"
const OperationServiceAllChannel = "/user_center.Service/AllChannel"
const OperationServiceAllExtraFieldType = "/user_center.Service/AllExtraFieldType"
const OperationServiceAllLoginPlatform = "/user_center.Service/AllLoginPlatform"
const OperationServiceAuth = "/user_center.Service/Auth"
const OperationServiceBindByEmail = "/user_center.Service/BindByEmail"
const OperationServiceBindByPassword = "/user_center.Service/BindByPassword"
const OperationServiceBindEmailCaptcha = "/user_center.Service/BindEmailCaptcha"
const OperationServiceBindImageCaptcha = "/user_center.Service/BindImageCaptcha"
const OperationServiceDeleteAgreement = "/user_center.Service/DeleteAgreement"
const OperationServiceDeleteApp = "/user_center.Service/DeleteApp"
const OperationServiceDeleteChannel = "/user_center.Service/DeleteChannel"
const OperationServiceDeleteExtraField = "/user_center.Service/DeleteExtraField"
const OperationServiceDeleteScene = "/user_center.Service/DeleteScene"
const OperationServiceDeleteUser = "/user_center.Service/DeleteUser"
const OperationServiceDeleteUserApp = "/user_center.Service/DeleteUserApp"
const OperationServiceDisableUser = "/user_center.Service/DisableUser"
const OperationServiceEnableUser = "/user_center.Service/EnableUser"
const OperationServiceGetAgreement = "/user_center.Service/GetAgreement"
const OperationServiceGetAppByKeyword = "/user_center.Service/GetAppByKeyword"
const OperationServiceGetCurrentUser = "/user_center.Service/GetCurrentUser"
const OperationServiceGetSceneByKeyword = "/user_center.Service/GetSceneByKeyword"
const OperationServiceGetUser = "/user_center.Service/GetUser"
const OperationServiceLoginByEmail = "/user_center.Service/LoginByEmail"
const OperationServiceLoginByPassword = "/user_center.Service/LoginByPassword"
const OperationServiceLoginEmailCaptcha = "/user_center.Service/LoginEmailCaptcha"
const OperationServiceLoginImageCaptcha = "/user_center.Service/LoginImageCaptcha"
const OperationServiceOfflineUser = "/user_center.Service/OfflineUser"
const OperationServicePageAgreement = "/user_center.Service/PageAgreement"
const OperationServicePageApp = "/user_center.Service/PageApp"
const OperationServicePageExtraField = "/user_center.Service/PageExtraField"
const OperationServicePageScene = "/user_center.Service/PageScene"
const OperationServicePageUser = "/user_center.Service/PageUser"
const OperationServiceRegisterByEmail = "/user_center.Service/RegisterByEmail"
const OperationServiceRegisterByPassword = "/user_center.Service/RegisterByPassword"
const OperationServiceRegisterEmailCaptcha = "/user_center.Service/RegisterEmailCaptcha"
const OperationServiceRegisterImageCaptcha = "/user_center.Service/RegisterImageCaptcha"
const OperationServiceRegisterUsernameCheck = "/user_center.Service/RegisterUsernameCheck"
const OperationServiceUpdateAgreement = "/user_center.Service/UpdateAgreement"
const OperationServiceUpdateApp = "/user_center.Service/UpdateApp"
const OperationServiceUpdateChannel = "/user_center.Service/UpdateChannel"
const OperationServiceUpdateExtraField = "/user_center.Service/UpdateExtraField"
const OperationServiceUpdateScene = "/user_center.Service/UpdateScene"
const OperationServiceUpdateUser = "/user_center.Service/UpdateUser"

type ServiceHTTPServer interface {
	AddAgreement(context.Context, *AddAgreementRequest) (*AddAgreementReply, error)
	AddApp(context.Context, *AddAppRequest) (*AddAppReply, error)
	AddChannel(context.Context, *AddChannelRequest) (*AddChannelReply, error)
	AddExtraField(context.Context, *AddExtraFieldRequest) (*AddExtraFieldReply, error)
	AddScene(context.Context, *AddSceneRequest) (*AddSceneReply, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserReply, error)
	AddUserApp(context.Context, *AddUserAppRequest) (*emptypb.Empty, error)
	AllChannel(context.Context, *emptypb.Empty) (*AllChannelReply, error)
	AllExtraFieldType(context.Context, *emptypb.Empty) (*AllExtraFieldTypeReply, error)
	AllLoginPlatform(context.Context, *emptypb.Empty) (*AllLoginPlatformReply, error)
	Auth(context.Context, *AuthRequest) (*emptypb.Empty, error)
	BindByEmail(context.Context, *BindByEmailRequest) (*LoginReply, error)
	BindByPassword(context.Context, *LoginByPasswordRequest) (*LoginReply, error)
	BindEmailCaptcha(context.Context, *BindEmailCaptchaRequest) (*EmailCaptchaReply, error)
	BindImageCaptcha(context.Context, *emptypb.Empty) (*ImageCaptchaReply, error)
	DeleteAgreement(context.Context, *DeleteAgreementRequest) (*emptypb.Empty, error)
	DeleteApp(context.Context, *DeleteAppRequest) (*emptypb.Empty, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*emptypb.Empty, error)
	DeleteExtraField(context.Context, *DeleteExtraFieldRequest) (*emptypb.Empty, error)
	DeleteScene(context.Context, *DeleteSceneRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	DeleteUserApp(context.Context, *DeleteUserAppRequest) (*emptypb.Empty, error)
	// DisableUser DisableUser 禁用用户
	DisableUser(context.Context, *DisableUserRequest) (*emptypb.Empty, error)
	// EnableUser DisableUser 禁用用户
	EnableUser(context.Context, *EnableUserRequest) (*emptypb.Empty, error)
	GetAgreement(context.Context, *GetAgreementRequest) (*Agreement, error)
	GetAppByKeyword(context.Context, *GetAppByKeywordRequest) (*App, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*User, error)
	GetSceneByKeyword(context.Context, *GetSceneByKeywordRequest) (*Scene, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	LoginByEmail(context.Context, *LoginByEmailRequest) (*LoginReply, error)
	LoginByPassword(context.Context, *LoginByPasswordRequest) (*LoginReply, error)
	LoginEmailCaptcha(context.Context, *LoginEmailCaptchaRequest) (*EmailCaptchaReply, error)
	LoginImageCaptcha(context.Context, *emptypb.Empty) (*ImageCaptchaReply, error)
	// OfflineUser DisableUser 禁用用户
	OfflineUser(context.Context, *OfflineUserRequest) (*emptypb.Empty, error)
	PageAgreement(context.Context, *PageAgreementRequest) (*PageAgreementReply, error)
	PageApp(context.Context, *PageAppRequest) (*PageAppReply, error)
	PageExtraField(context.Context, *PageExtraFieldRequest) (*PageExtraFieldReply, error)
	PageScene(context.Context, *PageSceneRequest) (*PageSceneReply, error)
	PageUser(context.Context, *PageUserRequest) (*PageUserReply, error)
	RegisterByEmail(context.Context, *RegisterByEmailRequest) (*RegisterReply, error)
	RegisterByPassword(context.Context, *RegisterByPasswordRequest) (*RegisterReply, error)
	RegisterEmailCaptcha(context.Context, *RegisterEmailCaptchaRequest) (*EmailCaptchaReply, error)
	RegisterImageCaptcha(context.Context, *emptypb.Empty) (*ImageCaptchaReply, error)
	RegisterUsernameCheck(context.Context, *RegisterUsernameCheckRequest) (*RegisterUsernameCheckReply, error)
	UpdateAgreement(context.Context, *UpdateAgreementRequest) (*emptypb.Empty, error)
	UpdateApp(context.Context, *UpdateAppRequest) (*emptypb.Empty, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*emptypb.Empty, error)
	UpdateExtraField(context.Context, *UpdateExtraFieldRequest) (*emptypb.Empty, error)
	UpdateScene(context.Context, *UpdateSceneRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user-center/client/v1/login/image-captcha", _Service_LoginImageCaptcha0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/bind/image-captcha", _Service_BindImageCaptcha0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/register/image-captcha", _Service_RegisterImageCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/password", _Service_LoginByPassword0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/bind/password", _Service_BindByPassword0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/register/username/check", _Service_RegisterUsernameCheck0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/register/password", _Service_RegisterByPassword0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/email-captcha", _Service_LoginEmailCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/email", _Service_LoginByEmail0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/bind/email-captcha", _Service_BindEmailCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/bind/email", _Service_BindByEmail0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/register/email-captcha", _Service_RegisterEmailCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/register/email", _Service_RegisterByEmail0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/auth", _Service_Auth0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/agreements", _Service_PageAgreement0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/agreement", _Service_GetAgreement0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/agreement", _Service_GetAgreement1_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/agreement", _Service_AddAgreement0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/agreement", _Service_UpdateAgreement0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/agreement", _Service_DeleteAgreement0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/scenes", _Service_PageScene0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/scene", _Service_GetSceneByKeyword0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/scene", _Service_GetSceneByKeyword1_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/scene", _Service_AddScene0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/scene", _Service_UpdateScene0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/scene", _Service_DeleteScene0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/channels", _Service_AllChannel0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/channel", _Service_AddChannel0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/channel", _Service_UpdateChannel0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/channel", _Service_DeleteChannel0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/apps", _Service_PageApp0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/app", _Service_GetAppByKeyword0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/app", _Service_GetAppByKeyword1_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/app", _Service_AddApp0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/app", _Service_UpdateApp0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/app", _Service_DeleteApp0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/extra-field/types", _Service_AllExtraFieldType0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/extra-fields", _Service_PageExtraField0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/extra-field", _Service_AddExtraField0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/extra-field", _Service_UpdateExtraField0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/extra-field", _Service_DeleteExtraField0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/login/platforms", _Service_AllLoginPlatform0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/user", _Service_GetUser0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/user", _Service_GetCurrentUser0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/users", _Service_PageUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user", _Service_AddUser0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/user", _Service_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/user", _Service_DeleteUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/disable", _Service_DisableUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/enable", _Service_EnableUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/offline", _Service_OfflineUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/app", _Service_AddUserApp0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/user/app", _Service_DeleteUserApp0_HTTP_Handler(srv))
}

func _Service_LoginImageCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceLoginImageCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.LoginImageCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_BindImageCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceBindImageCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.BindImageCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RegisterImageCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRegisterImageCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RegisterImageCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_LoginByPassword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceLoginByPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.LoginByPassword(ctx, req.(*LoginByPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_BindByPassword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByPasswordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceBindByPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.BindByPassword(ctx, req.(*LoginByPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RegisterUsernameCheck0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUsernameCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRegisterUsernameCheck)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RegisterUsernameCheck(ctx, req.(*RegisterUsernameCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUsernameCheckReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RegisterByPassword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterByPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRegisterByPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RegisterByPassword(ctx, req.(*RegisterByPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Service_LoginEmailCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginEmailCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceLoginEmailCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.LoginEmailCaptcha(ctx, req.(*LoginEmailCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_LoginByEmail0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceLoginByEmail)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.LoginByEmail(ctx, req.(*LoginByEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_BindEmailCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindEmailCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceBindEmailCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.BindEmailCaptcha(ctx, req.(*BindEmailCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_BindByEmail0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindByEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceBindByEmail)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.BindByEmail(ctx, req.(*BindByEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RegisterEmailCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterEmailCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRegisterEmailCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RegisterEmailCaptcha(ctx, req.(*RegisterEmailCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RegisterByEmail0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterByEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRegisterByEmail)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RegisterByEmail(ctx, req.(*RegisterByEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Service_Auth0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Auth(ctx, req.(*AuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageAgreement0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageAgreementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageAgreement(ctx, req.(*PageAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageAgreementReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAgreement0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAgreementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAgreement(ctx, req.(*GetAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Agreement)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAgreement1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAgreementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAgreement(ctx, req.(*GetAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Agreement)
		return ctx.Result(200, reply)
	}
}

func _Service_AddAgreement0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAgreementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddAgreement(ctx, req.(*AddAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAgreementReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateAgreement0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAgreementRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateAgreement(ctx, req.(*UpdateAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteAgreement0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAgreementRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteAgreement)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteAgreement(ctx, req.(*DeleteAgreementRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageScene0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageSceneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageScene)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageScene(ctx, req.(*PageSceneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageSceneReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetSceneByKeyword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSceneByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetSceneByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetSceneByKeyword(ctx, req.(*GetSceneByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Scene)
		return ctx.Result(200, reply)
	}
}

func _Service_GetSceneByKeyword1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSceneByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetSceneByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetSceneByKeyword(ctx, req.(*GetSceneByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Scene)
		return ctx.Result(200, reply)
	}
}

func _Service_AddScene0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddSceneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddScene)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddScene(ctx, req.(*AddSceneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddSceneReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateScene0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSceneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateScene)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateScene(ctx, req.(*UpdateSceneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteScene0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSceneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteScene)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteScene(ctx, req.(*DeleteSceneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllChannel(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddChannel(ctx, req.(*AddChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateChannel(ctx, req.(*UpdateChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteChannel(ctx, req.(*DeleteChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageApp(ctx, req.(*PageAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageAppReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAppByKeyword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAppByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAppByKeyword(ctx, req.(*GetAppByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAppByKeyword1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAppByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAppByKeyword(ctx, req.(*GetAppByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

func _Service_AddApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddApp(ctx, req.(*AddAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAppReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateApp(ctx, req.(*UpdateAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteApp(ctx, req.(*DeleteAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllExtraFieldType0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllExtraFieldType)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllExtraFieldType(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllExtraFieldTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageExtraField0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageExtraFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageExtraField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageExtraField(ctx, req.(*PageExtraFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageExtraFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddExtraField0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddExtraFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddExtraField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddExtraField(ctx, req.(*AddExtraFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddExtraFieldReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateExtraField0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExtraFieldRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateExtraField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateExtraField(ctx, req.(*UpdateExtraFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteExtraField0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExtraFieldRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteExtraField)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteExtraField(ctx, req.(*DeleteExtraFieldRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllLoginPlatform0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllLoginPlatform)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllLoginPlatform(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllLoginPlatformReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Service_GetCurrentUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetCurrentUser(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Service_PageUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageUser(ctx, req.(*PageUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageUserReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddUser(ctx, req.(*AddUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DisableUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDisableUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DisableUser(ctx, req.(*DisableUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_EnableUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceEnableUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.EnableUser(ctx, req.(*EnableUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_OfflineUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OfflineUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOfflineUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OfflineUser(ctx, req.(*OfflineUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AddUserApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddUserApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddUserApp(ctx, req.(*AddUserAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteUserApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteUserApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUserApp(ctx, req.(*DeleteUserAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddAgreement(ctx context.Context, req *AddAgreementRequest, opts ...http.CallOption) (rsp *AddAgreementReply, err error)
	AddApp(ctx context.Context, req *AddAppRequest, opts ...http.CallOption) (rsp *AddAppReply, err error)
	AddChannel(ctx context.Context, req *AddChannelRequest, opts ...http.CallOption) (rsp *AddChannelReply, err error)
	AddExtraField(ctx context.Context, req *AddExtraFieldRequest, opts ...http.CallOption) (rsp *AddExtraFieldReply, err error)
	AddScene(ctx context.Context, req *AddSceneRequest, opts ...http.CallOption) (rsp *AddSceneReply, err error)
	AddUser(ctx context.Context, req *AddUserRequest, opts ...http.CallOption) (rsp *AddUserReply, err error)
	AddUserApp(ctx context.Context, req *AddUserAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AllChannel(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllChannelReply, err error)
	AllExtraFieldType(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllExtraFieldTypeReply, err error)
	AllLoginPlatform(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllLoginPlatformReply, err error)
	Auth(ctx context.Context, req *AuthRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	BindByEmail(ctx context.Context, req *BindByEmailRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	BindByPassword(ctx context.Context, req *LoginByPasswordRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	BindEmailCaptcha(ctx context.Context, req *BindEmailCaptchaRequest, opts ...http.CallOption) (rsp *EmailCaptchaReply, err error)
	BindImageCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ImageCaptchaReply, err error)
	DeleteAgreement(ctx context.Context, req *DeleteAgreementRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteApp(ctx context.Context, req *DeleteAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteChannel(ctx context.Context, req *DeleteChannelRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteExtraField(ctx context.Context, req *DeleteExtraFieldRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteScene(ctx context.Context, req *DeleteSceneRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUserApp(ctx context.Context, req *DeleteUserAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DisableUser(ctx context.Context, req *DisableUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EnableUser(ctx context.Context, req *EnableUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAgreement(ctx context.Context, req *GetAgreementRequest, opts ...http.CallOption) (rsp *Agreement, err error)
	GetAppByKeyword(ctx context.Context, req *GetAppByKeywordRequest, opts ...http.CallOption) (rsp *App, err error)
	GetCurrentUser(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *User, err error)
	GetSceneByKeyword(ctx context.Context, req *GetSceneByKeywordRequest, opts ...http.CallOption) (rsp *Scene, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *User, err error)
	LoginByEmail(ctx context.Context, req *LoginByEmailRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByPassword(ctx context.Context, req *LoginByPasswordRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginEmailCaptcha(ctx context.Context, req *LoginEmailCaptchaRequest, opts ...http.CallOption) (rsp *EmailCaptchaReply, err error)
	LoginImageCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ImageCaptchaReply, err error)
	OfflineUser(ctx context.Context, req *OfflineUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PageAgreement(ctx context.Context, req *PageAgreementRequest, opts ...http.CallOption) (rsp *PageAgreementReply, err error)
	PageApp(ctx context.Context, req *PageAppRequest, opts ...http.CallOption) (rsp *PageAppReply, err error)
	PageExtraField(ctx context.Context, req *PageExtraFieldRequest, opts ...http.CallOption) (rsp *PageExtraFieldReply, err error)
	PageScene(ctx context.Context, req *PageSceneRequest, opts ...http.CallOption) (rsp *PageSceneReply, err error)
	PageUser(ctx context.Context, req *PageUserRequest, opts ...http.CallOption) (rsp *PageUserReply, err error)
	RegisterByEmail(ctx context.Context, req *RegisterByEmailRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	RegisterByPassword(ctx context.Context, req *RegisterByPasswordRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	RegisterEmailCaptcha(ctx context.Context, req *RegisterEmailCaptchaRequest, opts ...http.CallOption) (rsp *EmailCaptchaReply, err error)
	RegisterImageCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ImageCaptchaReply, err error)
	RegisterUsernameCheck(ctx context.Context, req *RegisterUsernameCheckRequest, opts ...http.CallOption) (rsp *RegisterUsernameCheckReply, err error)
	UpdateAgreement(ctx context.Context, req *UpdateAgreementRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateApp(ctx context.Context, req *UpdateAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateChannel(ctx context.Context, req *UpdateChannelRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateExtraField(ctx context.Context, req *UpdateExtraFieldRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateScene(ctx context.Context, req *UpdateSceneRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddAgreement(ctx context.Context, in *AddAgreementRequest, opts ...http.CallOption) (*AddAgreementReply, error) {
	var out AddAgreementReply
	pattern := "/user-center/admin/v1/agreement"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddAgreement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddApp(ctx context.Context, in *AddAppRequest, opts ...http.CallOption) (*AddAppReply, error) {
	var out AddAppReply
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddChannel(ctx context.Context, in *AddChannelRequest, opts ...http.CallOption) (*AddChannelReply, error) {
	var out AddChannelReply
	pattern := "/user-center/admin/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddExtraField(ctx context.Context, in *AddExtraFieldRequest, opts ...http.CallOption) (*AddExtraFieldReply, error) {
	var out AddExtraFieldReply
	pattern := "/user-center/admin/v1/extra-field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddExtraField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddScene(ctx context.Context, in *AddSceneRequest, opts ...http.CallOption) (*AddSceneReply, error) {
	var out AddSceneReply
	pattern := "/user-center/admin/v1/scene"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddScene))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddUser(ctx context.Context, in *AddUserRequest, opts ...http.CallOption) (*AddUserReply, error) {
	var out AddUserReply
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddUserApp(ctx context.Context, in *AddUserAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddUserApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllChannel(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllChannelReply, error) {
	var out AllChannelReply
	pattern := "/user-center/admin/v1/channels"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllExtraFieldType(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllExtraFieldTypeReply, error) {
	var out AllExtraFieldTypeReply
	pattern := "/user-center/admin/v1/extra-field/types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllExtraFieldType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllLoginPlatform(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllLoginPlatformReply, error) {
	var out AllLoginPlatformReply
	pattern := "/user-center/admin/v1/login/platforms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllLoginPlatform))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) Auth(ctx context.Context, in *AuthRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/client/v1/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) BindByEmail(ctx context.Context, in *BindByEmailRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/bind/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceBindByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) BindByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/bind/password"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceBindByPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) BindEmailCaptcha(ctx context.Context, in *BindEmailCaptchaRequest, opts ...http.CallOption) (*EmailCaptchaReply, error) {
	var out EmailCaptchaReply
	pattern := "/user-center/client/v1/bind/email-captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceBindEmailCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) BindImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ImageCaptchaReply, error) {
	var out ImageCaptchaReply
	pattern := "/user-center/client/v1/bind/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceBindImageCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteAgreement(ctx context.Context, in *DeleteAgreementRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/agreement"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteAgreement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/channel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteExtraField(ctx context.Context, in *DeleteExtraFieldRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/extra-field"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteExtraField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteScene(ctx context.Context, in *DeleteSceneRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/scene"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteScene))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteUserApp(ctx context.Context, in *DeleteUserAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteUserApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceDisableUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/enable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceEnableUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetAgreement(ctx context.Context, in *GetAgreementRequest, opts ...http.CallOption) (*Agreement, error) {
	var out Agreement
	pattern := "/user-center/admin/v1/agreement"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetAgreement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetAppByKeyword(ctx context.Context, in *GetAppByKeywordRequest, opts ...http.CallOption) (*App, error) {
	var out App
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetAppByKeyword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/user-center/client/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetSceneByKeyword(ctx context.Context, in *GetSceneByKeywordRequest, opts ...http.CallOption) (*Scene, error) {
	var out Scene
	pattern := "/user-center/admin/v1/scene"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetSceneByKeyword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) LoginByEmail(ctx context.Context, in *LoginByEmailRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/login/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceLoginByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) LoginByPassword(ctx context.Context, in *LoginByPasswordRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceLoginByPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) LoginEmailCaptcha(ctx context.Context, in *LoginEmailCaptchaRequest, opts ...http.CallOption) (*EmailCaptchaReply, error) {
	var out EmailCaptchaReply
	pattern := "/user-center/client/v1/login/email-captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceLoginEmailCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) LoginImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ImageCaptchaReply, error) {
	var out ImageCaptchaReply
	pattern := "/user-center/client/v1/login/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceLoginImageCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OfflineUser(ctx context.Context, in *OfflineUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/offline"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOfflineUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageAgreement(ctx context.Context, in *PageAgreementRequest, opts ...http.CallOption) (*PageAgreementReply, error) {
	var out PageAgreementReply
	pattern := "/user-center/admin/v1/agreements"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageAgreement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageApp(ctx context.Context, in *PageAppRequest, opts ...http.CallOption) (*PageAppReply, error) {
	var out PageAppReply
	pattern := "/user-center/admin/v1/apps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageExtraField(ctx context.Context, in *PageExtraFieldRequest, opts ...http.CallOption) (*PageExtraFieldReply, error) {
	var out PageExtraFieldReply
	pattern := "/user-center/admin/v1/extra-fields"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageExtraField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageScene(ctx context.Context, in *PageSceneRequest, opts ...http.CallOption) (*PageSceneReply, error) {
	var out PageSceneReply
	pattern := "/user-center/admin/v1/scenes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageScene))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageUser(ctx context.Context, in *PageUserRequest, opts ...http.CallOption) (*PageUserReply, error) {
	var out PageUserReply
	pattern := "/user-center/admin/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RegisterByEmail(ctx context.Context, in *RegisterByEmailRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user-center/client/v1/register/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceRegisterByEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RegisterByPassword(ctx context.Context, in *RegisterByPasswordRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user-center/client/v1/register/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceRegisterByPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RegisterEmailCaptcha(ctx context.Context, in *RegisterEmailCaptchaRequest, opts ...http.CallOption) (*EmailCaptchaReply, error) {
	var out EmailCaptchaReply
	pattern := "/user-center/client/v1/register/email-captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceRegisterEmailCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RegisterImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ImageCaptchaReply, error) {
	var out ImageCaptchaReply
	pattern := "/user-center/client/v1/register/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceRegisterImageCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RegisterUsernameCheck(ctx context.Context, in *RegisterUsernameCheckRequest, opts ...http.CallOption) (*RegisterUsernameCheckReply, error) {
	var out RegisterUsernameCheckReply
	pattern := "/user-center/client/v1/register/username/check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceRegisterUsernameCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateAgreement(ctx context.Context, in *UpdateAgreementRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/agreement"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateAgreement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateExtraField(ctx context.Context, in *UpdateExtraFieldRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/extra-field"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateExtraField))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateScene(ctx context.Context, in *UpdateSceneRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/scene"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateScene))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
