// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_app_interface.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppInterface with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppInterface) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInterface with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppInterfaceMultiError, or
// nil if none found.
func (m *AppInterface) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInterface) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for ParentId

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppInterfaceValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppInterfaceValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppInterfaceValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppInterfaceMultiError(errors)
	}

	return nil
}

// AppInterfaceMultiError is an error wrapping multiple validation errors
// returned by AppInterface.ValidateAll() if the designated constraints aren't met.
type AppInterfaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInterfaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInterfaceMultiError) AllErrors() []error { return m }

// AppInterfaceValidationError is the validation error returned by
// AppInterface.Validate if the designated constraints aren't met.
type AppInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInterfaceValidationError) ErrorName() string { return "AppInterfaceValidationError" }

// Error satisfies the builtin error interface
func (e AppInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInterfaceValidationError{}

// Validate checks the field values on GetAppInterfaceTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppInterfaceTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppInterfaceTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppInterfaceTreeRequestMultiError, or nil if none found.
func (m *GetAppInterfaceTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppInterfaceTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := GetAppInterfaceTreeRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAppInterfaceTreeRequestMultiError(errors)
	}

	return nil
}

// GetAppInterfaceTreeRequestMultiError is an error wrapping multiple
// validation errors returned by GetAppInterfaceTreeRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAppInterfaceTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppInterfaceTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppInterfaceTreeRequestMultiError) AllErrors() []error { return m }

// GetAppInterfaceTreeRequestValidationError is the validation error returned
// by GetAppInterfaceTreeRequest.Validate if the designated constraints aren't met.
type GetAppInterfaceTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppInterfaceTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppInterfaceTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppInterfaceTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppInterfaceTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppInterfaceTreeRequestValidationError) ErrorName() string {
	return "GetAppInterfaceTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppInterfaceTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppInterfaceTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppInterfaceTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppInterfaceTreeRequestValidationError{}

// Validate checks the field values on GetAppInterfaceTreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppInterfaceTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppInterfaceTreeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppInterfaceTreeReplyMultiError, or nil if none found.
func (m *GetAppInterfaceTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppInterfaceTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppInterfaceTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppInterfaceTreeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppInterfaceTreeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppInterfaceTreeReplyMultiError(errors)
	}

	return nil
}

// GetAppInterfaceTreeReplyMultiError is an error wrapping multiple validation
// errors returned by GetAppInterfaceTreeReply.ValidateAll() if the designated
// constraints aren't met.
type GetAppInterfaceTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppInterfaceTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppInterfaceTreeReplyMultiError) AllErrors() []error { return m }

// GetAppInterfaceTreeReplyValidationError is the validation error returned by
// GetAppInterfaceTreeReply.Validate if the designated constraints aren't met.
type GetAppInterfaceTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppInterfaceTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppInterfaceTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppInterfaceTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppInterfaceTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppInterfaceTreeReplyValidationError) ErrorName() string {
	return "GetAppInterfaceTreeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppInterfaceTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppInterfaceTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppInterfaceTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppInterfaceTreeReplyValidationError{}

// Validate checks the field values on AddAppInterfaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppInterfaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppInterfaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppInterfaceRequestMultiError, or nil if none found.
func (m *AddAppInterfaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppInterfaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAppId() <= 0 {
		err := AddAppInterfaceRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 0 {
		err := AddAppInterfaceRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := AddAppInterfaceRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddAppInterfaceRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return AddAppInterfaceRequestMultiError(errors)
	}

	return nil
}

// AddAppInterfaceRequestMultiError is an error wrapping multiple validation
// errors returned by AddAppInterfaceRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAppInterfaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppInterfaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppInterfaceRequestMultiError) AllErrors() []error { return m }

// AddAppInterfaceRequestValidationError is the validation error returned by
// AddAppInterfaceRequest.Validate if the designated constraints aren't met.
type AddAppInterfaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppInterfaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppInterfaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppInterfaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppInterfaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppInterfaceRequestValidationError) ErrorName() string {
	return "AddAppInterfaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppInterfaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppInterfaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppInterfaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppInterfaceRequestValidationError{}

// Validate checks the field values on AddAppInterfaceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAppInterfaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAppInterfaceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAppInterfaceReplyMultiError, or nil if none found.
func (m *AddAppInterfaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAppInterfaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddAppInterfaceReplyMultiError(errors)
	}

	return nil
}

// AddAppInterfaceReplyMultiError is an error wrapping multiple validation
// errors returned by AddAppInterfaceReply.ValidateAll() if the designated
// constraints aren't met.
type AddAppInterfaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAppInterfaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAppInterfaceReplyMultiError) AllErrors() []error { return m }

// AddAppInterfaceReplyValidationError is the validation error returned by
// AddAppInterfaceReply.Validate if the designated constraints aren't met.
type AddAppInterfaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppInterfaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppInterfaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppInterfaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppInterfaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppInterfaceReplyValidationError) ErrorName() string {
	return "AddAppInterfaceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppInterfaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppInterfaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppInterfaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppInterfaceReplyValidationError{}

// Validate checks the field values on UpdateAppInterfaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAppInterfaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAppInterfaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAppInterfaceRequestMultiError, or nil if none found.
func (m *UpdateAppInterfaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAppInterfaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAppInterfaceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetParentId() < 0 {
		err := UpdateAppInterfaceRequestValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := UpdateAppInterfaceRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateAppInterfaceRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Method != nil {
		// no validation rules for Method
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateAppInterfaceRequestMultiError(errors)
	}

	return nil
}

// UpdateAppInterfaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAppInterfaceRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateAppInterfaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAppInterfaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAppInterfaceRequestMultiError) AllErrors() []error { return m }

// UpdateAppInterfaceRequestValidationError is the validation error returned by
// UpdateAppInterfaceRequest.Validate if the designated constraints aren't met.
type UpdateAppInterfaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppInterfaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppInterfaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppInterfaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppInterfaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppInterfaceRequestValidationError) ErrorName() string {
	return "UpdateAppInterfaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppInterfaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppInterfaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppInterfaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppInterfaceRequestValidationError{}

// Validate checks the field values on DeleteAppInterfaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAppInterfaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAppInterfaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAppInterfaceRequestMultiError, or nil if none found.
func (m *DeleteAppInterfaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAppInterfaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAppInterfaceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAppInterfaceRequestMultiError(errors)
	}

	return nil
}

// DeleteAppInterfaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAppInterfaceRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAppInterfaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAppInterfaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAppInterfaceRequestMultiError) AllErrors() []error { return m }

// DeleteAppInterfaceRequestValidationError is the validation error returned by
// DeleteAppInterfaceRequest.Validate if the designated constraints aren't met.
type DeleteAppInterfaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppInterfaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppInterfaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppInterfaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppInterfaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppInterfaceRequestValidationError) ErrorName() string {
	return "DeleteAppInterfaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppInterfaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppInterfaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppInterfaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppInterfaceRequestValidationError{}
