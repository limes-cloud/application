// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user_center_field_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_AllFieldType_FullMethodName = "/field.Service/AllFieldType"
	Service_PageField_FullMethodName    = "/field.Service/PageField"
	Service_AddField_FullMethodName     = "/field.Service/AddField"
	Service_UpdateField_FullMethodName  = "/field.Service/UpdateField"
	Service_DeleteField_FullMethodName  = "/field.Service/DeleteField"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	AllFieldType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFieldTypeReply, error)
	PageField(ctx context.Context, in *PageFieldRequest, opts ...grpc.CallOption) (*PageFieldReply, error)
	AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*AddFieldReply, error)
	UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AllFieldType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFieldTypeReply, error) {
	out := new(AllFieldTypeReply)
	err := c.cc.Invoke(ctx, Service_AllFieldType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageField(ctx context.Context, in *PageFieldRequest, opts ...grpc.CallOption) (*PageFieldReply, error) {
	out := new(PageFieldReply)
	err := c.cc.Invoke(ctx, Service_PageField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*AddFieldReply, error) {
	out := new(AddFieldReply)
	err := c.cc.Invoke(ctx, Service_AddField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateField(ctx context.Context, in *UpdateFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	AllFieldType(context.Context, *emptypb.Empty) (*AllFieldTypeReply, error)
	PageField(context.Context, *PageFieldRequest) (*PageFieldReply, error)
	AddField(context.Context, *AddFieldRequest) (*AddFieldReply, error)
	UpdateField(context.Context, *UpdateFieldRequest) (*emptypb.Empty, error)
	DeleteField(context.Context, *DeleteFieldRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AllFieldType(context.Context, *emptypb.Empty) (*AllFieldTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFieldType not implemented")
}
func (UnimplementedServiceServer) PageField(context.Context, *PageFieldRequest) (*PageFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageField not implemented")
}
func (UnimplementedServiceServer) AddField(context.Context, *AddFieldRequest) (*AddFieldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddField not implemented")
}
func (UnimplementedServiceServer) UpdateField(context.Context, *UpdateFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}
func (UnimplementedServiceServer) DeleteField(context.Context, *DeleteFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AllFieldType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllFieldType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllFieldType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllFieldType(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageField(ctx, req.(*PageFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddField(ctx, req.(*AddFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateField(ctx, req.(*UpdateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteField(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "field.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllFieldType",
			Handler:    _Service_AllFieldType_Handler,
		},
		{
			MethodName: "PageField",
			Handler:    _Service_PageField_Handler,
		},
		{
			MethodName: "AddField",
			Handler:    _Service_AddField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _Service_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _Service_DeleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center_field_service.proto",
}
