// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReplyMultiError, or nil
// if none found.
func (m *AuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AppId

	// no validation rules for AppKeyword

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return AuthReplyMultiError(errors)
	}

	return nil
}

// AuthReplyMultiError is an error wrapping multiple validation errors returned
// by AuthReply.ValidateAll() if the designated constraints aren't met.
type AuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReplyMultiError) AllErrors() []error { return m }

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}

// Validate checks the field values on AllLoginPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllLoginPlatformReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllLoginPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllLoginPlatformReplyMultiError, or nil if none found.
func (m *AllLoginPlatformReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllLoginPlatformReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllLoginPlatformReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllLoginPlatformReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllLoginPlatformReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllLoginPlatformReplyMultiError(errors)
	}

	return nil
}

// AllLoginPlatformReplyMultiError is an error wrapping multiple validation
// errors returned by AllLoginPlatformReply.ValidateAll() if the designated
// constraints aren't met.
type AllLoginPlatformReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllLoginPlatformReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllLoginPlatformReplyMultiError) AllErrors() []error { return m }

// AllLoginPlatformReplyValidationError is the validation error returned by
// AllLoginPlatformReply.Validate if the designated constraints aren't met.
type AllLoginPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllLoginPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllLoginPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllLoginPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllLoginPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllLoginPlatformReplyValidationError) ErrorName() string {
	return "AllLoginPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllLoginPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllLoginPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllLoginPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllLoginPlatformReplyValidationError{}

// Validate checks the field values on OAuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthLoginRequestMultiError, or nil if none found.
func (m *OAuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthLoginRequestMultiError(errors)
	}

	return nil
}

// OAuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type OAuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthLoginRequestMultiError) AllErrors() []error { return m }

// OAuthLoginRequestValidationError is the validation error returned by
// OAuthLoginRequest.Validate if the designated constraints aren't met.
type OAuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthLoginRequestValidationError) ErrorName() string {
	return "OAuthLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthLoginRequestValidationError{}

// Validate checks the field values on OAuthBindEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuthBindEmailCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthBindEmailCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthBindEmailCaptchaRequestMultiError, or nil if none found.
func (m *OAuthBindEmailCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthBindEmailCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = OAuthBindEmailCaptchaRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthBindEmailCaptchaRequestMultiError(errors)
	}

	return nil
}

func (m *OAuthBindEmailCaptchaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *OAuthBindEmailCaptchaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// OAuthBindEmailCaptchaRequestMultiError is an error wrapping multiple
// validation errors returned by OAuthBindEmailCaptchaRequest.ValidateAll() if
// the designated constraints aren't met.
type OAuthBindEmailCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthBindEmailCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthBindEmailCaptchaRequestMultiError) AllErrors() []error { return m }

// OAuthBindEmailCaptchaRequestValidationError is the validation error returned
// by OAuthBindEmailCaptchaRequest.Validate if the designated constraints
// aren't met.
type OAuthBindEmailCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthBindEmailCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthBindEmailCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthBindEmailCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthBindEmailCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthBindEmailCaptchaRequestValidationError) ErrorName() string {
	return "OAuthBindEmailCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthBindEmailCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthBindEmailCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthBindEmailCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthBindEmailCaptchaRequestValidationError{}

// Validate checks the field values on PasswordLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordLoginRequestMultiError, or nil if none found.
func (m *PasswordLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordLoginRequestMultiError(errors)
	}

	return nil
}

// PasswordLoginRequestMultiError is an error wrapping multiple validation
// errors returned by PasswordLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type PasswordLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordLoginRequestMultiError) AllErrors() []error { return m }

// PasswordLoginRequestValidationError is the validation error returned by
// PasswordLoginRequest.Validate if the designated constraints aren't met.
type PasswordLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordLoginRequestValidationError) ErrorName() string {
	return "PasswordLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordLoginRequestValidationError{}

// Validate checks the field values on PasswordRegisterCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordRegisterCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRegisterCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRegisterCheckRequestMultiError, or nil if none found.
func (m *PasswordRegisterCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRegisterCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := PasswordRegisterCheckRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordRegisterCheckRequestMultiError(errors)
	}

	return nil
}

// PasswordRegisterCheckRequestMultiError is an error wrapping multiple
// validation errors returned by PasswordRegisterCheckRequest.ValidateAll() if
// the designated constraints aren't met.
type PasswordRegisterCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRegisterCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRegisterCheckRequestMultiError) AllErrors() []error { return m }

// PasswordRegisterCheckRequestValidationError is the validation error returned
// by PasswordRegisterCheckRequest.Validate if the designated constraints
// aren't met.
type PasswordRegisterCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRegisterCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRegisterCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRegisterCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRegisterCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRegisterCheckRequestValidationError) ErrorName() string {
	return "PasswordRegisterCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordRegisterCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRegisterCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRegisterCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRegisterCheckRequestValidationError{}

// Validate checks the field values on PasswordRegisterCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordRegisterCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRegisterCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRegisterCheckReplyMultiError, or nil if none found.
func (m *PasswordRegisterCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRegisterCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allow

	if len(errors) > 0 {
		return PasswordRegisterCheckReplyMultiError(errors)
	}

	return nil
}

// PasswordRegisterCheckReplyMultiError is an error wrapping multiple
// validation errors returned by PasswordRegisterCheckReply.ValidateAll() if
// the designated constraints aren't met.
type PasswordRegisterCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRegisterCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRegisterCheckReplyMultiError) AllErrors() []error { return m }

// PasswordRegisterCheckReplyValidationError is the validation error returned
// by PasswordRegisterCheckReply.Validate if the designated constraints aren't met.
type PasswordRegisterCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRegisterCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRegisterCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRegisterCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRegisterCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRegisterCheckReplyValidationError) ErrorName() string {
	return "PasswordRegisterCheckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordRegisterCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRegisterCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRegisterCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRegisterCheckReplyValidationError{}

// Validate checks the field values on OAuthBindByPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuthBindByPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthBindByPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthBindByPasswordRequestMultiError, or nil if none found.
func (m *OAuthBindByPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthBindByPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := OAuthBindByPasswordRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthBindByPasswordRequestMultiError(errors)
	}

	return nil
}

// OAuthBindByPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by OAuthBindByPasswordRequest.ValidateAll() if
// the designated constraints aren't met.
type OAuthBindByPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthBindByPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthBindByPasswordRequestMultiError) AllErrors() []error { return m }

// OAuthBindByPasswordRequestValidationError is the validation error returned
// by OAuthBindByPasswordRequest.Validate if the designated constraints aren't met.
type OAuthBindByPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthBindByPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthBindByPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthBindByPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthBindByPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthBindByPasswordRequestValidationError) ErrorName() string {
	return "OAuthBindByPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthBindByPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthBindByPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthBindByPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthBindByPasswordRequestValidationError{}

// Validate checks the field values on BindReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindReplyMultiError, or nil
// if none found.
func (m *BindReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BindReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return BindReplyMultiError(errors)
	}

	return nil
}

// BindReplyMultiError is an error wrapping multiple validation errors returned
// by BindReply.ValidateAll() if the designated constraints aren't met.
type BindReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindReplyMultiError) AllErrors() []error { return m }

// BindReplyValidationError is the validation error returned by
// BindReply.Validate if the designated constraints aren't met.
type BindReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindReplyValidationError) ErrorName() string { return "BindReplyValidationError" }

// Error satisfies the builtin error interface
func (e BindReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindReplyValidationError{}

// Validate checks the field values on PasswordRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRegisterRequestMultiError, or nil if none found.
func (m *PasswordRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := PasswordRegisterRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordRegisterRequestMultiError(errors)
	}

	return nil
}

// PasswordRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by PasswordRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type PasswordRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRegisterRequestMultiError) AllErrors() []error { return m }

// PasswordRegisterRequestValidationError is the validation error returned by
// PasswordRegisterRequest.Validate if the designated constraints aren't met.
type PasswordRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRegisterRequestValidationError) ErrorName() string {
	return "PasswordRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRegisterRequestValidationError{}

// Validate checks the field values on RegisterReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReplyMultiError, or
// nil if none found.
func (m *RegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterReplyMultiError(errors)
	}

	return nil
}

// RegisterReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReplyMultiError) AllErrors() []error { return m }

// RegisterReplyValidationError is the validation error returned by
// RegisterReply.Validate if the designated constraints aren't met.
type RegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReplyValidationError) ErrorName() string { return "RegisterReplyValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReplyValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on CaptchaReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CaptchaReplyMultiError, or
// nil if none found.
func (m *CaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Expire

	// no validation rules for Base64

	if len(errors) > 0 {
		return CaptchaReplyMultiError(errors)
	}

	return nil
}

// CaptchaReplyMultiError is an error wrapping multiple validation errors
// returned by CaptchaReply.ValidateAll() if the designated constraints aren't met.
type CaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaReplyMultiError) AllErrors() []error { return m }

// CaptchaReplyValidationError is the validation error returned by
// CaptchaReply.Validate if the designated constraints aren't met.
type CaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaReplyValidationError) ErrorName() string { return "CaptchaReplyValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaReplyValidationError{}

// Validate checks the field values on OAuthBindByCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuthBindByCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthBindByCaptchaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthBindByCaptchaRequestMultiError, or nil if none found.
func (m *OAuthBindByCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthBindByCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := OAuthBindByCaptchaRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthBindByCaptchaRequestMultiError(errors)
	}

	return nil
}

// OAuthBindByCaptchaRequestMultiError is an error wrapping multiple validation
// errors returned by OAuthBindByCaptchaRequest.ValidateAll() if the
// designated constraints aren't met.
type OAuthBindByCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthBindByCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthBindByCaptchaRequestMultiError) AllErrors() []error { return m }

// OAuthBindByCaptchaRequestValidationError is the validation error returned by
// OAuthBindByCaptchaRequest.Validate if the designated constraints aren't met.
type OAuthBindByCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthBindByCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthBindByCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthBindByCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthBindByCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthBindByCaptchaRequestValidationError) ErrorName() string {
	return "OAuthBindByCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthBindByCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthBindByCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthBindByCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthBindByCaptchaRequestValidationError{}

// Validate checks the field values on CaptchaLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaLoginRequestMultiError, or nil if none found.
func (m *CaptchaLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CaptchaLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := CaptchaLoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := CaptchaLoginRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := CaptchaLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaLoginRequestMultiError(errors)
	}

	return nil
}

// CaptchaLoginRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaLoginRequestMultiError) AllErrors() []error { return m }

// CaptchaLoginRequestValidationError is the validation error returned by
// CaptchaLoginRequest.Validate if the designated constraints aren't met.
type CaptchaLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaLoginRequestValidationError) ErrorName() string {
	return "CaptchaLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaLoginRequestValidationError{}

// Validate checks the field values on CaptchaRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaRegisterRequestMultiError, or nil if none found.
func (m *CaptchaRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CaptchaRegisterRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := CaptchaRegisterRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := CaptchaRegisterRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := CaptchaRegisterRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaRegisterRequestMultiError(errors)
	}

	return nil
}

// CaptchaRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaRegisterRequestMultiError) AllErrors() []error { return m }

// CaptchaRegisterRequestValidationError is the validation error returned by
// CaptchaRegisterRequest.Validate if the designated constraints aren't met.
type CaptchaRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaRegisterRequestValidationError) ErrorName() string {
	return "CaptchaRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaRegisterRequestValidationError{}

// Validate checks the field values on CaptchaLoginEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaLoginEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaLoginEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaLoginEmailRequestMultiError, or nil if none found.
func (m *CaptchaLoginEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaLoginEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CaptchaLoginEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaLoginEmailRequestMultiError(errors)
	}

	return nil
}

func (m *CaptchaLoginEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CaptchaLoginEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CaptchaLoginEmailRequestMultiError is an error wrapping multiple validation
// errors returned by CaptchaLoginEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type CaptchaLoginEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaLoginEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaLoginEmailRequestMultiError) AllErrors() []error { return m }

// CaptchaLoginEmailRequestValidationError is the validation error returned by
// CaptchaLoginEmailRequest.Validate if the designated constraints aren't met.
type CaptchaLoginEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaLoginEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaLoginEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaLoginEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaLoginEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaLoginEmailRequestValidationError) ErrorName() string {
	return "CaptchaLoginEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaLoginEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaLoginEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaLoginEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaLoginEmailRequestValidationError{}

// Validate checks the field values on CaptchaRegisterEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CaptchaRegisterEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaRegisterEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaRegisterEmailRequestMultiError, or nil if none found.
func (m *CaptchaRegisterEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaRegisterEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CaptchaRegisterEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CaptchaRegisterEmailRequestMultiError(errors)
	}

	return nil
}

func (m *CaptchaRegisterEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CaptchaRegisterEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CaptchaRegisterEmailRequestMultiError is an error wrapping multiple
// validation errors returned by CaptchaRegisterEmailRequest.ValidateAll() if
// the designated constraints aren't met.
type CaptchaRegisterEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaRegisterEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaRegisterEmailRequestMultiError) AllErrors() []error { return m }

// CaptchaRegisterEmailRequestValidationError is the validation error returned
// by CaptchaRegisterEmailRequest.Validate if the designated constraints
// aren't met.
type CaptchaRegisterEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaRegisterEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaRegisterEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaRegisterEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaRegisterEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaRegisterEmailRequestValidationError) ErrorName() string {
	return "CaptchaRegisterEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptchaRegisterEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaRegisterEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaRegisterEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaRegisterEmailRequestValidationError{}

// Validate checks the field values on ParseTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParseTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseTokenReplyMultiError, or nil if none found.
func (m *ParseTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for AppKeyword

	if len(errors) > 0 {
		return ParseTokenReplyMultiError(errors)
	}

	return nil
}

// ParseTokenReplyMultiError is an error wrapping multiple validation errors
// returned by ParseTokenReply.ValidateAll() if the designated constraints
// aren't met.
type ParseTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTokenReplyMultiError) AllErrors() []error { return m }

// ParseTokenReplyValidationError is the validation error returned by
// ParseTokenReply.Validate if the designated constraints aren't met.
type ParseTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTokenReplyValidationError) ErrorName() string { return "ParseTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e ParseTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTokenReplyValidationError{}

// Validate checks the field values on AllLoginPlatformReply_Platform with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllLoginPlatformReply_Platform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllLoginPlatformReply_Platform with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AllLoginPlatformReply_PlatformMultiError, or nil if none found.
func (m *AllLoginPlatformReply_Platform) ValidateAll() error {
	return m.validate(true)
}

func (m *AllLoginPlatformReply_Platform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for Name

	if len(errors) > 0 {
		return AllLoginPlatformReply_PlatformMultiError(errors)
	}

	return nil
}

// AllLoginPlatformReply_PlatformMultiError is an error wrapping multiple
// validation errors returned by AllLoginPlatformReply_Platform.ValidateAll()
// if the designated constraints aren't met.
type AllLoginPlatformReply_PlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllLoginPlatformReply_PlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllLoginPlatformReply_PlatformMultiError) AllErrors() []error { return m }

// AllLoginPlatformReply_PlatformValidationError is the validation error
// returned by AllLoginPlatformReply_Platform.Validate if the designated
// constraints aren't met.
type AllLoginPlatformReply_PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllLoginPlatformReply_PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllLoginPlatformReply_PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllLoginPlatformReply_PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllLoginPlatformReply_PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllLoginPlatformReply_PlatformValidationError) ErrorName() string {
	return "AllLoginPlatformReply_PlatformValidationError"
}

// Error satisfies the builtin error interface
func (e AllLoginPlatformReply_PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllLoginPlatformReply_Platform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllLoginPlatformReply_PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllLoginPlatformReply_PlatformValidationError{}
