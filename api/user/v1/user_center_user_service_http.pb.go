// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: user_center_user_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddUser = "/user.Service/AddUser"
const OperationServiceAddUserApp = "/user.Service/AddUserApp"
const OperationServiceCaptchaLogin = "/user.Service/CaptchaLogin"
const OperationServiceCaptchaLoginEmail = "/user.Service/CaptchaLoginEmail"
const OperationServiceCaptchaRegister = "/user.Service/CaptchaRegister"
const OperationServiceCaptchaRegisterEmail = "/user.Service/CaptchaRegisterEmail"
const OperationServiceDeleteUser = "/user.Service/DeleteUser"
const OperationServiceDeleteUserApp = "/user.Service/DeleteUserApp"
const OperationServiceDisableUser = "/user.Service/DisableUser"
const OperationServiceEnableUser = "/user.Service/EnableUser"
const OperationServiceGetCurrentUser = "/user.Service/GetCurrentUser"
const OperationServiceGetUser = "/user.Service/GetUser"
const OperationServiceOAuthBindByCaptcha = "/user.Service/OAuthBindByCaptcha"
const OperationServiceOAuthBindByPassword = "/user.Service/OAuthBindByPassword"
const OperationServiceOAuthBindEmailCaptcha = "/user.Service/OAuthBindEmailCaptcha"
const OperationServiceOAuthBindImageCaptcha = "/user.Service/OAuthBindImageCaptcha"
const OperationServiceOAuthLogin = "/user.Service/OAuthLogin"
const OperationServiceOfflineUser = "/user.Service/OfflineUser"
const OperationServicePageUser = "/user.Service/PageUser"
const OperationServiceParseToken = "/user.Service/ParseToken"
const OperationServicePasswordLogin = "/user.Service/PasswordLogin"
const OperationServicePasswordLoginCaptcha = "/user.Service/PasswordLoginCaptcha"
const OperationServicePasswordRegister = "/user.Service/PasswordRegister"
const OperationServicePasswordRegisterCaptcha = "/user.Service/PasswordRegisterCaptcha"
const OperationServicePasswordRegisterCheck = "/user.Service/PasswordRegisterCheck"
const OperationServiceRefreshToken = "/user.Service/RefreshToken"
const OperationServiceUpdateCurrentUser = "/user.Service/UpdateCurrentUser"
const OperationServiceUpdateUser = "/user.Service/UpdateUser"

type ServiceHTTPServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserReply, error)
	// AddUserApp 添加用户应用
	AddUserApp(context.Context, *AddUserAppRequest) (*emptypb.Empty, error)
	// CaptchaLogin 验证码登录
	CaptchaLogin(context.Context, *CaptchaLoginRequest) (*LoginReply, error)
	// CaptchaLoginEmail 验证码登录邮件验证码
	CaptchaLoginEmail(context.Context, *CaptchaLoginEmailRequest) (*CaptchaReply, error)
	// CaptchaRegister 验证码注册接口
	CaptchaRegister(context.Context, *CaptchaRegisterRequest) (*RegisterReply, error)
	// CaptchaRegisterEmail 验证码注册邮件验证码
	CaptchaRegisterEmail(context.Context, *CaptchaRegisterEmailRequest) (*CaptchaReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// DeleteUserApp 删除用户应用
	DeleteUserApp(context.Context, *DeleteUserAppRequest) (*emptypb.Empty, error)
	// DisableUser 禁用用户
	DisableUser(context.Context, *DisableUserRequest) (*emptypb.Empty, error)
	// EnableUser 启用用户
	EnableUser(context.Context, *EnableUserRequest) (*emptypb.Empty, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// OAuthBindByCaptcha  三方授权绑定-验证码
	OAuthBindByCaptcha(context.Context, *OAuthBindByCaptchaRequest) (*BindReply, error)
	// OAuthBindByPassword 三方授权绑定-密码
	OAuthBindByPassword(context.Context, *OAuthBindByPasswordRequest) (*BindReply, error)
	OAuthBindEmailCaptcha(context.Context, *OAuthBindEmailCaptchaRequest) (*CaptchaReply, error)
	// OAuthBindImageCaptcha 绑定的验证码
	OAuthBindImageCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	// OAuthLogin 三方授权登录
	OAuthLogin(context.Context, *OAuthLoginRequest) (*LoginReply, error)
	// OfflineUser 下线用户
	OfflineUser(context.Context, *OfflineUserRequest) (*emptypb.Empty, error)
	PageUser(context.Context, *PageUserRequest) (*PageUserReply, error)
	// ParseToken 解析token信息
	ParseToken(context.Context, *emptypb.Empty) (*ParseTokenReply, error)
	// PasswordLogin 密码登录
	PasswordLogin(context.Context, *PasswordLoginRequest) (*LoginReply, error)
	// PasswordLoginCaptcha 密码登录验证码
	PasswordLoginCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	// PasswordRegister 密码注册
	PasswordRegister(context.Context, *PasswordRegisterRequest) (*RegisterReply, error)
	// PasswordRegisterCaptcha 注册验证啊
	PasswordRegisterCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	// PasswordRegisterCheck 密码注册检测
	PasswordRegisterCheck(context.Context, *PasswordRegisterCheckRequest) (*PasswordRegisterCheckReply, error)
	// RefreshToken 刷新token时长
	RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error)
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*emptypb.Empty, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user-center/admin/v1/user", _Service_GetUser0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/user", _Service_GetCurrentUser0_HTTP_Handler(srv))
	r.PUT("/user-center/client/v1/user", _Service_UpdateCurrentUser0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/users", _Service_PageUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user", _Service_AddUser0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/user", _Service_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/user", _Service_DeleteUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/disable", _Service_DisableUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/enable", _Service_EnableUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/offline", _Service_OfflineUser0_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/user/app", _Service_AddUserApp0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/user/app", _Service_DeleteUserApp0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/oauth", _Service_OAuthLogin0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/bind/oauth/password", _Service_OAuthBindByPassword0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/bind/oauth/captcha", _Service_OAuthBindByCaptcha0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/bind/oauth/image-captcha", _Service_OAuthBindImageCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/bind/oauth/email-captcha", _Service_OAuthBindEmailCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/password", _Service_PasswordLogin0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/login/password/image-captcha", _Service_PasswordLoginCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/register/password", _Service_PasswordRegister0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/register/password/check", _Service_PasswordRegisterCheck0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/register/password/image-captcha", _Service_PasswordRegisterCaptcha0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/captcha", _Service_CaptchaLogin0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/login/captcha/email", _Service_CaptchaLoginEmail0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/register/captcha/email-captcha", _Service_CaptchaRegisterEmail0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/register/captcha", _Service_CaptchaRegister0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/token/parse", _Service_ParseToken0_HTTP_Handler(srv))
	r.POST("/user-center/client/v1/token/refresh", _Service_RefreshToken0_HTTP_Handler(srv))
}

func _Service_GetUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Service_GetCurrentUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetCurrentUser(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*User)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateCurrentUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCurrentUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageUser(ctx, req.(*PageUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageUserReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddUser(ctx, req.(*AddUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DisableUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDisableUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DisableUser(ctx, req.(*DisableUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_EnableUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceEnableUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.EnableUser(ctx, req.(*EnableUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_OfflineUser0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OfflineUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOfflineUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OfflineUser(ctx, req.(*OfflineUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AddUserApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddUserApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddUserApp(ctx, req.(*AddUserAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteUserApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteUserApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUserApp(ctx, req.(*DeleteUserAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_OAuthLogin0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OAuthLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOAuthLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthLogin(ctx, req.(*OAuthLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_OAuthBindByPassword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OAuthBindByPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOAuthBindByPassword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthBindByPassword(ctx, req.(*OAuthBindByPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindReply)
		return ctx.Result(200, reply)
	}
}

func _Service_OAuthBindByCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OAuthBindByCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOAuthBindByCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthBindByCaptcha(ctx, req.(*OAuthBindByCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindReply)
		return ctx.Result(200, reply)
	}
}

func _Service_OAuthBindImageCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOAuthBindImageCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthBindImageCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_OAuthBindEmailCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OAuthBindEmailCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceOAuthBindEmailCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthBindEmailCaptcha(ctx, req.(*OAuthBindEmailCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PasswordLogin0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePasswordLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordLogin(ctx, req.(*PasswordLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PasswordLoginCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePasswordLoginCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordLoginCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PasswordRegister0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePasswordRegister)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordRegister(ctx, req.(*PasswordRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PasswordRegisterCheck0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordRegisterCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePasswordRegisterCheck)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordRegisterCheck(ctx, req.(*PasswordRegisterCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PasswordRegisterCheckReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PasswordRegisterCaptcha0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePasswordRegisterCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordRegisterCaptcha(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_CaptchaLogin0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCaptchaLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CaptchaLogin(ctx, req.(*CaptchaLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_CaptchaLoginEmail0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaLoginEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCaptchaLoginEmail)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CaptchaLoginEmail(ctx, req.(*CaptchaLoginEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_CaptchaRegisterEmail0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaRegisterEmailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCaptchaRegisterEmail)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CaptchaRegisterEmail(ctx, req.(*CaptchaRegisterEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Service_CaptchaRegister0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCaptchaRegister)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CaptchaRegister(ctx, req.(*CaptchaRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ParseToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceParseToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ParseToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RefreshToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RefreshToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddUser(ctx context.Context, req *AddUserRequest, opts ...http.CallOption) (rsp *AddUserReply, err error)
	AddUserApp(ctx context.Context, req *AddUserAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CaptchaLogin(ctx context.Context, req *CaptchaLoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	CaptchaLoginEmail(ctx context.Context, req *CaptchaLoginEmailRequest, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	CaptchaRegister(ctx context.Context, req *CaptchaRegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	CaptchaRegisterEmail(ctx context.Context, req *CaptchaRegisterEmailRequest, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteUserApp(ctx context.Context, req *DeleteUserAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DisableUser(ctx context.Context, req *DisableUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EnableUser(ctx context.Context, req *EnableUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCurrentUser(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *User, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *User, err error)
	OAuthBindByCaptcha(ctx context.Context, req *OAuthBindByCaptchaRequest, opts ...http.CallOption) (rsp *BindReply, err error)
	OAuthBindByPassword(ctx context.Context, req *OAuthBindByPasswordRequest, opts ...http.CallOption) (rsp *BindReply, err error)
	OAuthBindEmailCaptcha(ctx context.Context, req *OAuthBindEmailCaptchaRequest, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	OAuthBindImageCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	OAuthLogin(ctx context.Context, req *OAuthLoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	OfflineUser(ctx context.Context, req *OfflineUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PageUser(ctx context.Context, req *PageUserRequest, opts ...http.CallOption) (rsp *PageUserReply, err error)
	ParseToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ParseTokenReply, err error)
	PasswordLogin(ctx context.Context, req *PasswordLoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	PasswordLoginCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	PasswordRegister(ctx context.Context, req *PasswordRegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	PasswordRegisterCaptcha(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	PasswordRegisterCheck(ctx context.Context, req *PasswordRegisterCheckRequest, opts ...http.CallOption) (rsp *PasswordRegisterCheckReply, err error)
	RefreshToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *LoginReply, err error)
	UpdateCurrentUser(ctx context.Context, req *UpdateCurrentUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddUser(ctx context.Context, in *AddUserRequest, opts ...http.CallOption) (*AddUserReply, error) {
	var out AddUserReply
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddUserApp(ctx context.Context, in *AddUserAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddUserApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CaptchaLogin(ctx context.Context, in *CaptchaLoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/login/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceCaptchaLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CaptchaLoginEmail(ctx context.Context, in *CaptchaLoginEmailRequest, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/login/captcha/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceCaptchaLoginEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CaptchaRegister(ctx context.Context, in *CaptchaRegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user-center/client/v1/register/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceCaptchaRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CaptchaRegisterEmail(ctx context.Context, in *CaptchaRegisterEmailRequest, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/register/captcha/email-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceCaptchaRegisterEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteUserApp(ctx context.Context, in *DeleteUserAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteUserApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceDisableUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/enable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceEnableUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/user-center/client/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*User, error) {
	var out User
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OAuthBindByCaptcha(ctx context.Context, in *OAuthBindByCaptchaRequest, opts ...http.CallOption) (*BindReply, error) {
	var out BindReply
	pattern := "/user-center/client/v1/bind/oauth/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOAuthBindByCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OAuthBindByPassword(ctx context.Context, in *OAuthBindByPasswordRequest, opts ...http.CallOption) (*BindReply, error) {
	var out BindReply
	pattern := "/user-center/client/v1/bind/oauth/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOAuthBindByPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OAuthBindEmailCaptcha(ctx context.Context, in *OAuthBindEmailCaptchaRequest, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/bind/oauth/email-captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOAuthBindEmailCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OAuthBindImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/bind/oauth/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceOAuthBindImageCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/login/oauth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOAuthLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) OfflineUser(ctx context.Context, in *OfflineUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user/offline"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceOfflineUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageUser(ctx context.Context, in *PageUserRequest, opts ...http.CallOption) (*PageUserReply, error) {
	var out PageUserReply
	pattern := "/user-center/admin/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ParseToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ParseTokenReply, error) {
	var out ParseTokenReply
	pattern := "/user-center/client/v1/token/parse"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceParseToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServicePasswordLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PasswordLoginCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/login/password/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePasswordLoginCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/user-center/client/v1/register/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServicePasswordRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PasswordRegisterCaptcha(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/user-center/client/v1/register/password/image-captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePasswordRegisterCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PasswordRegisterCheck(ctx context.Context, in *PasswordRegisterCheckRequest, opts ...http.CallOption) (*PasswordRegisterCheckReply, error) {
	var out PasswordRegisterCheckReply
	pattern := "/user-center/client/v1/register/password/check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePasswordRegisterCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/user-center/client/v1/token/refresh"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/client/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
