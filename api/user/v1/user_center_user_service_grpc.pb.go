// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user_center_user_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_GetSimpleUser_FullMethodName           = "/user.Service/GetSimpleUser"
	Service_GetBaseUser_FullMethodName             = "/user.Service/GetBaseUser"
	Service_GetUser_FullMethodName                 = "/user.Service/GetUser"
	Service_GetCurrentUser_FullMethodName          = "/user.Service/GetCurrentUser"
	Service_UpdateCurrentUser_FullMethodName       = "/user.Service/UpdateCurrentUser"
	Service_PageUser_FullMethodName                = "/user.Service/PageUser"
	Service_AddUser_FullMethodName                 = "/user.Service/AddUser"
	Service_UpdateUser_FullMethodName              = "/user.Service/UpdateUser"
	Service_DeleteUser_FullMethodName              = "/user.Service/DeleteUser"
	Service_DisableUser_FullMethodName             = "/user.Service/DisableUser"
	Service_EnableUser_FullMethodName              = "/user.Service/EnableUser"
	Service_OfflineUser_FullMethodName             = "/user.Service/OfflineUser"
	Service_AddUserApp_FullMethodName              = "/user.Service/AddUserApp"
	Service_DeleteUserApp_FullMethodName           = "/user.Service/DeleteUserApp"
	Service_OAuthLogin_FullMethodName              = "/user.Service/OAuthLogin"
	Service_OAuthBindByPassword_FullMethodName     = "/user.Service/OAuthBindByPassword"
	Service_OAuthBindByCaptcha_FullMethodName      = "/user.Service/OAuthBindByCaptcha"
	Service_OAuthBindImageCaptcha_FullMethodName   = "/user.Service/OAuthBindImageCaptcha"
	Service_OAuthBindEmailCaptcha_FullMethodName   = "/user.Service/OAuthBindEmailCaptcha"
	Service_PasswordLogin_FullMethodName           = "/user.Service/PasswordLogin"
	Service_PasswordLoginCaptcha_FullMethodName    = "/user.Service/PasswordLoginCaptcha"
	Service_PasswordRegister_FullMethodName        = "/user.Service/PasswordRegister"
	Service_PasswordRegisterCheck_FullMethodName   = "/user.Service/PasswordRegisterCheck"
	Service_PasswordRegisterCaptcha_FullMethodName = "/user.Service/PasswordRegisterCaptcha"
	Service_CaptchaLogin_FullMethodName            = "/user.Service/CaptchaLogin"
	Service_CaptchaLoginEmail_FullMethodName       = "/user.Service/CaptchaLoginEmail"
	Service_CaptchaRegisterEmail_FullMethodName    = "/user.Service/CaptchaRegisterEmail"
	Service_CaptchaRegister_FullMethodName         = "/user.Service/CaptchaRegister"
	Service_ParseToken_FullMethodName              = "/user.Service/ParseToken"
	Service_RefreshToken_FullMethodName            = "/user.Service/RefreshToken"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, opts ...grpc.CallOption) (*SimpleUser, error)
	GetBaseUser(ctx context.Context, in *GetBaseUserRequest, opts ...grpc.CallOption) (*BaseUser, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageUser(ctx context.Context, in *PageUserRequest, opts ...grpc.CallOption) (*PageUserReply, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 禁用用户
	DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 启用用户
	EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 下线用户
	OfflineUser(ctx context.Context, in *OfflineUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加用户应用
	AddUserApp(ctx context.Context, in *AddUserAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户应用
	DeleteUserApp(ctx context.Context, in *DeleteUserAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 三方授权登录
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 三方授权绑定-密码
	OAuthBindByPassword(ctx context.Context, in *OAuthBindByPasswordRequest, opts ...grpc.CallOption) (*BindReply, error)
	// 三方授权绑定-验证码
	OAuthBindByCaptcha(ctx context.Context, in *OAuthBindByCaptchaRequest, opts ...grpc.CallOption) (*BindReply, error)
	// 绑定的验证码
	OAuthBindImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error)
	OAuthBindEmailCaptcha(ctx context.Context, in *OAuthBindEmailCaptchaRequest, opts ...grpc.CallOption) (*CaptchaReply, error)
	// 密码登录
	PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 密码登录验证码
	PasswordLoginCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error)
	// 密码注册
	PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 密码注册检测
	PasswordRegisterCheck(ctx context.Context, in *PasswordRegisterCheckRequest, opts ...grpc.CallOption) (*PasswordRegisterCheckReply, error)
	// 注册验证啊
	PasswordRegisterCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error)
	// 验证码登录
	CaptchaLogin(ctx context.Context, in *CaptchaLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 验证码登录邮件验证码
	CaptchaLoginEmail(ctx context.Context, in *CaptchaLoginEmailRequest, opts ...grpc.CallOption) (*CaptchaReply, error)
	// 验证码注册邮件验证码
	CaptchaRegisterEmail(ctx context.Context, in *CaptchaRegisterEmailRequest, opts ...grpc.CallOption) (*CaptchaReply, error)
	// 验证码注册接口
	CaptchaRegister(ctx context.Context, in *CaptchaRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	// 解析token信息
	ParseToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ParseTokenReply, error)
	// 刷新token时长
	RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginReply, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetSimpleUser(ctx context.Context, in *GetSimpleUserRequest, opts ...grpc.CallOption) (*SimpleUser, error) {
	out := new(SimpleUser)
	err := c.cc.Invoke(ctx, Service_GetSimpleUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetBaseUser(ctx context.Context, in *GetBaseUserRequest, opts ...grpc.CallOption) (*BaseUser, error) {
	out := new(BaseUser)
	err := c.cc.Invoke(ctx, Service_GetBaseUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Service_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetCurrentUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Service_GetCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateCurrentUser(ctx context.Context, in *UpdateCurrentUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageUser(ctx context.Context, in *PageUserRequest, opts ...grpc.CallOption) (*PageUserReply, error) {
	out := new(PageUserReply)
	err := c.cc.Invoke(ctx, Service_PageUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserReply, error) {
	out := new(AddUserReply)
	err := c.cc.Invoke(ctx, Service_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DisableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_EnableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OfflineUser(ctx context.Context, in *OfflineUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_OfflineUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddUserApp(ctx context.Context, in *AddUserAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddUserApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUserApp(ctx context.Context, in *DeleteUserAppRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteUserApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Service_OAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OAuthBindByPassword(ctx context.Context, in *OAuthBindByPasswordRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, Service_OAuthBindByPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OAuthBindByCaptcha(ctx context.Context, in *OAuthBindByCaptchaRequest, opts ...grpc.CallOption) (*BindReply, error) {
	out := new(BindReply)
	err := c.cc.Invoke(ctx, Service_OAuthBindByCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OAuthBindImageCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_OAuthBindImageCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) OAuthBindEmailCaptcha(ctx context.Context, in *OAuthBindEmailCaptchaRequest, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_OAuthBindEmailCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Service_PasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PasswordLoginCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_PasswordLoginCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Service_PasswordRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PasswordRegisterCheck(ctx context.Context, in *PasswordRegisterCheckRequest, opts ...grpc.CallOption) (*PasswordRegisterCheckReply, error) {
	out := new(PasswordRegisterCheckReply)
	err := c.cc.Invoke(ctx, Service_PasswordRegisterCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PasswordRegisterCaptcha(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_PasswordRegisterCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CaptchaLogin(ctx context.Context, in *CaptchaLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Service_CaptchaLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CaptchaLoginEmail(ctx context.Context, in *CaptchaLoginEmailRequest, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_CaptchaLoginEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CaptchaRegisterEmail(ctx context.Context, in *CaptchaRegisterEmailRequest, opts ...grpc.CallOption) (*CaptchaReply, error) {
	out := new(CaptchaReply)
	err := c.cc.Invoke(ctx, Service_CaptchaRegisterEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CaptchaRegister(ctx context.Context, in *CaptchaRegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, Service_CaptchaRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ParseToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ParseTokenReply, error) {
	out := new(ParseTokenReply)
	err := c.cc.Invoke(ctx, Service_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Service_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	GetSimpleUser(context.Context, *GetSimpleUserRequest) (*SimpleUser, error)
	GetBaseUser(context.Context, *GetBaseUserRequest) (*BaseUser, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetCurrentUser(context.Context, *emptypb.Empty) (*User, error)
	UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*emptypb.Empty, error)
	PageUser(context.Context, *PageUserRequest) (*PageUserReply, error)
	AddUser(context.Context, *AddUserRequest) (*AddUserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	// 禁用用户
	DisableUser(context.Context, *DisableUserRequest) (*emptypb.Empty, error)
	// 启用用户
	EnableUser(context.Context, *EnableUserRequest) (*emptypb.Empty, error)
	// 下线用户
	OfflineUser(context.Context, *OfflineUserRequest) (*emptypb.Empty, error)
	// 添加用户应用
	AddUserApp(context.Context, *AddUserAppRequest) (*emptypb.Empty, error)
	// 删除用户应用
	DeleteUserApp(context.Context, *DeleteUserAppRequest) (*emptypb.Empty, error)
	// 三方授权登录
	OAuthLogin(context.Context, *OAuthLoginRequest) (*LoginReply, error)
	// 三方授权绑定-密码
	OAuthBindByPassword(context.Context, *OAuthBindByPasswordRequest) (*BindReply, error)
	// 三方授权绑定-验证码
	OAuthBindByCaptcha(context.Context, *OAuthBindByCaptchaRequest) (*BindReply, error)
	// 绑定的验证码
	OAuthBindImageCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	OAuthBindEmailCaptcha(context.Context, *OAuthBindEmailCaptchaRequest) (*CaptchaReply, error)
	// 密码登录
	PasswordLogin(context.Context, *PasswordLoginRequest) (*LoginReply, error)
	// 密码登录验证码
	PasswordLoginCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	// 密码注册
	PasswordRegister(context.Context, *PasswordRegisterRequest) (*RegisterReply, error)
	// 密码注册检测
	PasswordRegisterCheck(context.Context, *PasswordRegisterCheckRequest) (*PasswordRegisterCheckReply, error)
	// 注册验证啊
	PasswordRegisterCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error)
	// 验证码登录
	CaptchaLogin(context.Context, *CaptchaLoginRequest) (*LoginReply, error)
	// 验证码登录邮件验证码
	CaptchaLoginEmail(context.Context, *CaptchaLoginEmailRequest) (*CaptchaReply, error)
	// 验证码注册邮件验证码
	CaptchaRegisterEmail(context.Context, *CaptchaRegisterEmailRequest) (*CaptchaReply, error)
	// 验证码注册接口
	CaptchaRegister(context.Context, *CaptchaRegisterRequest) (*RegisterReply, error)
	// 解析token信息
	ParseToken(context.Context, *emptypb.Empty) (*ParseTokenReply, error)
	// 刷新token时长
	RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetSimpleUser(context.Context, *GetSimpleUserRequest) (*SimpleUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimpleUser not implemented")
}
func (UnimplementedServiceServer) GetBaseUser(context.Context, *GetBaseUserRequest) (*BaseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseUser not implemented")
}
func (UnimplementedServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServiceServer) GetCurrentUser(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedServiceServer) UpdateCurrentUser(context.Context, *UpdateCurrentUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrentUser not implemented")
}
func (UnimplementedServiceServer) PageUser(context.Context, *PageUserRequest) (*PageUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageUser not implemented")
}
func (UnimplementedServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedServiceServer) DisableUser(context.Context, *DisableUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedServiceServer) EnableUser(context.Context, *EnableUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedServiceServer) OfflineUser(context.Context, *OfflineUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineUser not implemented")
}
func (UnimplementedServiceServer) AddUserApp(context.Context, *AddUserAppRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserApp not implemented")
}
func (UnimplementedServiceServer) DeleteUserApp(context.Context, *DeleteUserAppRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserApp not implemented")
}
func (UnimplementedServiceServer) OAuthLogin(context.Context, *OAuthLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthLogin not implemented")
}
func (UnimplementedServiceServer) OAuthBindByPassword(context.Context, *OAuthBindByPasswordRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthBindByPassword not implemented")
}
func (UnimplementedServiceServer) OAuthBindByCaptcha(context.Context, *OAuthBindByCaptchaRequest) (*BindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthBindByCaptcha not implemented")
}
func (UnimplementedServiceServer) OAuthBindImageCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthBindImageCaptcha not implemented")
}
func (UnimplementedServiceServer) OAuthBindEmailCaptcha(context.Context, *OAuthBindEmailCaptchaRequest) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthBindEmailCaptcha not implemented")
}
func (UnimplementedServiceServer) PasswordLogin(context.Context, *PasswordLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordLogin not implemented")
}
func (UnimplementedServiceServer) PasswordLoginCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordLoginCaptcha not implemented")
}
func (UnimplementedServiceServer) PasswordRegister(context.Context, *PasswordRegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRegister not implemented")
}
func (UnimplementedServiceServer) PasswordRegisterCheck(context.Context, *PasswordRegisterCheckRequest) (*PasswordRegisterCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRegisterCheck not implemented")
}
func (UnimplementedServiceServer) PasswordRegisterCaptcha(context.Context, *emptypb.Empty) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRegisterCaptcha not implemented")
}
func (UnimplementedServiceServer) CaptchaLogin(context.Context, *CaptchaLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaLogin not implemented")
}
func (UnimplementedServiceServer) CaptchaLoginEmail(context.Context, *CaptchaLoginEmailRequest) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaLoginEmail not implemented")
}
func (UnimplementedServiceServer) CaptchaRegisterEmail(context.Context, *CaptchaRegisterEmailRequest) (*CaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaRegisterEmail not implemented")
}
func (UnimplementedServiceServer) CaptchaRegister(context.Context, *CaptchaRegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptchaRegister not implemented")
}
func (UnimplementedServiceServer) ParseToken(context.Context, *emptypb.Empty) (*ParseTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedServiceServer) RefreshToken(context.Context, *emptypb.Empty) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetSimpleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimpleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetSimpleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetSimpleUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetSimpleUser(ctx, req.(*GetSimpleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetBaseUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBaseUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetBaseUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBaseUser(ctx, req.(*GetBaseUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetCurrentUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateCurrentUser(ctx, req.(*UpdateCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageUser(ctx, req.(*PageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DisableUser(ctx, req.(*DisableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_EnableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EnableUser(ctx, req.(*EnableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OfflineUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OfflineUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OfflineUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OfflineUser(ctx, req.(*OfflineUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddUserApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddUserApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddUserApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddUserApp(ctx, req.(*AddUserAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUserApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUserApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteUserApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUserApp(ctx, req.(*DeleteUserAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OAuthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OAuthBindByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthBindByPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OAuthBindByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OAuthBindByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OAuthBindByPassword(ctx, req.(*OAuthBindByPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OAuthBindByCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthBindByCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OAuthBindByCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OAuthBindByCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OAuthBindByCaptcha(ctx, req.(*OAuthBindByCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OAuthBindImageCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OAuthBindImageCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OAuthBindImageCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OAuthBindImageCaptcha(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_OAuthBindEmailCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthBindEmailCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).OAuthBindEmailCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_OAuthBindEmailCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).OAuthBindEmailCaptcha(ctx, req.(*OAuthBindEmailCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PasswordLogin(ctx, req.(*PasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PasswordLoginCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PasswordLoginCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PasswordLoginCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PasswordLoginCaptcha(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PasswordRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PasswordRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PasswordRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PasswordRegister(ctx, req.(*PasswordRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PasswordRegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRegisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PasswordRegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PasswordRegisterCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PasswordRegisterCheck(ctx, req.(*PasswordRegisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PasswordRegisterCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PasswordRegisterCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PasswordRegisterCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PasswordRegisterCaptcha(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CaptchaLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CaptchaLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CaptchaLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CaptchaLogin(ctx, req.(*CaptchaLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CaptchaLoginEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaLoginEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CaptchaLoginEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CaptchaLoginEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CaptchaLoginEmail(ctx, req.(*CaptchaLoginEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CaptchaRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaRegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CaptchaRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CaptchaRegisterEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CaptchaRegisterEmail(ctx, req.(*CaptchaRegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CaptchaRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CaptchaRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CaptchaRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CaptchaRegister(ctx, req.(*CaptchaRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ParseToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RefreshToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSimpleUser",
			Handler:    _Service_GetSimpleUser_Handler,
		},
		{
			MethodName: "GetBaseUser",
			Handler:    _Service_GetBaseUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Service_GetUser_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _Service_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateCurrentUser",
			Handler:    _Service_UpdateCurrentUser_Handler,
		},
		{
			MethodName: "PageUser",
			Handler:    _Service_PageUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Service_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Service_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Service_DeleteUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _Service_DisableUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _Service_EnableUser_Handler,
		},
		{
			MethodName: "OfflineUser",
			Handler:    _Service_OfflineUser_Handler,
		},
		{
			MethodName: "AddUserApp",
			Handler:    _Service_AddUserApp_Handler,
		},
		{
			MethodName: "DeleteUserApp",
			Handler:    _Service_DeleteUserApp_Handler,
		},
		{
			MethodName: "OAuthLogin",
			Handler:    _Service_OAuthLogin_Handler,
		},
		{
			MethodName: "OAuthBindByPassword",
			Handler:    _Service_OAuthBindByPassword_Handler,
		},
		{
			MethodName: "OAuthBindByCaptcha",
			Handler:    _Service_OAuthBindByCaptcha_Handler,
		},
		{
			MethodName: "OAuthBindImageCaptcha",
			Handler:    _Service_OAuthBindImageCaptcha_Handler,
		},
		{
			MethodName: "OAuthBindEmailCaptcha",
			Handler:    _Service_OAuthBindEmailCaptcha_Handler,
		},
		{
			MethodName: "PasswordLogin",
			Handler:    _Service_PasswordLogin_Handler,
		},
		{
			MethodName: "PasswordLoginCaptcha",
			Handler:    _Service_PasswordLoginCaptcha_Handler,
		},
		{
			MethodName: "PasswordRegister",
			Handler:    _Service_PasswordRegister_Handler,
		},
		{
			MethodName: "PasswordRegisterCheck",
			Handler:    _Service_PasswordRegisterCheck_Handler,
		},
		{
			MethodName: "PasswordRegisterCaptcha",
			Handler:    _Service_PasswordRegisterCaptcha_Handler,
		},
		{
			MethodName: "CaptchaLogin",
			Handler:    _Service_CaptchaLogin_Handler,
		},
		{
			MethodName: "CaptchaLoginEmail",
			Handler:    _Service_CaptchaLoginEmail_Handler,
		},
		{
			MethodName: "CaptchaRegisterEmail",
			Handler:    _Service_CaptchaRegisterEmail_Handler,
		},
		{
			MethodName: "CaptchaRegister",
			Handler:    _Service_CaptchaRegister_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Service_ParseToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Service_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center_user_service.proto",
}
