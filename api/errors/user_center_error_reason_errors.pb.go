// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFound.String() && e.Code == 200
}

// 为某个枚举单独设置错误码
func NotFoundFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotFound.String(), "数据不存在:"+fmt.Sprintf(format, args...))
}

// 为某个枚举单独设置错误码
func NotFound() *errors.Error {
	return errors.New(200, ErrorReason_NotFound.String(), "数据不存在")
}

func IsDatabase(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Database.String() && e.Code == 200
}

func DatabaseFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func Database() *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误")
}

func IsMetadata(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Metadata.String() && e.Code == 200
}

func MetadataFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Metadata.String(), "元数据异常:"+fmt.Sprintf(format, args...))
}

func Metadata() *errors.Error {
	return errors.New(200, ErrorReason_Metadata.String(), "元数据异常")
}

func IsTransform(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Transform.String() && e.Code == 200
}

func TransformFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func Transform() *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败")
}

func IsGenCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptcha.String() && e.Code == 200
}

func GenCaptchaFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_GenCaptcha.String(), "验证码生成失败:"+fmt.Sprintf(format, args...))
}

func GenCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_GenCaptcha.String(), "验证码生成失败")
}

func IsVerifyCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifyCaptcha.String() && e.Code == 200
}

func VerifyCaptchaFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_VerifyCaptcha.String(), "验证码验证失败:"+fmt.Sprintf(format, args...))
}

func VerifyCaptcha() *errors.Error {
	return errors.New(200, ErrorReason_VerifyCaptcha.String(), "验证码验证失败")
}

func IsNotRecord(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotRecord.String() && e.Code == 200
}

func NotRecordFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotRecord.String(), "暂无数据记录:"+fmt.Sprintf(format, args...))
}

func NotRecord() *errors.Error {
	return errors.New(200, ErrorReason_NotRecord.String(), "暂无数据记录")
}

func IsRsaDecode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RsaDecode.String() && e.Code == 200
}

func RsaDecodeFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_RsaDecode.String(), "rsa解密失败:"+fmt.Sprintf(format, args...))
}

func RsaDecode() *errors.Error {
	return errors.New(200, ErrorReason_RsaDecode.String(), "rsa解密失败")
}

func IsPasswordFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordFormat.String() && e.Code == 200
}

func PasswordFormatFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_PasswordFormat.String(), "密码格式错误:"+fmt.Sprintf(format, args...))
}

func PasswordFormat() *errors.Error {
	return errors.New(200, ErrorReason_PasswordFormat.String(), "密码格式错误")
}

func IsPasswordExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpire.String() && e.Code == 200
}

func PasswordExpireFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_PasswordExpire.String(), "密码已过期:"+fmt.Sprintf(format, args...))
}

func PasswordExpire() *errors.Error {
	return errors.New(200, ErrorReason_PasswordExpire.String(), "密码已过期")
}

func IsUsernameOrPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UsernameOrPassword.String() && e.Code == 200
}

func UsernameOrPasswordFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UsernameOrPassword.String(), "账户或密码错误:"+fmt.Sprintf(format, args...))
}

func UsernameOrPassword() *errors.Error {
	return errors.New(200, ErrorReason_UsernameOrPassword.String(), "账户或密码错误")
}

func IsUserDisable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserDisable.String() && e.Code == 200
}

func UserDisableFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_UserDisable.String(), "用户已被禁用:"+fmt.Sprintf(format, args...))
}

func UserDisable() *errors.Error {
	return errors.New(200, ErrorReason_UserDisable.String(), "用户已被禁用")
}

func IsGenToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenToken.String() && e.Code == 200
}

func GenTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_GenToken.String(), "token生成失败:"+fmt.Sprintf(format, args...))
}

func GenToken() *errors.Error {
	return errors.New(200, ErrorReason_GenToken.String(), "token生成失败")
}

func IsParseToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseToken.String() && e.Code == 200
}

func ParseTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParseToken.String(), "token解析失败:"+fmt.Sprintf(format, args...))
}

func ParseToken() *errors.Error {
	return errors.New(200, ErrorReason_ParseToken.String(), "token解析失败")
}

func IsRefreshToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshToken.String() && e.Code == 401
}

func RefreshTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_RefreshToken.String(), "刷新token失败:"+fmt.Sprintf(format, args...))
}

func RefreshToken() *errors.Error {
	return errors.New(401, ErrorReason_RefreshToken.String(), "刷新token失败")
}

func IsEmptyToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EmptyToken.String() && e.Code == 200
}

func EmptyTokenFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_EmptyToken.String(), "token不能为空:"+fmt.Sprintf(format, args...))
}

func EmptyToken() *errors.Error {
	return errors.New(200, ErrorReason_EmptyToken.String(), "token不能为空")
}

func IsNotUserApp(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotUserApp.String() && e.Code == 200
}

func NotUserAppFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotUserApp.String(), "用户暂无应用使用权限:"+fmt.Sprintf(format, args...))
}

func NotUserApp() *errors.Error {
	return errors.New(200, ErrorReason_NotUserApp.String(), "用户暂无应用使用权限")
}

func IsNotUserChannel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotUserChannel.String() && e.Code == 200
}

func NotUserChannelFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotUserChannel.String(), "用户暂无渠道使用权限:"+fmt.Sprintf(format, args...))
}

func NotUserChannel() *errors.Error {
	return errors.New(200, ErrorReason_NotUserChannel.String(), "用户暂无渠道使用权限")
}

func IsNotApp(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotApp.String() && e.Code == 200
}

func NotAppFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotApp.String(), "错误的应用标识:"+fmt.Sprintf(format, args...))
}

func NotApp() *errors.Error {
	return errors.New(200, ErrorReason_NotApp.String(), "错误的应用标识")
}

func IsNotAppChannel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotAppChannel.String() && e.Code == 200
}

func NotAppChannelFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotAppChannel.String(), "应用为开通此渠道:"+fmt.Sprintf(format, args...))
}

func NotAppChannel() *errors.Error {
	return errors.New(200, ErrorReason_NotAppChannel.String(), "应用为开通此渠道")
}

func IsNotExistEmail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistEmail.String() && e.Code == 200
}

func NotExistEmailFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotExistEmail.String(), "不存在此邮箱:"+fmt.Sprintf(format, args...))
}

func NotExistEmail() *errors.Error {
	return errors.New(200, ErrorReason_NotExistEmail.String(), "不存在此邮箱")
}

func IsAlreadyExistEmail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistEmail.String() && e.Code == 200
}

func AlreadyExistEmailFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistEmail.String(), "邮箱已存在:"+fmt.Sprintf(format, args...))
}

func AlreadyExistEmail() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistEmail.String(), "邮箱已存在")
}

func IsAlreadyExistPhone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistPhone.String() && e.Code == 200
}

func AlreadyExistPhoneFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistPhone.String(), "手机已存在:"+fmt.Sprintf(format, args...))
}

func AlreadyExistPhone() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistPhone.String(), "手机已存在")
}

func IsAlreadyExistUsername(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistUsername.String() && e.Code == 200
}

func AlreadyExistUsernameFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistUsername.String(), "账号已存在:"+fmt.Sprintf(format, args...))
}

func AlreadyExistUsername() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistUsername.String(), "账号已存在")
}

func IsRegister(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Register.String() && e.Code == 200
}

func RegisterFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_Register.String(), "用户注册失败:"+fmt.Sprintf(format, args...))
}

func Register() *errors.Error {
	return errors.New(200, ErrorReason_Register.String(), "用户注册失败")
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Forbidden.String() && e.Code == 403
}

func ForbiddenFormat(format string, args ...any) *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), "无应用权限:"+fmt.Sprintf(format, args...))
}

func Forbidden() *errors.Error {
	return errors.New(403, ErrorReason_Forbidden.String(), "无应用权限")
}

func IsGetAuthInfo(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetAuthInfo.String() && e.Code == 200
}

func GetAuthInfoFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_GetAuthInfo.String(), "获取授权信息失败:"+fmt.Sprintf(format, args...))
}

func GetAuthInfo() *errors.Error {
	return errors.New(200, ErrorReason_GetAuthInfo.String(), "获取授权信息失败")
}

func IsUnBind(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UnBind.String() && e.Code == 401
}

func UnBindFormat(format string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_UnBind.String(), "用户未绑定:"+fmt.Sprintf(format, args...))
}

func UnBind() *errors.Error {
	return errors.New(401, ErrorReason_UnBind.String(), "用户未绑定")
}

func IsNotUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotUser.String() && e.Code == 200
}

func NotUserFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotUser.String(), "用户不存在:"+fmt.Sprintf(format, args...))
}

func NotUser() *errors.Error {
	return errors.New(200, ErrorReason_NotUser.String(), "用户不存在")
}
