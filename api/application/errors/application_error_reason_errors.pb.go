// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamsError.String() && e.Code == 500
}

func ParamsError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误")
	case 1:
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ParamsError.String(), "参数错误:"+msg)
	}
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 500
}

func DatabaseError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误")
	case 1:
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DatabaseError.String(), "数据库错误:"+msg)
	}
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 500
}

func TransformError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败")
	case 1:
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_TransformError.String(), "数据转换失败:"+msg)
	}
}

func IsGetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetError.String() && e.Code == 500
}

func GetError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败")
	case 1:
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GetError.String(), "获取数据失败:"+msg)
	}
}

func IsListError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListError.String() && e.Code == 500
}

func ListError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败")
	case 1:
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ListError.String(), "获取列表数据失败:"+msg)
	}
}

func IsCreateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CreateError.String() && e.Code == 500
}

func CreateError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败")
	case 1:
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_CreateError.String(), "创建数据失败:"+msg)
	}
}

func IsImportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ImportError.String() && e.Code == 500
}

func ImportError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败")
	case 1:
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ImportError.String(), "导入数据失败:"+msg)
	}
}

func IsExportError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExportError.String() && e.Code == 500
}

func ExportError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败")
	case 1:
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ExportError.String(), "导出数据失败:"+msg)
	}
}

func IsUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UpdateError.String() && e.Code == 500
}

func UpdateError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败")
	case 1:
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UpdateError.String(), "更新数据失败:"+msg)
	}
}

func IsDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteError.String() && e.Code == 500
}

func DeleteError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败")
	case 1:
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DeleteError.String(), "删除数据失败:"+msg)
	}
}

func IsGetTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GetTrashError.String() && e.Code == 500
}

func GetTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GetTrashError.String(), "获取回收站数据失败:"+msg)
	}
}

func IsListTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ListTrashError.String() && e.Code == 500
}

func ListTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败")
	case 1:
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ListTrashError.String(), "获取回收站列表数据失败:"+msg)
	}
}

func IsDeleteTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DeleteTrashError.String() && e.Code == 500
}

func DeleteTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_DeleteTrashError.String(), "删除回收站数据失败:"+msg)
	}
}

func IsRevertTrashError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RevertTrashError.String() && e.Code == 500
}

func RevertTrashError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败")
	case 1:
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RevertTrashError.String(), "还原回收站数据失败:"+msg)
	}
}

func IsResourceServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceServerError.String() && e.Code == 500
}

func ResourceServerError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常")
	case 1:
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ResourceServerError.String(), "资源服务异常:"+msg)
	}
}

func IsForbiddenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ForbiddenError.String() && e.Code == 403
}

func ForbiddenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无应用权限")
	case 1:
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无应用权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(403, ErrorReason_ForbiddenError.String(), "无应用权限:"+msg)
	}
}

func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SystemError.String() && e.Code == 500
}

func SystemError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误")
	case 1:
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_SystemError.String(), "系统错误:"+msg)
	}
}

func IsGenCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptchaError.String() && e.Code == 500
}

func GenCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "验证码生成失败")
	case 1:
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "验证码生成失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GenCaptchaError.String(), "验证码生成失败:"+msg)
	}
}

func IsNotExistEmailError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotExistEmailError.String() && e.Code == 500
}

func NotExistEmailError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_NotExistEmailError.String(), "不存在此邮箱")
	case 1:
		return errors.New(500, ErrorReason_NotExistEmailError.String(), "不存在此邮箱:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_NotExistEmailError.String(), "不存在此邮箱:"+msg)
	}
}

func IsGenCaptchaTypeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenCaptchaTypeError.String() && e.Code == 500
}

func GenCaptchaTypeError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GenCaptchaTypeError.String(), "错误的验证码类型")
	case 1:
		return errors.New(500, ErrorReason_GenCaptchaTypeError.String(), "错误的验证码类型:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GenCaptchaTypeError.String(), "错误的验证码类型:"+msg)
	}
}

func IsVerifyCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VerifyCaptchaError.String() && e.Code == 500
}

func VerifyCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码验证失败")
	case 1:
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码验证失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_VerifyCaptchaError.String(), "验证码验证失败:"+msg)
	}
}

func IsOAuthLoginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OAuthLoginError.String() && e.Code == 500
}

func OAuthLoginError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_OAuthLoginError.String(), "三方授权登陆失败")
	case 1:
		return errors.New(500, ErrorReason_OAuthLoginError.String(), "三方授权登陆失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_OAuthLoginError.String(), "三方授权登陆失败:"+msg)
	}
}

func IsNotUserError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotUserError.String() && e.Code == 500
}

func NotUserError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_NotUserError.String(), "用户不存在")
	case 1:
		return errors.New(500, ErrorReason_NotUserError.String(), "用户不存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_NotUserError.String(), "用户不存在:"+msg)
	}
}

func IsNotAppScopeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotAppScopeError.String() && e.Code == 500
}

func NotAppScopeError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_NotAppScopeError.String(), "用户无应用权限")
	case 1:
		return errors.New(500, ErrorReason_NotAppScopeError.String(), "用户无应用权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_NotAppScopeError.String(), "用户无应用权限:"+msg)
	}
}

func IsRsaDecodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RsaDecodeError.String() && e.Code == 500
}

func RsaDecodeError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RsaDecodeError.String(), "rsa解密失败")
	case 1:
		return errors.New(500, ErrorReason_RsaDecodeError.String(), "rsa解密失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RsaDecodeError.String(), "rsa解密失败:"+msg)
	}
}

func IsPasswordFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordFormatError.String() && e.Code == 500
}

func PasswordFormatError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_PasswordFormatError.String(), "密码格式错误")
	case 1:
		return errors.New(500, ErrorReason_PasswordFormatError.String(), "密码格式错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_PasswordFormatError.String(), "密码格式错误:"+msg)
	}
}

func IsPasswordExpireError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpireError.String() && e.Code == 500
}

func PasswordExpireError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期")
	case 1:
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_PasswordExpireError.String(), "密码已过期:"+msg)
	}
}

func IsPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordError.String() && e.Code == 500
}

func PasswordError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_PasswordError.String(), "账户或密码错误")
	case 1:
		return errors.New(500, ErrorReason_PasswordError.String(), "账户或密码错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_PasswordError.String(), "账户或密码错误:"+msg)
	}
}

func IsUserDisableError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserDisableError.String() && e.Code == 500
}

func UserDisableError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用")
	case 1:
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_UserDisableError.String(), "用户已被禁用:"+msg)
	}
}

func IsGenTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GenTokenError.String() && e.Code == 500
}

func GenTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败")
	case 1:
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_GenTokenError.String(), "token生成失败:"+msg)
	}
}

func IsParseTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseTokenError.String() && e.Code == 500
}

func ParseTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败")
	case 1:
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ParseTokenError.String(), "token解析失败:"+msg)
	}
}

func IsRefreshTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshTokenError.String() && e.Code == 401
}

func RefreshTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败")
	case 1:
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败:"+msg)
	}
}

func IsDisableRegisterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DisableRegisterError.String() && e.Code == 401
}

func DisableRegisterError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, ErrorReason_DisableRegisterError.String(), "应用已关闭注册权限")
	case 1:
		return errors.New(401, ErrorReason_DisableRegisterError.String(), "应用已关闭注册权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, ErrorReason_DisableRegisterError.String(), "应用已关闭注册权限:"+msg)
	}
}

func IsAlreadyExistEmailError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistEmailError.String() && e.Code == 500
}

func AlreadyExistEmailError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_AlreadyExistEmailError.String(), "邮箱已存在")
	case 1:
		return errors.New(500, ErrorReason_AlreadyExistEmailError.String(), "邮箱已存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_AlreadyExistEmailError.String(), "邮箱已存在:"+msg)
	}
}

func IsAlreadyExistUsernameError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistUsernameError.String() && e.Code == 500
}

func AlreadyExistUsernameError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_AlreadyExistUsernameError.String(), "账号已存在")
	case 1:
		return errors.New(500, ErrorReason_AlreadyExistUsernameError.String(), "账号已存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_AlreadyExistUsernameError.String(), "账号已存在:"+msg)
	}
}

func IsRegisterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RegisterError.String() && e.Code == 500
}

func RegisterError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_RegisterError.String(), "用户注册失败")
	case 1:
		return errors.New(500, ErrorReason_RegisterError.String(), "用户注册失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_RegisterError.String(), "用户注册失败:"+msg)
	}
}

func IsBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BindError.String() && e.Code == 500
}

func BindError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_BindError.String(), "用户注册失败")
	case 1:
		return errors.New(500, ErrorReason_BindError.String(), "用户注册失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_BindError.String(), "用户注册失败:"+msg)
	}
}

func IsLoginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LoginError.String() && e.Code == 500
}

func LoginError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_LoginError.String(), "登陆失败")
	case 1:
		return errors.New(500, ErrorReason_LoginError.String(), "登陆失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_LoginError.String(), "登陆失败:"+msg)
	}
}

func IsExistFeedbackError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ExistFeedbackError.String() && e.Code == 500
}

func ExistFeedbackError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ExistFeedbackError.String(), "已存在重复的反馈内容")
	case 1:
		return errors.New(500, ErrorReason_ExistFeedbackError.String(), "已存在重复的反馈内容:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ExistFeedbackError.String(), "已存在重复的反馈内容:"+msg)
	}
}

func IsManagerServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ManagerServerError.String() && e.Code == 500
}

func ManagerServerError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ManagerServerError.String(), "管理中心服务异常")
	case 1:
		return errors.New(500, ErrorReason_ManagerServerError.String(), "管理中心服务异常:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ManagerServerError.String(), "管理中心服务异常:"+msg)
	}
}

func IsNotPermissionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotPermissionError.String() && e.Code == 500
}

func NotPermissionError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_NotPermissionError.String(), "无资源权限")
	case 1:
		return errors.New(500, ErrorReason_NotPermissionError.String(), "无资源权限:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_NotPermissionError.String(), "无资源权限:"+msg)
	}
}

func IsAlreadyBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyBindError.String() && e.Code == 500
}

func AlreadyBindError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_AlreadyBindError.String(), "该账号已绑定过其他平台，不能重复绑定")
	case 1:
		return errors.New(500, ErrorReason_AlreadyBindError.String(), "该账号已绑定过其他平台，不能重复绑定:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_AlreadyBindError.String(), "该账号已绑定过其他平台，不能重复绑定:"+msg)
	}
}

func IsAppMaintenanceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AppMaintenanceError.String() && e.Code == 500
}

func AppMaintenanceError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_AppMaintenanceError.String(), "当前应用正在维护中")
	case 1:
		return errors.New(500, ErrorReason_AppMaintenanceError.String(), "当前应用正在维护中:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_AppMaintenanceError.String(), "当前应用正在维护中:"+msg)
	}
}

func IsChannelCloseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChannelCloseError.String() && e.Code == 500
}

func ChannelCloseError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ChannelCloseError.String(), "当前渠道已关闭")
	case 1:
		return errors.New(500, ErrorReason_ChannelCloseError.String(), "当前渠道已关闭:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ChannelCloseError.String(), "当前渠道已关闭:"+msg)
	}
}

func IsAppNotBindChannelError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AppNotBindChannelError.String() && e.Code == 500
}

func AppNotBindChannelError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_AppNotBindChannelError.String(), "应用未开通此渠道")
	case 1:
		return errors.New(500, ErrorReason_AppNotBindChannelError.String(), "应用未开通此渠道:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_AppNotBindChannelError.String(), "应用未开通此渠道:"+msg)
	}
}

func IsChannelNotBindUserError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ChannelNotBindUserError.String() && e.Code == 500
}

func ChannelNotBindUserError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(500, ErrorReason_ChannelNotBindUserError.String(), "当前授权渠道未绑定用户")
	case 1:
		return errors.New(500, ErrorReason_ChannelNotBindUserError.String(), "当前授权渠道未绑定用户:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(500, ErrorReason_ChannelNotBindUserError.String(), "当前授权渠道未绑定用户:"+msg)
	}
}
