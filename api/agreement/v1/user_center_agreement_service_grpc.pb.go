// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: user_center_agreement_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_PageContent_FullMethodName       = "/agreementpb.Service/PageContent"
	Service_GetContent_FullMethodName        = "/agreementpb.Service/GetContent"
	Service_AddContent_FullMethodName        = "/agreementpb.Service/AddContent"
	Service_UpdateContent_FullMethodName     = "/agreementpb.Service/UpdateContent"
	Service_DeleteContent_FullMethodName     = "/agreementpb.Service/DeleteContent"
	Service_PageScene_FullMethodName         = "/agreementpb.Service/PageScene"
	Service_GetSceneByKeyword_FullMethodName = "/agreementpb.Service/GetSceneByKeyword"
	Service_AddScene_FullMethodName          = "/agreementpb.Service/AddScene"
	Service_UpdateScene_FullMethodName       = "/agreementpb.Service/UpdateScene"
	Service_DeleteScene_FullMethodName       = "/agreementpb.Service/DeleteScene"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// 获取分页协议
	PageContent(ctx context.Context, in *PageContentRequest, opts ...grpc.CallOption) (*PageContentReply, error)
	// 获取协议的详细内容
	GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*Content, error)
	// 新增协议内容
	AddContent(ctx context.Context, in *AddContentRequest, opts ...grpc.CallOption) (*AddContentReply, error)
	// 更新协议内容
	UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除指定的协议内容
	DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取分页协议场景
	PageScene(ctx context.Context, in *PageSceneRequest, opts ...grpc.CallOption) (*PageSceneReply, error)
	// 获取指定的协议场景以及协议场景包含的协议列表
	GetSceneByKeyword(ctx context.Context, in *GetSceneByKeywordRequest, opts ...grpc.CallOption) (*Scene, error)
	// 新增协议场景
	AddScene(ctx context.Context, in *AddSceneRequest, opts ...grpc.CallOption) (*AddSceneReply, error)
	// 更新协议场景
	UpdateScene(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除协议场景
	DeleteScene(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) PageContent(ctx context.Context, in *PageContentRequest, opts ...grpc.CallOption) (*PageContentReply, error) {
	out := new(PageContentReply)
	err := c.cc.Invoke(ctx, Service_PageContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetContent(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, Service_GetContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddContent(ctx context.Context, in *AddContentRequest, opts ...grpc.CallOption) (*AddContentReply, error) {
	out := new(AddContentReply)
	err := c.cc.Invoke(ctx, Service_AddContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateContent(ctx context.Context, in *UpdateContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteContent(ctx context.Context, in *DeleteContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageScene(ctx context.Context, in *PageSceneRequest, opts ...grpc.CallOption) (*PageSceneReply, error) {
	out := new(PageSceneReply)
	err := c.cc.Invoke(ctx, Service_PageScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetSceneByKeyword(ctx context.Context, in *GetSceneByKeywordRequest, opts ...grpc.CallOption) (*Scene, error) {
	out := new(Scene)
	err := c.cc.Invoke(ctx, Service_GetSceneByKeyword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddScene(ctx context.Context, in *AddSceneRequest, opts ...grpc.CallOption) (*AddSceneReply, error) {
	out := new(AddSceneReply)
	err := c.cc.Invoke(ctx, Service_AddScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateScene(ctx context.Context, in *UpdateSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteScene(ctx context.Context, in *DeleteSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteScene_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// 获取分页协议
	PageContent(context.Context, *PageContentRequest) (*PageContentReply, error)
	// 获取协议的详细内容
	GetContent(context.Context, *GetContentRequest) (*Content, error)
	// 新增协议内容
	AddContent(context.Context, *AddContentRequest) (*AddContentReply, error)
	// 更新协议内容
	UpdateContent(context.Context, *UpdateContentRequest) (*emptypb.Empty, error)
	// 删除指定的协议内容
	DeleteContent(context.Context, *DeleteContentRequest) (*emptypb.Empty, error)
	// 获取分页协议场景
	PageScene(context.Context, *PageSceneRequest) (*PageSceneReply, error)
	// 获取指定的协议场景以及协议场景包含的协议列表
	GetSceneByKeyword(context.Context, *GetSceneByKeywordRequest) (*Scene, error)
	// 新增协议场景
	AddScene(context.Context, *AddSceneRequest) (*AddSceneReply, error)
	// 更新协议场景
	UpdateScene(context.Context, *UpdateSceneRequest) (*emptypb.Empty, error)
	// 删除协议场景
	DeleteScene(context.Context, *DeleteSceneRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) PageContent(context.Context, *PageContentRequest) (*PageContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageContent not implemented")
}
func (UnimplementedServiceServer) GetContent(context.Context, *GetContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContent not implemented")
}
func (UnimplementedServiceServer) AddContent(context.Context, *AddContentRequest) (*AddContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContent not implemented")
}
func (UnimplementedServiceServer) UpdateContent(context.Context, *UpdateContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (UnimplementedServiceServer) DeleteContent(context.Context, *DeleteContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContent not implemented")
}
func (UnimplementedServiceServer) PageScene(context.Context, *PageSceneRequest) (*PageSceneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageScene not implemented")
}
func (UnimplementedServiceServer) GetSceneByKeyword(context.Context, *GetSceneByKeywordRequest) (*Scene, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneByKeyword not implemented")
}
func (UnimplementedServiceServer) AddScene(context.Context, *AddSceneRequest) (*AddSceneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScene not implemented")
}
func (UnimplementedServiceServer) UpdateScene(context.Context, *UpdateSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScene not implemented")
}
func (UnimplementedServiceServer) DeleteScene(context.Context, *DeleteSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScene not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_PageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageContent(ctx, req.(*PageContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetContent(ctx, req.(*GetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddContent(ctx, req.(*AddContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateContent(ctx, req.(*UpdateContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteContent(ctx, req.(*DeleteContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageScene(ctx, req.(*PageSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetSceneByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneByKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetSceneByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetSceneByKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetSceneByKeyword(ctx, req.(*GetSceneByKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddScene(ctx, req.(*AddSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateScene(ctx, req.(*UpdateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteScene(ctx, req.(*DeleteSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agreementpb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageContent",
			Handler:    _Service_PageContent_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _Service_GetContent_Handler,
		},
		{
			MethodName: "AddContent",
			Handler:    _Service_AddContent_Handler,
		},
		{
			MethodName: "UpdateContent",
			Handler:    _Service_UpdateContent_Handler,
		},
		{
			MethodName: "DeleteContent",
			Handler:    _Service_DeleteContent_Handler,
		},
		{
			MethodName: "PageScene",
			Handler:    _Service_PageScene_Handler,
		},
		{
			MethodName: "GetSceneByKeyword",
			Handler:    _Service_GetSceneByKeyword_Handler,
		},
		{
			MethodName: "AddScene",
			Handler:    _Service_AddScene_Handler,
		},
		{
			MethodName: "UpdateScene",
			Handler:    _Service_UpdateScene_Handler,
		},
		{
			MethodName: "DeleteScene",
			Handler:    _Service_DeleteScene_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center_agreement_service.proto",
}
