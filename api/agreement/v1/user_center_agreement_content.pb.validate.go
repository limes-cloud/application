// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_agreement_content.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Content

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on PageContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageContentRequestMultiError, or nil if none found.
func (m *PageContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageContentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageContentRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return PageContentRequestMultiError(errors)
	}

	return nil
}

// PageContentRequestMultiError is an error wrapping multiple validation errors
// returned by PageContentRequest.ValidateAll() if the designated constraints
// aren't met.
type PageContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageContentRequestMultiError) AllErrors() []error { return m }

// PageContentRequestValidationError is the validation error returned by
// PageContentRequest.Validate if the designated constraints aren't met.
type PageContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageContentRequestValidationError) ErrorName() string {
	return "PageContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageContentRequestValidationError{}

// Validate checks the field values on GetContentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContentRequestMultiError, or nil if none found.
func (m *GetContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetContentRequestMultiError(errors)
	}

	return nil
}

// GetContentRequestMultiError is an error wrapping multiple validation errors
// returned by GetContentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContentRequestMultiError) AllErrors() []error { return m }

// GetContentRequestValidationError is the validation error returned by
// GetContentRequest.Validate if the designated constraints aren't met.
type GetContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContentRequestValidationError) ErrorName() string {
	return "GetContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContentRequestValidationError{}

// Validate checks the field values on PageContentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageContentReplyMultiError, or nil if none found.
func (m *PageContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageContentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageContentReplyMultiError(errors)
	}

	return nil
}

// PageContentReplyMultiError is an error wrapping multiple validation errors
// returned by PageContentReply.ValidateAll() if the designated constraints
// aren't met.
type PageContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageContentReplyMultiError) AllErrors() []error { return m }

// PageContentReplyValidationError is the validation error returned by
// PageContentReply.Validate if the designated constraints aren't met.
type PageContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageContentReplyValidationError) ErrorName() string { return "PageContentReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageContentReplyValidationError{}

// Validate checks the field values on AddContentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContentRequestMultiError, or nil if none found.
func (m *AddContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddContentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddContentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := AddContentRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddContentRequestMultiError(errors)
	}

	return nil
}

// AddContentRequestMultiError is an error wrapping multiple validation errors
// returned by AddContentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContentRequestMultiError) AllErrors() []error { return m }

// AddContentRequestValidationError is the validation error returned by
// AddContentRequest.Validate if the designated constraints aren't met.
type AddContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContentRequestValidationError) ErrorName() string {
	return "AddContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContentRequestValidationError{}

// Validate checks the field values on AddContentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContentReplyMultiError, or nil if none found.
func (m *AddContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddContentReplyMultiError(errors)
	}

	return nil
}

// AddContentReplyMultiError is an error wrapping multiple validation errors
// returned by AddContentReply.ValidateAll() if the designated constraints
// aren't met.
type AddContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContentReplyMultiError) AllErrors() []error { return m }

// AddContentReplyValidationError is the validation error returned by
// AddContentReply.Validate if the designated constraints aren't met.
type AddContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContentReplyValidationError) ErrorName() string { return "AddContentReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContentReplyValidationError{}

// Validate checks the field values on UpdateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateContentRequestMultiError, or nil if none found.
func (m *UpdateContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateContentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateContentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := UpdateContentRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateContentRequestMultiError(errors)
	}

	return nil
}

// UpdateContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateContentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateContentRequestMultiError) AllErrors() []error { return m }

// UpdateContentRequestValidationError is the validation error returned by
// UpdateContentRequest.Validate if the designated constraints aren't met.
type UpdateContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContentRequestValidationError) ErrorName() string {
	return "UpdateContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContentRequestValidationError{}

// Validate checks the field values on DeleteContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteContentRequestMultiError, or nil if none found.
func (m *DeleteContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteContentRequestMultiError(errors)
	}

	return nil
}

// DeleteContentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteContentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteContentRequestMultiError) AllErrors() []error { return m }

// DeleteContentRequestValidationError is the validation error returned by
// DeleteContentRequest.Validate if the designated constraints aren't met.
type DeleteContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContentRequestValidationError) ErrorName() string {
	return "DeleteContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContentRequestValidationError{}
