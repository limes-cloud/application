syntax = "proto3";

package user_center;
option go_package = "./v1;v1";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

import "user_center_agreement.proto";
import "user_center_scene.proto";
import "user_center_user.proto";
import "user_center_app.proto";
import "user_center_app_interface.proto";
import "user_center_user_app.proto";
import "user_center_channel.proto";
import "user_center_extra_field.proto";
import "user_center_auth.proto";

service Service {
  rpc RefreshToken (google.protobuf.Empty)  returns (LoginReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/refresh-token",
    };
  }

  rpc LoginImageCaptcha (google.protobuf.Empty)  returns (ImageCaptchaReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/login/image-captcha",
    };
  }

  rpc BindImageCaptcha (google.protobuf.Empty)  returns (ImageCaptchaReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/bind/image-captcha",
    };
  }

  rpc RegisterImageCaptcha (google.protobuf.Empty)  returns (ImageCaptchaReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/register/image-captcha",
    };
  }

  rpc LoginByPassword (LoginByPasswordRequest)  returns (LoginReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/login/password",
      body: "*"
    };
  }

  rpc BindByPassword (LoginByPasswordRequest)  returns (LoginReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/bind/password",
    };
  }

  rpc RegisterUsernameCheck (RegisterUsernameCheckRequest)  returns (RegisterUsernameCheckReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/register/username/check",
    };
  }


  rpc RegisterByPassword (RegisterByPasswordRequest)  returns (RegisterReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/register/password",
      body: "*"
    };
  }

  rpc LoginEmailCaptcha (LoginEmailCaptchaRequest)  returns (EmailCaptchaReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/login/email-captcha",
      body: "*"
    };
  }

  rpc LoginByEmail (LoginByEmailRequest)  returns (LoginReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/login/email",
      body: "*"
    };
  }

  rpc BindEmailCaptcha (BindEmailCaptchaRequest)  returns (EmailCaptchaReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/bind/email-captcha",
      body: "*"
    };
  }

  rpc BindByEmail (BindByEmailRequest)  returns (LoginReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/bind/email",
      body: "*"
    };
  }

  rpc RegisterEmailCaptcha (RegisterEmailCaptchaRequest)  returns (EmailCaptchaReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/register/email-captcha",
      body: "*"
    };
  }

  rpc RegisterByEmail (RegisterByEmailRequest)  returns (RegisterReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/register/email",
      body: "*"
    };
  }

  rpc Auth (AuthRequest)  returns (AuthReply) {
    option (google.api.http) = {
      post: "/user-center/client/v1/auth",
      body: "*"
    };
  }

  rpc PageAgreement (PageAgreementRequest)  returns (PageAgreementReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/agreements",
    };
  }

  rpc GetAgreement (GetAgreementRequest)  returns (Agreement) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/agreement",
      additional_bindings:{
        get: "/user-center/client/v1/agreement",
      }
    };
  }

  rpc AddAgreement (AddAgreementRequest)  returns (AddAgreementReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/agreement",
      body:"*"
    };
  }

  rpc UpdateAgreement (UpdateAgreementRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/agreement",
      body:"*"
    };
  }

  rpc DeleteAgreement (DeleteAgreementRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/agreement",
    };
  }

  rpc PageScene (PageSceneRequest)  returns (PageSceneReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/scenes",
    };
  }

  rpc GetSceneByKeyword (GetSceneByKeywordRequest)  returns (Scene) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/scene",
      additional_bindings:{
        get: "/user-center/client/v1/scene",
      }
    };
  }

  rpc AddScene (AddSceneRequest)  returns (AddSceneReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/scene",
      body:"*"
    };
  }

  rpc UpdateScene (UpdateSceneRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/scene",
      body:"*"
    };
  }

  rpc DeleteScene (DeleteSceneRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/scene",
    };
  }

  rpc AllChannel (google.protobuf.Empty)  returns (AllChannelReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/channels",
    };
  }

  rpc AddChannel (AddChannelRequest)  returns (AddChannelReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/channel",
      body:"*"
    };
  }

  rpc UpdateChannel (UpdateChannelRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/channel",
      body:"*"
    };
  }

  rpc DeleteChannel (DeleteChannelRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/channel",
    };
  }

  rpc PageApp (PageAppRequest)  returns (PageAppReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/apps",
    };
  }

  rpc GetAppByKeyword (GetAppByKeywordRequest)  returns (App) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/app",
      additional_bindings:{
        get: "/user-center/client/v1/app",
      }
    };
  }

  rpc AddApp (AddAppRequest)  returns (AddAppReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/app",
      body:"*"
    };
  }

  rpc UpdateApp (UpdateAppRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/app",
      body:"*"
    };
  }

  rpc DeleteApp (DeleteAppRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/app",
    };
  }

  rpc GetAppInterfaceTree (GetAppInterfaceTreeRequest)  returns (GetAppInterfaceTreeReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/interfaces",
    };
  }

  rpc AddAppInterface (AddAppInterfaceRequest)  returns (AddAppInterfaceReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/interface",
      body:"*"
    };
  }

  rpc UpdateAppInterface (UpdateAppInterfaceRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/interface",
      body:"*"
    };
  }

  rpc DeleteAppInterface (DeleteAppInterfaceRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/interface",
    };
  }

  rpc AllExtraFieldType (google.protobuf.Empty)  returns (AllExtraFieldTypeReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/extra-field/types",
    };
  }

  rpc PageExtraField (PageExtraFieldRequest)  returns (PageExtraFieldReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/extra-fields",
    };
  }

  rpc CurrentExtraField (google.protobuf.Empty)  returns (CurrentExtraFieldReply) {
    option (google.api.http) = {
      get: "/user-center/client/v1/extra-fields",
    };
  }

  rpc AddExtraField (AddExtraFieldRequest)  returns (AddExtraFieldReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/extra-field",
      body:"*"
    };
  }

  rpc UpdateExtraField (UpdateExtraFieldRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/extra-field",
      body:"*"
    };
  }

  rpc DeleteExtraField (DeleteExtraFieldRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/extra-field",
    };
  }

  rpc AllLoginPlatform (google.protobuf.Empty)  returns (AllLoginPlatformReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/login/platforms",
    };
  }

  rpc GetSimpleUser (GetSimpleUserRequest)  returns (SimpleUser){}

  rpc GetBaseUser (GetBaseUserRequest)  returns (BaseUser){}

  rpc GetUser (GetUserRequest)  returns (User) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/user",
    };
  }

  rpc GetCurrentUser (google.protobuf.Empty)  returns (User) {
    option (google.api.http) = {
      get: "/user-center/client/v1/user",
    };
  }

  rpc UpdateCurrentUser (UpdateCurrentUserRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/client/v1/user",
      body: "*"
    };
  }

  rpc PageUser (PageUserRequest)  returns (PageUserReply) {
    option (google.api.http) = {
      get: "/user-center/admin/v1/users",
    };
  }

  rpc AddUser (AddUserRequest)  returns (AddUserReply) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/user",
      body:"*"
    };
  }

//  rpc ImportUser (ImportUserRequest)  returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/user-center/admin/v1/users",
//      body:"*"
//    };
//  }

  rpc UpdateUser (UpdateUserRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user-center/admin/v1/user",
      body:"*"
    };
  }

  rpc DeleteUser (DeleteUserRequest)  returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/user",
    };
  }

  // DisableUser 禁用用户
  rpc DisableUser (DisableUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/user/disable",
      body: "*",
    };
  }

  // DisableUser 禁用用户
  rpc EnableUser (EnableUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/user/enable",
      body: "*",
    };
  }

  // DisableUser 禁用用户
  rpc OfflineUser (OfflineUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/user/offline",
      body: "*",
    };
  }

  rpc AddUserApp (AddUserAppRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user-center/admin/v1/user/app",
      body: "*",
    };
  }

  rpc DeleteUserApp (DeleteUserAppRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user-center/admin/v1/user/app",
    };
  }
}


