// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: user_center_app_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddApp = "/app.Service/AddApp"
const OperationServiceDeleteApp = "/app.Service/DeleteApp"
const OperationServiceGetAppByKeyword = "/app.Service/GetAppByKeyword"
const OperationServicePageApp = "/app.Service/PageApp"
const OperationServiceUpdateApp = "/app.Service/UpdateApp"

type ServiceHTTPServer interface {
	// AddApp 添加应用
	AddApp(context.Context, *AddAppRequest) (*AddAppReply, error)
	// DeleteApp 删除应用
	DeleteApp(context.Context, *DeleteAppRequest) (*emptypb.Empty, error)
	// GetAppByKeyword 获取指定的应用
	GetAppByKeyword(context.Context, *GetAppByKeywordRequest) (*App, error)
	// PageApp 获取分页应用
	PageApp(context.Context, *PageAppRequest) (*PageAppReply, error)
	// UpdateApp 更新应用
	UpdateApp(context.Context, *UpdateAppRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user-center/admin/v1/apps", _Service_PageApp0_HTTP_Handler(srv))
	r.GET("/user-center/client/v1/app", _Service_GetAppByKeyword0_HTTP_Handler(srv))
	r.GET("/user-center/admin/v1/app", _Service_GetAppByKeyword1_HTTP_Handler(srv))
	r.POST("/user-center/admin/v1/app", _Service_AddApp0_HTTP_Handler(srv))
	r.PUT("/user-center/admin/v1/app", _Service_UpdateApp0_HTTP_Handler(srv))
	r.DELETE("/user-center/admin/v1/app", _Service_DeleteApp0_HTTP_Handler(srv))
}

func _Service_PageApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageApp(ctx, req.(*PageAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageAppReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAppByKeyword0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAppByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAppByKeyword(ctx, req.(*GetAppByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

func _Service_GetAppByKeyword1_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppByKeywordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetAppByKeyword)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetAppByKeyword(ctx, req.(*GetAppByKeywordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

func _Service_AddApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddApp(ctx, req.(*AddAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAppReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAppRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateApp(ctx, req.(*UpdateAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteApp0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteApp)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteApp(ctx, req.(*DeleteAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddApp(ctx context.Context, req *AddAppRequest, opts ...http.CallOption) (rsp *AddAppReply, err error)
	DeleteApp(ctx context.Context, req *DeleteAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAppByKeyword(ctx context.Context, req *GetAppByKeywordRequest, opts ...http.CallOption) (rsp *App, err error)
	PageApp(ctx context.Context, req *PageAppRequest, opts ...http.CallOption) (rsp *PageAppReply, err error)
	UpdateApp(ctx context.Context, req *UpdateAppRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddApp(ctx context.Context, in *AddAppRequest, opts ...http.CallOption) (*AddAppReply, error) {
	var out AddAppReply
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetAppByKeyword(ctx context.Context, in *GetAppByKeywordRequest, opts ...http.CallOption) (*App, error) {
	var out App
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetAppByKeyword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageApp(ctx context.Context, in *PageAppRequest, opts ...http.CallOption) (*PageAppReply, error) {
	var out PageAppReply
	pattern := "/user-center/admin/v1/apps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/admin/v1/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
