// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/usercenter/user/usercenter_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserReplyMultiError, or nil if none found.
func (m *GetCurrentUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if len(errors) > 0 {
		return GetCurrentUserReplyMultiError(errors)
	}

	return nil
}

// GetCurrentUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserReplyMultiError) AllErrors() []error { return m }

// GetCurrentUserReplyValidationError is the validation error returned by
// GetCurrentUserReply.Validate if the designated constraints aren't met.
type GetCurrentUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserReplyValidationError) ErrorName() string {
	return "GetCurrentUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetUserRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	// no validation rules for From

	// no validation rules for FromDesc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on UpdateCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserRequestMultiError, or nil if none found.
func (m *UpdateCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NickName

	// no validation rules for Avatar

	// no validation rules for Gender

	if len(errors) > 0 {
		return UpdateCurrentUserRequestMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserRequestMultiError) AllErrors() []error { return m }

// UpdateCurrentUserRequestValidationError is the validation error returned by
// UpdateCurrentUserRequest.Validate if the designated constraints aren't met.
type UpdateCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserRequestValidationError) ErrorName() string {
	return "UpdateCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserRequestValidationError{}

// Validate checks the field values on UpdateCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCurrentUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCurrentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCurrentUserReplyMultiError, or nil if none found.
func (m *UpdateCurrentUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCurrentUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCurrentUserReplyMultiError(errors)
	}

	return nil
}

// UpdateCurrentUserReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCurrentUserReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCurrentUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCurrentUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCurrentUserReplyMultiError) AllErrors() []error { return m }

// UpdateCurrentUserReplyValidationError is the validation error returned by
// UpdateCurrentUserReply.Validate if the designated constraints aren't met.
type UpdateCurrentUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCurrentUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCurrentUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCurrentUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCurrentUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCurrentUserReplyValidationError) ErrorName() string {
	return "UpdateCurrentUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCurrentUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCurrentUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCurrentUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCurrentUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListUserRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListUserRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListUserRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListUserRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListUserRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListUserRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.From != nil {
		// no validation rules for From
	}

	if m.AppId != nil {
		// no validation rules for AppId
	}

	if m.App != nil {
		// no validation rules for App
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

var _ListUserRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListUserRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserReplyMultiError, or nil if none found.
func (m *CreateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserReplyMultiError(errors)
	}

	return nil
}

// CreateUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReplyMultiError) AllErrors() []error { return m }

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on ImportUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportUserRequestMultiError, or nil if none found.
func (m *ImportUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportUserRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportUserRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportUserRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportUserRequestMultiError(errors)
	}

	return nil
}

// ImportUserRequestMultiError is an error wrapping multiple validation errors
// returned by ImportUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserRequestMultiError) AllErrors() []error { return m }

// ImportUserRequestValidationError is the validation error returned by
// ImportUserRequest.Validate if the designated constraints aren't met.
type ImportUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserRequestValidationError) ErrorName() string {
	return "ImportUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserRequestValidationError{}

// Validate checks the field values on ImportUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportUserReplyMultiError, or nil if none found.
func (m *ImportUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return ImportUserReplyMultiError(errors)
	}

	return nil
}

// ImportUserReplyMultiError is an error wrapping multiple validation errors
// returned by ImportUserReply.ValidateAll() if the designated constraints
// aren't met.
type ImportUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserReplyMultiError) AllErrors() []error { return m }

// ImportUserReplyValidationError is the validation error returned by
// ImportUserReply.Validate if the designated constraints aren't met.
type ImportUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserReplyValidationError) ErrorName() string { return "ImportUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ImportUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserReplyValidationError{}

// Validate checks the field values on ExportUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserRequestMultiError, or nil if none found.
func (m *ExportUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.From != nil {
		// no validation rules for From
	}

	if len(errors) > 0 {
		return ExportUserRequestMultiError(errors)
	}

	return nil
}

// ExportUserRequestMultiError is an error wrapping multiple validation errors
// returned by ExportUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ExportUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserRequestMultiError) AllErrors() []error { return m }

// ExportUserRequestValidationError is the validation error returned by
// ExportUserRequest.Validate if the designated constraints aren't met.
type ExportUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserRequestValidationError) ErrorName() string {
	return "ExportUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserRequestValidationError{}

// Validate checks the field values on ExportUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExportUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserReplyMultiError, or nil if none found.
func (m *ExportUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	if len(errors) > 0 {
		return ExportUserReplyMultiError(errors)
	}

	return nil
}

// ExportUserReplyMultiError is an error wrapping multiple validation errors
// returned by ExportUserReply.ValidateAll() if the designated constraints
// aren't met.
type ExportUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserReplyMultiError) AllErrors() []error { return m }

// ExportUserReplyValidationError is the validation error returned by
// ExportUserReply.Validate if the designated constraints aren't met.
type ExportUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserReplyValidationError) ErrorName() string { return "ExportUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExportUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNickName()) < 1 {
		err := UpdateUserRequestValidationError{
			field:  "NickName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserReplyMultiError, or nil if none found.
func (m *UpdateUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserReplyMultiError(errors)
	}

	return nil
}

// UpdateUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReplyMultiError) AllErrors() []error { return m }

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on UpdateUserStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserStatusRequestMultiError, or nil if none found.
func (m *UpdateUserStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if m.DisableDesc != nil {

		if utf8.RuneCountInString(m.GetDisableDesc()) < 1 {
			err := UpdateUserStatusRequestValidationError{
				field:  "DisableDesc",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUserStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateUserStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserStatusRequestMultiError) AllErrors() []error { return m }

// UpdateUserStatusRequestValidationError is the validation error returned by
// UpdateUserStatusRequest.Validate if the designated constraints aren't met.
type UpdateUserStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatusRequestValidationError) ErrorName() string {
	return "UpdateUserStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatusRequestValidationError{}

// Validate checks the field values on UpdateUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserStatusReplyMultiError, or nil if none found.
func (m *UpdateUserStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateUserStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateUserStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserStatusReplyMultiError) AllErrors() []error { return m }

// UpdateUserStatusReplyValidationError is the validation error returned by
// UpdateUserStatusReply.Validate if the designated constraints aren't met.
type UpdateUserStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserStatusReplyValidationError) ErrorName() string {
	return "UpdateUserStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserStatusReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteUserRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteUserRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteUserRequest_Ids_Unique[item]; exists {
			err := DeleteUserRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteUserRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserReplyMultiError, or nil if none found.
func (m *DeleteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteUserReplyMultiError(errors)
	}

	return nil
}

// DeleteUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReplyMultiError) AllErrors() []error { return m }

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on GetTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrashUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrashUserRequestMultiError, or nil if none found.
func (m *GetTrashUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetTrashUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTrashUserRequestMultiError(errors)
	}

	return nil
}

// GetTrashUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetTrashUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTrashUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashUserRequestMultiError) AllErrors() []error { return m }

// GetTrashUserRequestValidationError is the validation error returned by
// GetTrashUserRequest.Validate if the designated constraints aren't met.
type GetTrashUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashUserRequestValidationError) ErrorName() string {
	return "GetTrashUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashUserRequestValidationError{}

// Validate checks the field values on GetTrashUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTrashUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrashUserReplyMultiError, or nil if none found.
func (m *GetTrashUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrashUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	// no validation rules for From

	// no validation rules for FromDesc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return GetTrashUserReplyMultiError(errors)
	}

	return nil
}

// GetTrashUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetTrashUserReply.ValidateAll() if the designated constraints
// aren't met.
type GetTrashUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrashUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrashUserReplyMultiError) AllErrors() []error { return m }

// GetTrashUserReplyValidationError is the validation error returned by
// GetTrashUserReply.Validate if the designated constraints aren't met.
type GetTrashUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrashUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrashUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrashUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrashUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrashUserReplyValidationError) ErrorName() string {
	return "GetTrashUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrashUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrashUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrashUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrashUserReplyValidationError{}

// Validate checks the field values on ListTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrashUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTrashUserRequestMultiError, or nil if none found.
func (m *ListTrashUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListTrashUserRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListTrashUserRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListTrashUserRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListTrashUserRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListTrashUserRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListTrashUserRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.From != nil {
		// no validation rules for From
	}

	if len(errors) > 0 {
		return ListTrashUserRequestMultiError(errors)
	}

	return nil
}

// ListTrashUserRequestMultiError is an error wrapping multiple validation
// errors returned by ListTrashUserRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTrashUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashUserRequestMultiError) AllErrors() []error { return m }

// ListTrashUserRequestValidationError is the validation error returned by
// ListTrashUserRequest.Validate if the designated constraints aren't met.
type ListTrashUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashUserRequestValidationError) ErrorName() string {
	return "ListTrashUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashUserRequestValidationError{}

var _ListTrashUserRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListTrashUserRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrashUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTrashUserReplyMultiError, or nil if none found.
func (m *ListTrashUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTrashUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTrashUserReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrashUserReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTrashUserReplyMultiError(errors)
	}

	return nil
}

// ListTrashUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListTrashUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListTrashUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashUserReplyMultiError) AllErrors() []error { return m }

// ListTrashUserReplyValidationError is the validation error returned by
// ListTrashUserReply.Validate if the designated constraints aren't met.
type ListTrashUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashUserReplyValidationError) ErrorName() string {
	return "ListTrashUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashUserReplyValidationError{}

// Validate checks the field values on DeleteTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTrashUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTrashUserRequestMultiError, or nil if none found.
func (m *DeleteTrashUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTrashUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteTrashUserRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteTrashUserRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteTrashUserRequest_Ids_Unique[item]; exists {
			err := DeleteTrashUserRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteTrashUserRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteTrashUserRequestMultiError(errors)
	}

	return nil
}

// DeleteTrashUserRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTrashUserRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTrashUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTrashUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTrashUserRequestMultiError) AllErrors() []error { return m }

// DeleteTrashUserRequestValidationError is the validation error returned by
// DeleteTrashUserRequest.Validate if the designated constraints aren't met.
type DeleteTrashUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTrashUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTrashUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTrashUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTrashUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTrashUserRequestValidationError) ErrorName() string {
	return "DeleteTrashUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTrashUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTrashUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTrashUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTrashUserRequestValidationError{}

// Validate checks the field values on DeleteTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTrashUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTrashUserReplyMultiError, or nil if none found.
func (m *DeleteTrashUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTrashUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteTrashUserReplyMultiError(errors)
	}

	return nil
}

// DeleteTrashUserReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTrashUserReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTrashUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTrashUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTrashUserReplyMultiError) AllErrors() []error { return m }

// DeleteTrashUserReplyValidationError is the validation error returned by
// DeleteTrashUserReply.Validate if the designated constraints aren't met.
type DeleteTrashUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTrashUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTrashUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTrashUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTrashUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTrashUserReplyValidationError) ErrorName() string {
	return "DeleteTrashUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTrashUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTrashUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTrashUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTrashUserReplyValidationError{}

// Validate checks the field values on RevertTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertTrashUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertTrashUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertTrashUserRequestMultiError, or nil if none found.
func (m *RevertTrashUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertTrashUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RevertTrashUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevertTrashUserRequestMultiError(errors)
	}

	return nil
}

// RevertTrashUserRequestMultiError is an error wrapping multiple validation
// errors returned by RevertTrashUserRequest.ValidateAll() if the designated
// constraints aren't met.
type RevertTrashUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertTrashUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertTrashUserRequestMultiError) AllErrors() []error { return m }

// RevertTrashUserRequestValidationError is the validation error returned by
// RevertTrashUserRequest.Validate if the designated constraints aren't met.
type RevertTrashUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertTrashUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertTrashUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertTrashUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertTrashUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertTrashUserRequestValidationError) ErrorName() string {
	return "RevertTrashUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevertTrashUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertTrashUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertTrashUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertTrashUserRequestValidationError{}

// Validate checks the field values on RevertTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevertTrashUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevertTrashUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevertTrashUserReplyMultiError, or nil if none found.
func (m *RevertTrashUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RevertTrashUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevertTrashUserReplyMultiError(errors)
	}

	return nil
}

// RevertTrashUserReplyMultiError is an error wrapping multiple validation
// errors returned by RevertTrashUserReply.ValidateAll() if the designated
// constraints aren't met.
type RevertTrashUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevertTrashUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevertTrashUserReplyMultiError) AllErrors() []error { return m }

// RevertTrashUserReplyValidationError is the validation error returned by
// RevertTrashUserReply.Validate if the designated constraints aren't met.
type RevertTrashUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevertTrashUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevertTrashUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevertTrashUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevertTrashUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevertTrashUserReplyValidationError) ErrorName() string {
	return "RevertTrashUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RevertTrashUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevertTrashUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevertTrashUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevertTrashUserReplyValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserReply_UserMultiError, or nil if none found.
func (m *ListUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	// no validation rules for From

	// no validation rules for FromDesc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return ListUserReply_UserMultiError(errors)
	}

	return nil
}

// ListUserReply_UserMultiError is an error wrapping multiple validation errors
// returned by ListUserReply_User.ValidateAll() if the designated constraints
// aren't met.
type ListUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReply_UserMultiError) AllErrors() []error { return m }

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}

// Validate checks the field values on ListTrashUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTrashUserReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTrashUserReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTrashUserReply_UserMultiError, or nil if none found.
func (m *ListTrashUserReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTrashUserReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	// no validation rules for From

	// no validation rules for FromDesc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return ListTrashUserReply_UserMultiError(errors)
	}

	return nil
}

// ListTrashUserReply_UserMultiError is an error wrapping multiple validation
// errors returned by ListTrashUserReply_User.ValidateAll() if the designated
// constraints aren't met.
type ListTrashUserReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTrashUserReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTrashUserReply_UserMultiError) AllErrors() []error { return m }

// ListTrashUserReply_UserValidationError is the validation error returned by
// ListTrashUserReply_User.Validate if the designated constraints aren't met.
type ListTrashUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrashUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrashUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrashUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrashUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrashUserReply_UserValidationError) ErrorName() string {
	return "ListTrashUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrashUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrashUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrashUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrashUserReply_UserValidationError{}
