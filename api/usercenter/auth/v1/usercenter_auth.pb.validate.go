// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/usercenter/auth/usercenter_auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReplyMultiError, or nil
// if none found.
func (m *AuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AppKeyword

	if len(errors) > 0 {
		return AuthReplyMultiError(errors)
	}

	return nil
}

// AuthReplyMultiError is an error wrapping multiple validation errors returned
// by AuthReply.ValidateAll() if the designated constraints aren't met.
type AuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReplyMultiError) AllErrors() []error { return m }

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}

// Validate checks the field values on ListAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthRequestMultiError, or nil if none found.
func (m *ListAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListAuthRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListAuthRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := ListAuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListAuthRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListAuthRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListAuthRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListAuthRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListAuthRequestMultiError(errors)
	}

	return nil
}

// ListAuthRequestMultiError is an error wrapping multiple validation errors
// returned by ListAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthRequestMultiError) AllErrors() []error { return m }

// ListAuthRequestValidationError is the validation error returned by
// ListAuthRequest.Validate if the designated constraints aren't met.
type ListAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthRequestValidationError) ErrorName() string { return "ListAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthRequestValidationError{}

var _ListAuthRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListAuthRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAuthReplyMultiError, or
// nil if none found.
func (m *ListAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuthReplyMultiError(errors)
	}

	return nil
}

// ListAuthReplyMultiError is an error wrapping multiple validation errors
// returned by ListAuthReply.ValidateAll() if the designated constraints
// aren't met.
type ListAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthReplyMultiError) AllErrors() []error { return m }

// ListAuthReplyValidationError is the validation error returned by
// ListAuthReply.Validate if the designated constraints aren't met.
type ListAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthReplyValidationError) ErrorName() string { return "ListAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthReplyValidationError{}

// Validate checks the field values on CreateAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthRequestMultiError, or nil if none found.
func (m *CreateAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateAuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() <= 0 {
		err := CreateAuthRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAuthRequestMultiError(errors)
	}

	return nil
}

// CreateAuthRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthRequestMultiError) AllErrors() []error { return m }

// CreateAuthRequestValidationError is the validation error returned by
// CreateAuthRequest.Validate if the designated constraints aren't met.
type CreateAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthRequestValidationError) ErrorName() string {
	return "CreateAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthRequestValidationError{}

// Validate checks the field values on CreateAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuthReplyMultiError, or nil if none found.
func (m *CreateAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAuthReplyMultiError(errors)
	}

	return nil
}

// CreateAuthReplyMultiError is an error wrapping multiple validation errors
// returned by CreateAuthReply.ValidateAll() if the designated constraints
// aren't met.
type CreateAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuthReplyMultiError) AllErrors() []error { return m }

// CreateAuthReplyValidationError is the validation error returned by
// CreateAuthReply.Validate if the designated constraints aren't met.
type CreateAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuthReplyValidationError) ErrorName() string { return "CreateAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuthReplyValidationError{}

// Validate checks the field values on UpdateAuthStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthStatusRequestMultiError, or nil if none found.
func (m *UpdateAuthStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAuthStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if len(errors) > 0 {
		return UpdateAuthStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateAuthStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAuthStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAuthStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthStatusRequestMultiError) AllErrors() []error { return m }

// UpdateAuthStatusRequestValidationError is the validation error returned by
// UpdateAuthStatusRequest.Validate if the designated constraints aren't met.
type UpdateAuthStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthStatusRequestValidationError) ErrorName() string {
	return "UpdateAuthStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthStatusRequestValidationError{}

// Validate checks the field values on UpdateAuthStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuthStatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuthStatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuthStatusReplyMultiError, or nil if none found.
func (m *UpdateAuthStatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuthStatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuthStatusReplyMultiError(errors)
	}

	return nil
}

// UpdateAuthStatusReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAuthStatusReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAuthStatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuthStatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuthStatusReplyMultiError) AllErrors() []error { return m }

// UpdateAuthStatusReplyValidationError is the validation error returned by
// UpdateAuthStatusReply.Validate if the designated constraints aren't met.
type UpdateAuthStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuthStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuthStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuthStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuthStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuthStatusReplyValidationError) ErrorName() string {
	return "UpdateAuthStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuthStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuthStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuthStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuthStatusReplyValidationError{}

// Validate checks the field values on DeleteAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthRequestMultiError, or nil if none found.
func (m *DeleteAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteAuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAppId() <= 0 {
		err := DeleteAuthRequestValidationError{
			field:  "AppId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAuthRequestMultiError(errors)
	}

	return nil
}

// DeleteAuthRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthRequestMultiError) AllErrors() []error { return m }

// DeleteAuthRequestValidationError is the validation error returned by
// DeleteAuthRequest.Validate if the designated constraints aren't met.
type DeleteAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthRequestValidationError) ErrorName() string {
	return "DeleteAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthRequestValidationError{}

// Validate checks the field values on DeleteAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuthReplyMultiError, or nil if none found.
func (m *DeleteAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAuthReplyMultiError(errors)
	}

	return nil
}

// DeleteAuthReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteAuthReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuthReplyMultiError) AllErrors() []error { return m }

// DeleteAuthReplyValidationError is the validation error returned by
// DeleteAuthReply.Validate if the designated constraints aren't met.
type DeleteAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuthReplyValidationError) ErrorName() string { return "DeleteAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuthReplyValidationError{}

// Validate checks the field values on ListOAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthRequestMultiError, or nil if none found.
func (m *ListOAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListOAuthRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListOAuthRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := ListOAuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListOAuthRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListOAuthRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListOAuthRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListOAuthRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListOAuthRequestMultiError(errors)
	}

	return nil
}

// ListOAuthRequestMultiError is an error wrapping multiple validation errors
// returned by ListOAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthRequestMultiError) AllErrors() []error { return m }

// ListOAuthRequestValidationError is the validation error returned by
// ListOAuthRequest.Validate if the designated constraints aren't met.
type ListOAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthRequestValidationError) ErrorName() string { return "ListOAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthRequestValidationError{}

var _ListOAuthRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListOAuthRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListOAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOAuthReplyMultiError,
// or nil if none found.
func (m *ListOAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOAuthReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOAuthReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOAuthReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOAuthReplyMultiError(errors)
	}

	return nil
}

// ListOAuthReplyMultiError is an error wrapping multiple validation errors
// returned by ListOAuthReply.ValidateAll() if the designated constraints
// aren't met.
type ListOAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthReplyMultiError) AllErrors() []error { return m }

// ListOAuthReplyValidationError is the validation error returned by
// ListOAuthReply.Validate if the designated constraints aren't met.
type ListOAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthReplyValidationError) ErrorName() string { return "ListOAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListOAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthReplyValidationError{}

// Validate checks the field values on DeleteOAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthRequestMultiError, or nil if none found.
func (m *DeleteOAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := DeleteOAuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetChannelId() <= 0 {
		err := DeleteOAuthRequestValidationError{
			field:  "ChannelId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOAuthRequestMultiError(errors)
	}

	return nil
}

// DeleteOAuthRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthRequestMultiError) AllErrors() []error { return m }

// DeleteOAuthRequestValidationError is the validation error returned by
// DeleteOAuthRequest.Validate if the designated constraints aren't met.
type DeleteOAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthRequestValidationError) ErrorName() string {
	return "DeleteOAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthRequestValidationError{}

// Validate checks the field values on DeleteOAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuthReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOAuthReplyMultiError, or nil if none found.
func (m *DeleteOAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOAuthReplyMultiError(errors)
	}

	return nil
}

// DeleteOAuthReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteOAuthReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteOAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuthReplyMultiError) AllErrors() []error { return m }

// DeleteOAuthReplyValidationError is the validation error returned by
// DeleteOAuthReply.Validate if the designated constraints aren't met.
type DeleteOAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuthReplyValidationError) ErrorName() string { return "DeleteOAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuthReplyValidationError{}

// Validate checks the field values on GenAuthCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenAuthCaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenAuthCaptchaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenAuthCaptchaRequestMultiError, or nil if none found.
func (m *GenAuthCaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenAuthCaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := GenAuthCaptchaRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Email

	if len(errors) > 0 {
		return GenAuthCaptchaRequestMultiError(errors)
	}

	return nil
}

// GenAuthCaptchaRequestMultiError is an error wrapping multiple validation
// errors returned by GenAuthCaptchaRequest.ValidateAll() if the designated
// constraints aren't met.
type GenAuthCaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenAuthCaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenAuthCaptchaRequestMultiError) AllErrors() []error { return m }

// GenAuthCaptchaRequestValidationError is the validation error returned by
// GenAuthCaptchaRequest.Validate if the designated constraints aren't met.
type GenAuthCaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenAuthCaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenAuthCaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenAuthCaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenAuthCaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenAuthCaptchaRequestValidationError) ErrorName() string {
	return "GenAuthCaptchaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenAuthCaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenAuthCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenAuthCaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenAuthCaptchaRequestValidationError{}

// Validate checks the field values on GenAuthCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenAuthCaptchaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenAuthCaptchaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenAuthCaptchaReplyMultiError, or nil if none found.
func (m *GenAuthCaptchaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenAuthCaptchaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Expire

	// no validation rules for Base64

	if len(errors) > 0 {
		return GenAuthCaptchaReplyMultiError(errors)
	}

	return nil
}

// GenAuthCaptchaReplyMultiError is an error wrapping multiple validation
// errors returned by GenAuthCaptchaReply.ValidateAll() if the designated
// constraints aren't met.
type GenAuthCaptchaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenAuthCaptchaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenAuthCaptchaReplyMultiError) AllErrors() []error { return m }

// GenAuthCaptchaReplyValidationError is the validation error returned by
// GenAuthCaptchaReply.Validate if the designated constraints aren't met.
type GenAuthCaptchaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenAuthCaptchaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenAuthCaptchaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenAuthCaptchaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenAuthCaptchaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenAuthCaptchaReplyValidationError) ErrorName() string {
	return "GenAuthCaptchaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenAuthCaptchaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenAuthCaptchaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenAuthCaptchaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenAuthCaptchaReplyValidationError{}

// Validate checks the field values on OAuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthLoginRequestMultiError, or nil if none found.
func (m *OAuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetChannel()) < 1 {
		err := OAuthLoginRequestValidationError{
			field:  "Channel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OAuthLoginRequestMultiError(errors)
	}

	return nil
}

// OAuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type OAuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthLoginRequestMultiError) AllErrors() []error { return m }

// OAuthLoginRequestValidationError is the validation error returned by
// OAuthLoginRequest.Validate if the designated constraints aren't met.
type OAuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthLoginRequestValidationError) ErrorName() string {
	return "OAuthLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthLoginRequestValidationError{}

// Validate checks the field values on OAuthLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthLoginReplyMultiError, or nil if none found.
func (m *OAuthLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsBind

	if m.OAuthUid != nil {
		// no validation rules for OAuthUid
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.Expire != nil {
		// no validation rules for Expire
	}

	if len(errors) > 0 {
		return OAuthLoginReplyMultiError(errors)
	}

	return nil
}

// OAuthLoginReplyMultiError is an error wrapping multiple validation errors
// returned by OAuthLoginReply.ValidateAll() if the designated constraints
// aren't met.
type OAuthLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthLoginReplyMultiError) AllErrors() []error { return m }

// OAuthLoginReplyValidationError is the validation error returned by
// OAuthLoginReply.Validate if the designated constraints aren't met.
type OAuthLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthLoginReplyValidationError) ErrorName() string { return "OAuthLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e OAuthLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthLoginReplyValidationError{}

// Validate checks the field values on EmailLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmailLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailLoginRequestMultiError, or nil if none found.
func (m *EmailLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailLoginRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := EmailLoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := EmailLoginRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := EmailLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmailLoginRequestMultiError(errors)
	}

	return nil
}

func (m *EmailLoginRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailLoginRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailLoginRequestMultiError is an error wrapping multiple validation errors
// returned by EmailLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type EmailLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailLoginRequestMultiError) AllErrors() []error { return m }

// EmailLoginRequestValidationError is the validation error returned by
// EmailLoginRequest.Validate if the designated constraints aren't met.
type EmailLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailLoginRequestValidationError) ErrorName() string {
	return "EmailLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmailLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailLoginRequestValidationError{}

// Validate checks the field values on EmailLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmailLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailLoginReplyMultiError, or nil if none found.
func (m *EmailLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return EmailLoginReplyMultiError(errors)
	}

	return nil
}

// EmailLoginReplyMultiError is an error wrapping multiple validation errors
// returned by EmailLoginReply.ValidateAll() if the designated constraints
// aren't met.
type EmailLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailLoginReplyMultiError) AllErrors() []error { return m }

// EmailLoginReplyValidationError is the validation error returned by
// EmailLoginReply.Validate if the designated constraints aren't met.
type EmailLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailLoginReplyValidationError) ErrorName() string { return "EmailLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmailLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailLoginReplyValidationError{}

// Validate checks the field values on PasswordLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordLoginRequestMultiError, or nil if none found.
func (m *PasswordLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := PasswordLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_PasswordLoginRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := PasswordLoginRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_]{5,11}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := PasswordLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := PasswordLoginRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordLoginRequestMultiError(errors)
	}

	return nil
}

// PasswordLoginRequestMultiError is an error wrapping multiple validation
// errors returned by PasswordLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type PasswordLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordLoginRequestMultiError) AllErrors() []error { return m }

// PasswordLoginRequestValidationError is the validation error returned by
// PasswordLoginRequest.Validate if the designated constraints aren't met.
type PasswordLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordLoginRequestValidationError) ErrorName() string {
	return "PasswordLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordLoginRequestValidationError{}

var _PasswordLoginRequest_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]{5,11}$")

// Validate checks the field values on PasswordLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordLoginReplyMultiError, or nil if none found.
func (m *PasswordLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return PasswordLoginReplyMultiError(errors)
	}

	return nil
}

// PasswordLoginReplyMultiError is an error wrapping multiple validation errors
// returned by PasswordLoginReply.ValidateAll() if the designated constraints
// aren't met.
type PasswordLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordLoginReplyMultiError) AllErrors() []error { return m }

// PasswordLoginReplyValidationError is the validation error returned by
// PasswordLoginReply.Validate if the designated constraints aren't met.
type PasswordLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordLoginReplyValidationError) ErrorName() string {
	return "PasswordLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordLoginReplyValidationError{}

// Validate checks the field values on EmailRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailRegisterRequestMultiError, or nil if none found.
func (m *EmailRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailRegisterRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := EmailRegisterRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := EmailRegisterRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := EmailRegisterRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OAuthUid != nil {
		// no validation rules for OAuthUid
	}

	if len(errors) > 0 {
		return EmailRegisterRequestMultiError(errors)
	}

	return nil
}

func (m *EmailRegisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailRegisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by EmailRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type EmailRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailRegisterRequestMultiError) AllErrors() []error { return m }

// EmailRegisterRequestValidationError is the validation error returned by
// EmailRegisterRequest.Validate if the designated constraints aren't met.
type EmailRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailRegisterRequestValidationError) ErrorName() string {
	return "EmailRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmailRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailRegisterRequestValidationError{}

// Validate checks the field values on EmailRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmailRegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailRegisterReplyMultiError, or nil if none found.
func (m *EmailRegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailRegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return EmailRegisterReplyMultiError(errors)
	}

	return nil
}

// EmailRegisterReplyMultiError is an error wrapping multiple validation errors
// returned by EmailRegisterReply.ValidateAll() if the designated constraints
// aren't met.
type EmailRegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailRegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailRegisterReplyMultiError) AllErrors() []error { return m }

// EmailRegisterReplyValidationError is the validation error returned by
// EmailRegisterReply.Validate if the designated constraints aren't met.
type EmailRegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailRegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailRegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailRegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailRegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailRegisterReplyValidationError) ErrorName() string {
	return "EmailRegisterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EmailRegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailRegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailRegisterReplyValidationError{}

// Validate checks the field values on PasswordRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRegisterRequestMultiError, or nil if none found.
func (m *PasswordRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := PasswordRegisterRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := PasswordRegisterRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.OAuthUid != nil {
		// no validation rules for OAuthUid
	}

	if len(errors) > 0 {
		return PasswordRegisterRequestMultiError(errors)
	}

	return nil
}

// PasswordRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by PasswordRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type PasswordRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRegisterRequestMultiError) AllErrors() []error { return m }

// PasswordRegisterRequestValidationError is the validation error returned by
// PasswordRegisterRequest.Validate if the designated constraints aren't met.
type PasswordRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRegisterRequestValidationError) ErrorName() string {
	return "PasswordRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRegisterRequestValidationError{}

// Validate checks the field values on PasswordRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordRegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordRegisterReplyMultiError, or nil if none found.
func (m *PasswordRegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordRegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return PasswordRegisterReplyMultiError(errors)
	}

	return nil
}

// PasswordRegisterReplyMultiError is an error wrapping multiple validation
// errors returned by PasswordRegisterReply.ValidateAll() if the designated
// constraints aren't met.
type PasswordRegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordRegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordRegisterReplyMultiError) AllErrors() []error { return m }

// PasswordRegisterReplyValidationError is the validation error returned by
// PasswordRegisterReply.Validate if the designated constraints aren't met.
type PasswordRegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordRegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordRegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordRegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordRegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordRegisterReplyValidationError) ErrorName() string {
	return "PasswordRegisterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordRegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordRegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordRegisterReplyValidationError{}

// Validate checks the field values on EmailBindRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmailBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmailBindRequestMultiError, or nil if none found.
func (m *EmailBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = EmailBindRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := EmailBindRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := EmailBindRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := EmailBindRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOAuthUid()) < 1 {
		err := EmailBindRequestValidationError{
			field:  "OAuthUid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmailBindRequestMultiError(errors)
	}

	return nil
}

func (m *EmailBindRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *EmailBindRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailBindRequestMultiError is an error wrapping multiple validation errors
// returned by EmailBindRequest.ValidateAll() if the designated constraints
// aren't met.
type EmailBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailBindRequestMultiError) AllErrors() []error { return m }

// EmailBindRequestValidationError is the validation error returned by
// EmailBindRequest.Validate if the designated constraints aren't met.
type EmailBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailBindRequestValidationError) ErrorName() string { return "EmailBindRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmailBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailBindRequestValidationError{}

// Validate checks the field values on EmailBindReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmailBindReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmailBindReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmailBindReplyMultiError,
// or nil if none found.
func (m *EmailBindReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmailBindReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return EmailBindReplyMultiError(errors)
	}

	return nil
}

// EmailBindReplyMultiError is an error wrapping multiple validation errors
// returned by EmailBindReply.ValidateAll() if the designated constraints
// aren't met.
type EmailBindReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailBindReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailBindReplyMultiError) AllErrors() []error { return m }

// EmailBindReplyValidationError is the validation error returned by
// EmailBindReply.Validate if the designated constraints aren't met.
type EmailBindReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailBindReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailBindReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailBindReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailBindReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailBindReplyValidationError) ErrorName() string { return "EmailBindReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmailBindReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailBindReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailBindReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailBindReplyValidationError{}

// Validate checks the field values on PasswordBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordBindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordBindRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordBindRequestMultiError, or nil if none found.
func (m *PasswordBindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordBindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 6 {
		err := PasswordBindRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := PasswordBindRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) < 1 {
		err := PasswordBindRequestValidationError{
			field:  "Captcha",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptchaId()) < 1 {
		err := PasswordBindRequestValidationError{
			field:  "CaptchaId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApp()) < 1 {
		err := PasswordBindRequestValidationError{
			field:  "App",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOAuthUid()) < 1 {
		err := PasswordBindRequestValidationError{
			field:  "OAuthUid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PasswordBindRequestMultiError(errors)
	}

	return nil
}

// PasswordBindRequestMultiError is an error wrapping multiple validation
// errors returned by PasswordBindRequest.ValidateAll() if the designated
// constraints aren't met.
type PasswordBindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordBindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordBindRequestMultiError) AllErrors() []error { return m }

// PasswordBindRequestValidationError is the validation error returned by
// PasswordBindRequest.Validate if the designated constraints aren't met.
type PasswordBindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordBindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordBindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordBindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordBindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordBindRequestValidationError) ErrorName() string {
	return "PasswordBindRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordBindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordBindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordBindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordBindRequestValidationError{}

// Validate checks the field values on PasswordBindReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PasswordBindReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordBindReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordBindReplyMultiError, or nil if none found.
func (m *PasswordBindReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordBindReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return PasswordBindReplyMultiError(errors)
	}

	return nil
}

// PasswordBindReplyMultiError is an error wrapping multiple validation errors
// returned by PasswordBindReply.ValidateAll() if the designated constraints
// aren't met.
type PasswordBindReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordBindReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordBindReplyMultiError) AllErrors() []error { return m }

// PasswordBindReplyValidationError is the validation error returned by
// PasswordBindReply.Validate if the designated constraints aren't met.
type PasswordBindReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordBindReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordBindReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordBindReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordBindReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordBindReplyValidationError) ErrorName() string {
	return "PasswordBindReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordBindReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordBindReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordBindReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordBindReplyValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReplyMultiError, or nil if none found.
func (m *RefreshTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expire

	if len(errors) > 0 {
		return RefreshTokenReplyMultiError(errors)
	}

	return nil
}

// RefreshTokenReplyMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReply.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReplyMultiError) AllErrors() []error { return m }

// RefreshTokenReplyValidationError is the validation error returned by
// RefreshTokenReply.Validate if the designated constraints aren't met.
type RefreshTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReplyValidationError) ErrorName() string {
	return "RefreshTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReplyValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReplyMultiError, or
// nil if none found.
func (m *LogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReplyMultiError(errors)
	}

	return nil
}

// LogoutReplyMultiError is an error wrapping multiple validation errors
// returned by LogoutReply.ValidateAll() if the designated constraints aren't met.
type LogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReplyMultiError) AllErrors() []error { return m }

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on ListAuthReply_App with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuthReply_App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthReply_App with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthReply_AppMultiError, or nil if none found.
func (m *ListAuthReply_App) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthReply_App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListAuthReply_AppMultiError(errors)
	}

	return nil
}

// ListAuthReply_AppMultiError is an error wrapping multiple validation errors
// returned by ListAuthReply_App.ValidateAll() if the designated constraints
// aren't met.
type ListAuthReply_AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthReply_AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthReply_AppMultiError) AllErrors() []error { return m }

// ListAuthReply_AppValidationError is the validation error returned by
// ListAuthReply_App.Validate if the designated constraints aren't met.
type ListAuthReply_AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthReply_AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthReply_AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthReply_AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthReply_AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthReply_AppValidationError) ErrorName() string {
	return "ListAuthReply_AppValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthReply_AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthReply_App.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthReply_AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthReply_AppValidationError{}

// Validate checks the field values on ListAuthReply_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuthReply_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuthReply_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuthReply_AuthMultiError, or nil if none found.
func (m *ListAuthReply_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuthReply_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for LoggedAt

	// no validation rules for ExpiredAt

	// no validation rules for CreatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if m.App != nil {

		if all {
			switch v := interface{}(m.GetApp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuthReply_AuthValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuthReply_AuthValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuthReply_AuthValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuthReply_AuthMultiError(errors)
	}

	return nil
}

// ListAuthReply_AuthMultiError is an error wrapping multiple validation errors
// returned by ListAuthReply_Auth.ValidateAll() if the designated constraints
// aren't met.
type ListAuthReply_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuthReply_AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuthReply_AuthMultiError) AllErrors() []error { return m }

// ListAuthReply_AuthValidationError is the validation error returned by
// ListAuthReply_Auth.Validate if the designated constraints aren't met.
type ListAuthReply_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuthReply_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuthReply_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuthReply_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuthReply_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuthReply_AuthValidationError) ErrorName() string {
	return "ListAuthReply_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuthReply_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuthReply_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuthReply_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuthReply_AuthValidationError{}

// Validate checks the field values on ListOAuthReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthReply_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthReply_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthReply_ChannelMultiError, or nil if none found.
func (m *ListOAuthReply_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthReply_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Logo

	// no validation rules for Keyword

	// no validation rules for Name

	if len(errors) > 0 {
		return ListOAuthReply_ChannelMultiError(errors)
	}

	return nil
}

// ListOAuthReply_ChannelMultiError is an error wrapping multiple validation
// errors returned by ListOAuthReply_Channel.ValidateAll() if the designated
// constraints aren't met.
type ListOAuthReply_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthReply_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthReply_ChannelMultiError) AllErrors() []error { return m }

// ListOAuthReply_ChannelValidationError is the validation error returned by
// ListOAuthReply_Channel.Validate if the designated constraints aren't met.
type ListOAuthReply_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthReply_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthReply_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthReply_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthReply_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthReply_ChannelValidationError) ErrorName() string {
	return "ListOAuthReply_ChannelValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthReply_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthReply_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthReply_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthReply_ChannelValidationError{}

// Validate checks the field values on ListOAuthReply_OAuth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOAuthReply_OAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOAuthReply_OAuth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOAuthReply_OAuthMultiError, or nil if none found.
func (m *ListOAuthReply_OAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOAuthReply_OAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ChannelId

	// no validation rules for LoggedAt

	// no validation rules for ExpiredAt

	// no validation rules for CreatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DisableDesc != nil {
		// no validation rules for DisableDesc
	}

	if m.Channel != nil {

		if all {
			switch v := interface{}(m.GetChannel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOAuthReply_OAuthValidationError{
						field:  "Channel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOAuthReply_OAuthValidationError{
						field:  "Channel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOAuthReply_OAuthValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOAuthReply_OAuthMultiError(errors)
	}

	return nil
}

// ListOAuthReply_OAuthMultiError is an error wrapping multiple validation
// errors returned by ListOAuthReply_OAuth.ValidateAll() if the designated
// constraints aren't met.
type ListOAuthReply_OAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOAuthReply_OAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOAuthReply_OAuthMultiError) AllErrors() []error { return m }

// ListOAuthReply_OAuthValidationError is the validation error returned by
// ListOAuthReply_OAuth.Validate if the designated constraints aren't met.
type ListOAuthReply_OAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOAuthReply_OAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOAuthReply_OAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOAuthReply_OAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOAuthReply_OAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOAuthReply_OAuthValidationError) ErrorName() string {
	return "ListOAuthReply_OAuthValidationError"
}

// Error satisfies the builtin error interface
func (e ListOAuthReply_OAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOAuthReply_OAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOAuthReply_OAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOAuthReply_OAuthValidationError{}
