// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/usercenter/auth/usercenter_auth_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthAuth = "/usercenter.api.usercenter.auth.v1.Auth/Auth"
const OperationAuthCreateAuth = "/usercenter.api.usercenter.auth.v1.Auth/CreateAuth"
const OperationAuthDeleteAuth = "/usercenter.api.usercenter.auth.v1.Auth/DeleteAuth"
const OperationAuthDeleteOAuth = "/usercenter.api.usercenter.auth.v1.Auth/DeleteOAuth"
const OperationAuthEmailBind = "/usercenter.api.usercenter.auth.v1.Auth/EmailBind"
const OperationAuthEmailLogin = "/usercenter.api.usercenter.auth.v1.Auth/EmailLogin"
const OperationAuthEmailRegister = "/usercenter.api.usercenter.auth.v1.Auth/EmailRegister"
const OperationAuthGenAuthCaptcha = "/usercenter.api.usercenter.auth.v1.Auth/GenAuthCaptcha"
const OperationAuthListAuth = "/usercenter.api.usercenter.auth.v1.Auth/ListAuth"
const OperationAuthListOAuth = "/usercenter.api.usercenter.auth.v1.Auth/ListOAuth"
const OperationAuthLogout = "/usercenter.api.usercenter.auth.v1.Auth/Logout"
const OperationAuthOAuthLogin = "/usercenter.api.usercenter.auth.v1.Auth/OAuthLogin"
const OperationAuthPasswordBind = "/usercenter.api.usercenter.auth.v1.Auth/PasswordBind"
const OperationAuthPasswordLogin = "/usercenter.api.usercenter.auth.v1.Auth/PasswordLogin"
const OperationAuthPasswordRegister = "/usercenter.api.usercenter.auth.v1.Auth/PasswordRegister"
const OperationAuthRefreshToken = "/usercenter.api.usercenter.auth.v1.Auth/RefreshToken"
const OperationAuthUpdateAuthStatus = "/usercenter.api.usercenter.auth.v1.Auth/UpdateAuthStatus"

type AuthHTTPServer interface {
	// Auth 解析token信息
	Auth(context.Context, *emptypb.Empty) (*AuthReply, error)
	// CreateAuth CreateAuth 创建应用授权信息
	CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthReply, error)
	// DeleteAuth DeleteAuth 删除应用授权信息
	DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthReply, error)
	// DeleteOAuth DeleteOAuth 删除渠道授权信息
	DeleteOAuth(context.Context, *DeleteOAuthRequest) (*DeleteOAuthReply, error)
	// EmailBind EmailBind 邮箱绑定
	EmailBind(context.Context, *EmailBindRequest) (*EmailBindReply, error)
	// EmailLogin EmailLogin 邮箱登陆
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginReply, error)
	// EmailRegister EmailRegister 邮箱注册
	EmailRegister(context.Context, *EmailRegisterRequest) (*EmailRegisterReply, error)
	// GenAuthCaptcha GenAuthCaptcha 生成二维码
	GenAuthCaptcha(context.Context, *GenAuthCaptchaRequest) (*GenAuthCaptchaReply, error)
	// ListAuth ListAuth 获取应用授权信息列表
	ListAuth(context.Context, *ListAuthRequest) (*ListAuthReply, error)
	// ListOAuth ListOAuth 获取用户授权渠道信息列表
	ListOAuth(context.Context, *ListOAuthRequest) (*ListOAuthReply, error)
	// Logout 退出登陆
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// OAuthLogin OAuthLogin 三方渠道登陆
	OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginReply, error)
	// PasswordBind PasswordBind 密码绑定
	PasswordBind(context.Context, *PasswordBindRequest) (*PasswordBindReply, error)
	// PasswordLogin PasswordLogin 密码登陆
	PasswordLogin(context.Context, *PasswordLoginRequest) (*PasswordLoginReply, error)
	// PasswordRegister PasswordRegister 密码注册
	PasswordRegister(context.Context, *PasswordRegisterRequest) (*PasswordRegisterReply, error)
	// RefreshToken 刷新token时长
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	// UpdateAuthStatus UpdateAuthStatus 更新应用授权信息状态
	UpdateAuthStatus(context.Context, *UpdateAuthStatusRequest) (*UpdateAuthStatusReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/usercenter/client/v1/token/refresh", _Auth_RefreshToken0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/logout", _Auth_Logout0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/auth", _Auth_Auth0_HTTP_Handler(srv))
	r.GET("/usercenter/api/v1/auths", _Auth_ListAuth0_HTTP_Handler(srv))
	r.POST("/usercenter/api/v1/auth", _Auth_CreateAuth0_HTTP_Handler(srv))
	r.PUT("/usercenter/api/v1/auth/status", _Auth_UpdateAuthStatus0_HTTP_Handler(srv))
	r.DELETE("/usercenter/api/v1/auth", _Auth_DeleteAuth0_HTTP_Handler(srv))
	r.GET("/usercenter/api/v1/oauths", _Auth_ListOAuth0_HTTP_Handler(srv))
	r.DELETE("/usercenter/api/v1/oauth", _Auth_DeleteOAuth0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/auth/captcha", _Auth_GenAuthCaptcha0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/login/oauth", _Auth_OAuthLogin0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/login/email", _Auth_EmailLogin0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/login/password", _Auth_PasswordLogin0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/register/email", _Auth_EmailRegister0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/register/password", _Auth_PasswordRegister0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/bind/email", _Auth_EmailBind0_HTTP_Handler(srv))
	r.POST("/usercenter/client/v1/bind/password", _Auth_PasswordBind0_HTTP_Handler(srv))
}

func _Auth_RefreshToken0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_Logout0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthLogout)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_Auth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Auth(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListAuth(ctx, req.(*ListAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateAuth(ctx, req.(*CreateAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateAuthStatus0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAuthStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthUpdateAuthStatus)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateAuthStatus(ctx, req.(*UpdateAuthStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAuthStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteAuth(ctx, req.(*DeleteAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListOAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthListOAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListOAuth(ctx, req.(*ListOAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteOAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOAuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteOAuth)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteOAuth(ctx, req.(*DeleteOAuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_GenAuthCaptcha0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenAuthCaptchaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGenAuthCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GenAuthCaptcha(ctx, req.(*GenAuthCaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenAuthCaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_OAuthLogin0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OAuthLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthOAuthLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.OAuthLogin(ctx, req.(*OAuthLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OAuthLoginReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_EmailLogin0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthEmailLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.EmailLogin(ctx, req.(*EmailLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailLoginReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_PasswordLogin0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthPasswordLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordLogin(ctx, req.(*PasswordLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PasswordLoginReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_EmailRegister0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthEmailRegister)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.EmailRegister(ctx, req.(*EmailRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailRegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_PasswordRegister0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthPasswordRegister)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordRegister(ctx, req.(*PasswordRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PasswordRegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_EmailBind0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmailBindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthEmailBind)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.EmailBind(ctx, req.(*EmailBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmailBindReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_PasswordBind0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordBindRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthPasswordBind)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PasswordBind(ctx, req.(*PasswordBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PasswordBindReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	Auth(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AuthReply, err error)
	CreateAuth(ctx context.Context, req *CreateAuthRequest, opts ...http.CallOption) (rsp *CreateAuthReply, err error)
	DeleteAuth(ctx context.Context, req *DeleteAuthRequest, opts ...http.CallOption) (rsp *DeleteAuthReply, err error)
	DeleteOAuth(ctx context.Context, req *DeleteOAuthRequest, opts ...http.CallOption) (rsp *DeleteOAuthReply, err error)
	EmailBind(ctx context.Context, req *EmailBindRequest, opts ...http.CallOption) (rsp *EmailBindReply, err error)
	EmailLogin(ctx context.Context, req *EmailLoginRequest, opts ...http.CallOption) (rsp *EmailLoginReply, err error)
	EmailRegister(ctx context.Context, req *EmailRegisterRequest, opts ...http.CallOption) (rsp *EmailRegisterReply, err error)
	GenAuthCaptcha(ctx context.Context, req *GenAuthCaptchaRequest, opts ...http.CallOption) (rsp *GenAuthCaptchaReply, err error)
	ListAuth(ctx context.Context, req *ListAuthRequest, opts ...http.CallOption) (rsp *ListAuthReply, err error)
	ListOAuth(ctx context.Context, req *ListOAuthRequest, opts ...http.CallOption) (rsp *ListOAuthReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	OAuthLogin(ctx context.Context, req *OAuthLoginRequest, opts ...http.CallOption) (rsp *OAuthLoginReply, err error)
	PasswordBind(ctx context.Context, req *PasswordBindRequest, opts ...http.CallOption) (rsp *PasswordBindReply, err error)
	PasswordLogin(ctx context.Context, req *PasswordLoginRequest, opts ...http.CallOption) (rsp *PasswordLoginReply, err error)
	PasswordRegister(ctx context.Context, req *PasswordRegisterRequest, opts ...http.CallOption) (rsp *PasswordRegisterReply, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenRequest, opts ...http.CallOption) (rsp *RefreshTokenReply, err error)
	UpdateAuthStatus(ctx context.Context, req *UpdateAuthStatusRequest, opts ...http.CallOption) (rsp *UpdateAuthStatusReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) Auth(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/usercenter/client/v1/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...http.CallOption) (*CreateAuthReply, error) {
	var out CreateAuthReply
	pattern := "/usercenter/api/v1/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreateAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...http.CallOption) (*DeleteAuthReply, error) {
	var out DeleteAuthReply
	pattern := "/usercenter/api/v1/auth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteOAuth(ctx context.Context, in *DeleteOAuthRequest, opts ...http.CallOption) (*DeleteOAuthReply, error) {
	var out DeleteOAuthReply
	pattern := "/usercenter/api/v1/oauth"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteOAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) EmailBind(ctx context.Context, in *EmailBindRequest, opts ...http.CallOption) (*EmailBindReply, error) {
	var out EmailBindReply
	pattern := "/usercenter/client/v1/bind/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthEmailBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...http.CallOption) (*EmailLoginReply, error) {
	var out EmailLoginReply
	pattern := "/usercenter/client/v1/login/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthEmailLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) EmailRegister(ctx context.Context, in *EmailRegisterRequest, opts ...http.CallOption) (*EmailRegisterReply, error) {
	var out EmailRegisterReply
	pattern := "/usercenter/client/v1/register/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthEmailRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GenAuthCaptcha(ctx context.Context, in *GenAuthCaptchaRequest, opts ...http.CallOption) (*GenAuthCaptchaReply, error) {
	var out GenAuthCaptchaReply
	pattern := "/usercenter/client/v1/auth/captcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGenAuthCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListAuth(ctx context.Context, in *ListAuthRequest, opts ...http.CallOption) (*ListAuthReply, error) {
	var out ListAuthReply
	pattern := "/usercenter/api/v1/auths"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthListAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListOAuth(ctx context.Context, in *ListOAuthRequest, opts ...http.CallOption) (*ListOAuthReply, error) {
	var out ListOAuthReply
	pattern := "/usercenter/api/v1/oauths"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthListOAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/usercenter/client/v1/logout"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...http.CallOption) (*OAuthLoginReply, error) {
	var out OAuthLoginReply
	pattern := "/usercenter/client/v1/login/oauth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthOAuthLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PasswordBind(ctx context.Context, in *PasswordBindRequest, opts ...http.CallOption) (*PasswordBindReply, error) {
	var out PasswordBindReply
	pattern := "/usercenter/client/v1/bind/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthPasswordBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...http.CallOption) (*PasswordLoginReply, error) {
	var out PasswordLoginReply
	pattern := "/usercenter/client/v1/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthPasswordLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...http.CallOption) (*PasswordRegisterReply, error) {
	var out PasswordRegisterReply
	pattern := "/usercenter/client/v1/register/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthPasswordRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...http.CallOption) (*RefreshTokenReply, error) {
	var out RefreshTokenReply
	pattern := "/usercenter/client/v1/token/refresh"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateAuthStatus(ctx context.Context, in *UpdateAuthStatusRequest, opts ...http.CallOption) (*UpdateAuthStatusReply, error) {
	var out UpdateAuthStatusReply
	pattern := "/usercenter/api/v1/auth/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthUpdateAuthStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
