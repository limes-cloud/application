// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/usercenter/auth/usercenter_auth_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_RefreshToken_FullMethodName     = "/usercenter.api.usercenter.auth.v1.Auth/RefreshToken"
	Auth_Logout_FullMethodName           = "/usercenter.api.usercenter.auth.v1.Auth/Logout"
	Auth_Auth_FullMethodName             = "/usercenter.api.usercenter.auth.v1.Auth/Auth"
	Auth_ListAuth_FullMethodName         = "/usercenter.api.usercenter.auth.v1.Auth/ListAuth"
	Auth_CreateAuth_FullMethodName       = "/usercenter.api.usercenter.auth.v1.Auth/CreateAuth"
	Auth_UpdateAuthStatus_FullMethodName = "/usercenter.api.usercenter.auth.v1.Auth/UpdateAuthStatus"
	Auth_DeleteAuth_FullMethodName       = "/usercenter.api.usercenter.auth.v1.Auth/DeleteAuth"
	Auth_ListOAuth_FullMethodName        = "/usercenter.api.usercenter.auth.v1.Auth/ListOAuth"
	Auth_DeleteOAuth_FullMethodName      = "/usercenter.api.usercenter.auth.v1.Auth/DeleteOAuth"
	Auth_GenAuthCaptcha_FullMethodName   = "/usercenter.api.usercenter.auth.v1.Auth/GenAuthCaptcha"
	Auth_OAuthLogin_FullMethodName       = "/usercenter.api.usercenter.auth.v1.Auth/OAuthLogin"
	Auth_EmailLogin_FullMethodName       = "/usercenter.api.usercenter.auth.v1.Auth/EmailLogin"
	Auth_PasswordLogin_FullMethodName    = "/usercenter.api.usercenter.auth.v1.Auth/PasswordLogin"
	Auth_EmailRegister_FullMethodName    = "/usercenter.api.usercenter.auth.v1.Auth/EmailRegister"
	Auth_PasswordRegister_FullMethodName = "/usercenter.api.usercenter.auth.v1.Auth/PasswordRegister"
	Auth_EmailBind_FullMethodName        = "/usercenter.api.usercenter.auth.v1.Auth/EmailBind"
	Auth_PasswordBind_FullMethodName     = "/usercenter.api.usercenter.auth.v1.Auth/PasswordBind"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 刷新token时长
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error)
	// 退出登陆
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	// 解析token信息
	Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthReply, error)
	// ListAuth 获取应用授权信息列表
	ListAuth(ctx context.Context, in *ListAuthRequest, opts ...grpc.CallOption) (*ListAuthReply, error)
	// CreateAuth 创建应用授权信息
	CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthReply, error)
	// UpdateAuthStatus 更新应用授权信息状态
	UpdateAuthStatus(ctx context.Context, in *UpdateAuthStatusRequest, opts ...grpc.CallOption) (*UpdateAuthStatusReply, error)
	// DeleteAuth 删除应用授权信息
	DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthReply, error)
	// ListOAuth 获取用户授权渠道信息列表
	ListOAuth(ctx context.Context, in *ListOAuthRequest, opts ...grpc.CallOption) (*ListOAuthReply, error)
	// DeleteOAuth 删除渠道授权信息
	DeleteOAuth(ctx context.Context, in *DeleteOAuthRequest, opts ...grpc.CallOption) (*DeleteOAuthReply, error)
	// GenAuthCaptcha 生成二维码
	GenAuthCaptcha(ctx context.Context, in *GenAuthCaptchaRequest, opts ...grpc.CallOption) (*GenAuthCaptchaReply, error)
	// OAuthLogin 三方渠道登陆
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginReply, error)
	// EmailLogin 邮箱登陆
	EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginReply, error)
	// PasswordLogin 密码登陆
	PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*PasswordLoginReply, error)
	// EmailRegister 邮箱注册
	EmailRegister(ctx context.Context, in *EmailRegisterRequest, opts ...grpc.CallOption) (*EmailRegisterReply, error)
	// PasswordRegister 密码注册
	PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...grpc.CallOption) (*PasswordRegisterReply, error)
	// EmailBind 邮箱绑定
	EmailBind(ctx context.Context, in *EmailBindRequest, opts ...grpc.CallOption) (*EmailBindReply, error)
	// PasswordBind 密码绑定
	PasswordBind(ctx context.Context, in *PasswordBindRequest, opts ...grpc.CallOption) (*PasswordBindReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := c.cc.Invoke(ctx, Auth_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, Auth_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, Auth_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListAuth(ctx context.Context, in *ListAuthRequest, opts ...grpc.CallOption) (*ListAuthReply, error) {
	out := new(ListAuthReply)
	err := c.cc.Invoke(ctx, Auth_ListAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthReply, error) {
	out := new(CreateAuthReply)
	err := c.cc.Invoke(ctx, Auth_CreateAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateAuthStatus(ctx context.Context, in *UpdateAuthStatusRequest, opts ...grpc.CallOption) (*UpdateAuthStatusReply, error) {
	out := new(UpdateAuthStatusReply)
	err := c.cc.Invoke(ctx, Auth_UpdateAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthReply, error) {
	out := new(DeleteAuthReply)
	err := c.cc.Invoke(ctx, Auth_DeleteAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ListOAuth(ctx context.Context, in *ListOAuthRequest, opts ...grpc.CallOption) (*ListOAuthReply, error) {
	out := new(ListOAuthReply)
	err := c.cc.Invoke(ctx, Auth_ListOAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteOAuth(ctx context.Context, in *DeleteOAuthRequest, opts ...grpc.CallOption) (*DeleteOAuthReply, error) {
	out := new(DeleteOAuthReply)
	err := c.cc.Invoke(ctx, Auth_DeleteOAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GenAuthCaptcha(ctx context.Context, in *GenAuthCaptchaRequest, opts ...grpc.CallOption) (*GenAuthCaptchaReply, error) {
	out := new(GenAuthCaptchaReply)
	err := c.cc.Invoke(ctx, Auth_GenAuthCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginReply, error) {
	out := new(OAuthLoginReply)
	err := c.cc.Invoke(ctx, Auth_OAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EmailLogin(ctx context.Context, in *EmailLoginRequest, opts ...grpc.CallOption) (*EmailLoginReply, error) {
	out := new(EmailLoginReply)
	err := c.cc.Invoke(ctx, Auth_EmailLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...grpc.CallOption) (*PasswordLoginReply, error) {
	out := new(PasswordLoginReply)
	err := c.cc.Invoke(ctx, Auth_PasswordLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EmailRegister(ctx context.Context, in *EmailRegisterRequest, opts ...grpc.CallOption) (*EmailRegisterReply, error) {
	out := new(EmailRegisterReply)
	err := c.cc.Invoke(ctx, Auth_EmailRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PasswordRegister(ctx context.Context, in *PasswordRegisterRequest, opts ...grpc.CallOption) (*PasswordRegisterReply, error) {
	out := new(PasswordRegisterReply)
	err := c.cc.Invoke(ctx, Auth_PasswordRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EmailBind(ctx context.Context, in *EmailBindRequest, opts ...grpc.CallOption) (*EmailBindReply, error) {
	out := new(EmailBindReply)
	err := c.cc.Invoke(ctx, Auth_EmailBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) PasswordBind(ctx context.Context, in *PasswordBindRequest, opts ...grpc.CallOption) (*PasswordBindReply, error) {
	out := new(PasswordBindReply)
	err := c.cc.Invoke(ctx, Auth_PasswordBind_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// 刷新token时长
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	// 退出登陆
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// 解析token信息
	Auth(context.Context, *emptypb.Empty) (*AuthReply, error)
	// ListAuth 获取应用授权信息列表
	ListAuth(context.Context, *ListAuthRequest) (*ListAuthReply, error)
	// CreateAuth 创建应用授权信息
	CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthReply, error)
	// UpdateAuthStatus 更新应用授权信息状态
	UpdateAuthStatus(context.Context, *UpdateAuthStatusRequest) (*UpdateAuthStatusReply, error)
	// DeleteAuth 删除应用授权信息
	DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthReply, error)
	// ListOAuth 获取用户授权渠道信息列表
	ListOAuth(context.Context, *ListOAuthRequest) (*ListOAuthReply, error)
	// DeleteOAuth 删除渠道授权信息
	DeleteOAuth(context.Context, *DeleteOAuthRequest) (*DeleteOAuthReply, error)
	// GenAuthCaptcha 生成二维码
	GenAuthCaptcha(context.Context, *GenAuthCaptchaRequest) (*GenAuthCaptchaReply, error)
	// OAuthLogin 三方渠道登陆
	OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginReply, error)
	// EmailLogin 邮箱登陆
	EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginReply, error)
	// PasswordLogin 密码登陆
	PasswordLogin(context.Context, *PasswordLoginRequest) (*PasswordLoginReply, error)
	// EmailRegister 邮箱注册
	EmailRegister(context.Context, *EmailRegisterRequest) (*EmailRegisterReply, error)
	// PasswordRegister 密码注册
	PasswordRegister(context.Context, *PasswordRegisterRequest) (*PasswordRegisterReply, error)
	// EmailBind 邮箱绑定
	EmailBind(context.Context, *EmailBindRequest) (*EmailBindReply, error)
	// PasswordBind 密码绑定
	PasswordBind(context.Context, *PasswordBindRequest) (*PasswordBindReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) Logout(context.Context, *LogoutRequest) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServer) Auth(context.Context, *emptypb.Empty) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServer) ListAuth(context.Context, *ListAuthRequest) (*ListAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuth not implemented")
}
func (UnimplementedAuthServer) CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}
func (UnimplementedAuthServer) UpdateAuthStatus(context.Context, *UpdateAuthStatusRequest) (*UpdateAuthStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthStatus not implemented")
}
func (UnimplementedAuthServer) DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuth not implemented")
}
func (UnimplementedAuthServer) ListOAuth(context.Context, *ListOAuthRequest) (*ListOAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuth not implemented")
}
func (UnimplementedAuthServer) DeleteOAuth(context.Context, *DeleteOAuthRequest) (*DeleteOAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuth not implemented")
}
func (UnimplementedAuthServer) GenAuthCaptcha(context.Context, *GenAuthCaptchaRequest) (*GenAuthCaptchaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenAuthCaptcha not implemented")
}
func (UnimplementedAuthServer) OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthLogin not implemented")
}
func (UnimplementedAuthServer) EmailLogin(context.Context, *EmailLoginRequest) (*EmailLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedAuthServer) PasswordLogin(context.Context, *PasswordLoginRequest) (*PasswordLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordLogin not implemented")
}
func (UnimplementedAuthServer) EmailRegister(context.Context, *EmailRegisterRequest) (*EmailRegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailRegister not implemented")
}
func (UnimplementedAuthServer) PasswordRegister(context.Context, *PasswordRegisterRequest) (*PasswordRegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordRegister not implemented")
}
func (UnimplementedAuthServer) EmailBind(context.Context, *EmailBindRequest) (*EmailBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailBind not implemented")
}
func (UnimplementedAuthServer) PasswordBind(context.Context, *PasswordBindRequest) (*PasswordBindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordBind not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListAuth(ctx, req.(*ListAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_CreateAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAuth(ctx, req.(*CreateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_UpdateAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateAuthStatus(ctx, req.(*UpdateAuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteAuth(ctx, req.(*DeleteAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ListOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ListOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_ListOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ListOAuth(ctx, req.(*ListOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeleteOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteOAuth(ctx, req.(*DeleteOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GenAuthCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenAuthCaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GenAuthCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GenAuthCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GenAuthCaptcha(ctx, req.(*GenAuthCaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_OAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).OAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_OAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).OAuthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_EmailLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EmailLogin(ctx, req.(*EmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PasswordLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PasswordLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PasswordLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PasswordLogin(ctx, req.(*PasswordLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EmailRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EmailRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_EmailRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EmailRegister(ctx, req.(*EmailRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PasswordRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PasswordRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PasswordRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PasswordRegister(ctx, req.(*PasswordRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EmailBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EmailBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_EmailBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EmailBind(ctx, req.(*EmailBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_PasswordBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).PasswordBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_PasswordBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).PasswordBind(ctx, req.(*PasswordBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usercenter.api.usercenter.auth.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Auth_Logout_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
		{
			MethodName: "ListAuth",
			Handler:    _Auth_ListAuth_Handler,
		},
		{
			MethodName: "CreateAuth",
			Handler:    _Auth_CreateAuth_Handler,
		},
		{
			MethodName: "UpdateAuthStatus",
			Handler:    _Auth_UpdateAuthStatus_Handler,
		},
		{
			MethodName: "DeleteAuth",
			Handler:    _Auth_DeleteAuth_Handler,
		},
		{
			MethodName: "ListOAuth",
			Handler:    _Auth_ListOAuth_Handler,
		},
		{
			MethodName: "DeleteOAuth",
			Handler:    _Auth_DeleteOAuth_Handler,
		},
		{
			MethodName: "GenAuthCaptcha",
			Handler:    _Auth_GenAuthCaptcha_Handler,
		},
		{
			MethodName: "OAuthLogin",
			Handler:    _Auth_OAuthLogin_Handler,
		},
		{
			MethodName: "EmailLogin",
			Handler:    _Auth_EmailLogin_Handler,
		},
		{
			MethodName: "PasswordLogin",
			Handler:    _Auth_PasswordLogin_Handler,
		},
		{
			MethodName: "EmailRegister",
			Handler:    _Auth_EmailRegister_Handler,
		},
		{
			MethodName: "PasswordRegister",
			Handler:    _Auth_PasswordRegister_Handler,
		},
		{
			MethodName: "EmailBind",
			Handler:    _Auth_EmailBind_Handler,
		},
		{
			MethodName: "PasswordBind",
			Handler:    _Auth_PasswordBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/usercenter/auth/usercenter_auth_service.proto",
}
