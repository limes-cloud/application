// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/usercenter/userinfo/usercenter_userinfo.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserinfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserinfoRequestMultiError, or nil if none found.
func (m *ListUserinfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserinfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListUserinfoRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListUserinfoRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if m.Order != nil {

		if _, ok := _ListUserinfoRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListUserinfoRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListUserinfoRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListUserinfoRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at weight]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListUserinfoRequestMultiError(errors)
	}

	return nil
}

// ListUserinfoRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserinfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserinfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserinfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserinfoRequestMultiError) AllErrors() []error { return m }

// ListUserinfoRequestValidationError is the validation error returned by
// ListUserinfoRequest.Validate if the designated constraints aren't met.
type ListUserinfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserinfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserinfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserinfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserinfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserinfoRequestValidationError) ErrorName() string {
	return "ListUserinfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserinfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserinfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserinfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserinfoRequestValidationError{}

var _ListUserinfoRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListUserinfoRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
	"weight":     {},
}

// Validate checks the field values on ListUserinfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserinfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserinfoReplyMultiError, or nil if none found.
func (m *ListUserinfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserinfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserinfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserinfoReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserinfoReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserinfoReplyMultiError(errors)
	}

	return nil
}

// ListUserinfoReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserinfoReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserinfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserinfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserinfoReplyMultiError) AllErrors() []error { return m }

// ListUserinfoReplyValidationError is the validation error returned by
// ListUserinfoReply.Validate if the designated constraints aren't met.
type ListUserinfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserinfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserinfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserinfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserinfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserinfoReplyValidationError) ErrorName() string {
	return "ListUserinfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserinfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserinfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserinfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserinfoReplyValidationError{}

// Validate checks the field values on CreateUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserinfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserinfoRequestMultiError, or nil if none found.
func (m *CreateUserinfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserinfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateUserinfoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateUserinfoRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := CreateUserinfoRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateUserinfoRequestMultiError(errors)
	}

	return nil
}

// CreateUserinfoRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserinfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserinfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserinfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserinfoRequestMultiError) AllErrors() []error { return m }

// CreateUserinfoRequestValidationError is the validation error returned by
// CreateUserinfoRequest.Validate if the designated constraints aren't met.
type CreateUserinfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserinfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserinfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserinfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserinfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserinfoRequestValidationError) ErrorName() string {
	return "CreateUserinfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserinfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserinfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserinfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserinfoRequestValidationError{}

// Validate checks the field values on CreateUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserinfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserinfoReplyMultiError, or nil if none found.
func (m *CreateUserinfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserinfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserinfoReplyMultiError(errors)
	}

	return nil
}

// CreateUserinfoReplyMultiError is an error wrapping multiple validation
// errors returned by CreateUserinfoReply.ValidateAll() if the designated
// constraints aren't met.
type CreateUserinfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserinfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserinfoReplyMultiError) AllErrors() []error { return m }

// CreateUserinfoReplyValidationError is the validation error returned by
// CreateUserinfoReply.Validate if the designated constraints aren't met.
type CreateUserinfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserinfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserinfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserinfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserinfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserinfoReplyValidationError) ErrorName() string {
	return "CreateUserinfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserinfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserinfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserinfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserinfoReplyValidationError{}

// Validate checks the field values on UpdateUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserinfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserinfoRequestMultiError, or nil if none found.
func (m *UpdateUserinfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserinfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserinfoRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateUserinfoRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateUserinfoRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserinfoRequestMultiError(errors)
	}

	return nil
}

// UpdateUserinfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserinfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserinfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserinfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserinfoRequestMultiError) AllErrors() []error { return m }

// UpdateUserinfoRequestValidationError is the validation error returned by
// UpdateUserinfoRequest.Validate if the designated constraints aren't met.
type UpdateUserinfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserinfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserinfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserinfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserinfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserinfoRequestValidationError) ErrorName() string {
	return "UpdateUserinfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserinfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserinfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserinfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserinfoRequestValidationError{}

// Validate checks the field values on UpdateUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserinfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserinfoReplyMultiError, or nil if none found.
func (m *UpdateUserinfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserinfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserinfoReplyMultiError(errors)
	}

	return nil
}

// UpdateUserinfoReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateUserinfoReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserinfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserinfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserinfoReplyMultiError) AllErrors() []error { return m }

// UpdateUserinfoReplyValidationError is the validation error returned by
// UpdateUserinfoReply.Validate if the designated constraints aren't met.
type UpdateUserinfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserinfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserinfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserinfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserinfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserinfoReplyValidationError) ErrorName() string {
	return "UpdateUserinfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserinfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserinfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserinfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserinfoReplyValidationError{}

// Validate checks the field values on DeleteUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserinfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserinfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserinfoRequestMultiError, or nil if none found.
func (m *DeleteUserinfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserinfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 50 {
		err := DeleteUserinfoRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DeleteUserinfoRequest_Ids_Unique := make(map[uint32]struct{}, len(m.GetIds()))

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if _, exists := _DeleteUserinfoRequest_Ids_Unique[item]; exists {
			err := DeleteUserinfoRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DeleteUserinfoRequest_Ids_Unique[item] = struct{}{}
		}

		// no validation rules for Ids[idx]
	}

	if len(errors) > 0 {
		return DeleteUserinfoRequestMultiError(errors)
	}

	return nil
}

// DeleteUserinfoRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserinfoRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserinfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserinfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserinfoRequestMultiError) AllErrors() []error { return m }

// DeleteUserinfoRequestValidationError is the validation error returned by
// DeleteUserinfoRequest.Validate if the designated constraints aren't met.
type DeleteUserinfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserinfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserinfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserinfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserinfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserinfoRequestValidationError) ErrorName() string {
	return "DeleteUserinfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserinfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserinfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserinfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserinfoRequestValidationError{}

// Validate checks the field values on DeleteUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserinfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserinfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserinfoReplyMultiError, or nil if none found.
func (m *DeleteUserinfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserinfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return DeleteUserinfoReplyMultiError(errors)
	}

	return nil
}

// DeleteUserinfoReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteUserinfoReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserinfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserinfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserinfoReplyMultiError) AllErrors() []error { return m }

// DeleteUserinfoReplyValidationError is the validation error returned by
// DeleteUserinfoReply.Validate if the designated constraints aren't met.
type DeleteUserinfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserinfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserinfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserinfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserinfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserinfoReplyValidationError) ErrorName() string {
	return "DeleteUserinfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserinfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserinfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserinfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserinfoReplyValidationError{}

// Validate checks the field values on ListUserinfoReply_Userinfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserinfoReply_Userinfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserinfoReply_Userinfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserinfoReply_UserinfoMultiError, or nil if none found.
func (m *ListUserinfoReply_Userinfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserinfoReply_Userinfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Keyword

	// no validation rules for Value

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ListUserinfoReply_UserinfoMultiError(errors)
	}

	return nil
}

// ListUserinfoReply_UserinfoMultiError is an error wrapping multiple
// validation errors returned by ListUserinfoReply_Userinfo.ValidateAll() if
// the designated constraints aren't met.
type ListUserinfoReply_UserinfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserinfoReply_UserinfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserinfoReply_UserinfoMultiError) AllErrors() []error { return m }

// ListUserinfoReply_UserinfoValidationError is the validation error returned
// by ListUserinfoReply_Userinfo.Validate if the designated constraints aren't met.
type ListUserinfoReply_UserinfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserinfoReply_UserinfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserinfoReply_UserinfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserinfoReply_UserinfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserinfoReply_UserinfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserinfoReply_UserinfoValidationError) ErrorName() string {
	return "ListUserinfoReply_UserinfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserinfoReply_UserinfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserinfoReply_Userinfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserinfoReply_UserinfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserinfoReply_UserinfoValidationError{}
