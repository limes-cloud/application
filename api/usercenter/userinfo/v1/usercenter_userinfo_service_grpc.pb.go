// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/usercenter/userinfo/usercenter_userinfo_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Userinfo_ListUserinfo_FullMethodName   = "/usercenter.api.usercenter.userinfo.v1.Userinfo/ListUserinfo"
	Userinfo_CreateUserinfo_FullMethodName = "/usercenter.api.usercenter.userinfo.v1.Userinfo/CreateUserinfo"
	Userinfo_UpdateUserinfo_FullMethodName = "/usercenter.api.usercenter.userinfo.v1.Userinfo/UpdateUserinfo"
	Userinfo_DeleteUserinfo_FullMethodName = "/usercenter.api.usercenter.userinfo.v1.Userinfo/DeleteUserinfo"
)

// UserinfoClient is the client API for Userinfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserinfoClient interface {
	// ListUserinfo 获取用户扩展信息列表
	ListUserinfo(ctx context.Context, in *ListUserinfoRequest, opts ...grpc.CallOption) (*ListUserinfoReply, error)
	// CreateUserinfo 创建用户扩展信息
	CreateUserinfo(ctx context.Context, in *CreateUserinfoRequest, opts ...grpc.CallOption) (*CreateUserinfoReply, error)
	// UpdateUserinfo 更新用户扩展信息
	UpdateUserinfo(ctx context.Context, in *UpdateUserinfoRequest, opts ...grpc.CallOption) (*UpdateUserinfoReply, error)
	// DeleteUserinfo 删除用户扩展信息
	DeleteUserinfo(ctx context.Context, in *DeleteUserinfoRequest, opts ...grpc.CallOption) (*DeleteUserinfoReply, error)
}

type userinfoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserinfoClient(cc grpc.ClientConnInterface) UserinfoClient {
	return &userinfoClient{cc}
}

func (c *userinfoClient) ListUserinfo(ctx context.Context, in *ListUserinfoRequest, opts ...grpc.CallOption) (*ListUserinfoReply, error) {
	out := new(ListUserinfoReply)
	err := c.cc.Invoke(ctx, Userinfo_ListUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoClient) CreateUserinfo(ctx context.Context, in *CreateUserinfoRequest, opts ...grpc.CallOption) (*CreateUserinfoReply, error) {
	out := new(CreateUserinfoReply)
	err := c.cc.Invoke(ctx, Userinfo_CreateUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoClient) UpdateUserinfo(ctx context.Context, in *UpdateUserinfoRequest, opts ...grpc.CallOption) (*UpdateUserinfoReply, error) {
	out := new(UpdateUserinfoReply)
	err := c.cc.Invoke(ctx, Userinfo_UpdateUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userinfoClient) DeleteUserinfo(ctx context.Context, in *DeleteUserinfoRequest, opts ...grpc.CallOption) (*DeleteUserinfoReply, error) {
	out := new(DeleteUserinfoReply)
	err := c.cc.Invoke(ctx, Userinfo_DeleteUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserinfoServer is the server API for Userinfo service.
// All implementations must embed UnimplementedUserinfoServer
// for forward compatibility
type UserinfoServer interface {
	// ListUserinfo 获取用户扩展信息列表
	ListUserinfo(context.Context, *ListUserinfoRequest) (*ListUserinfoReply, error)
	// CreateUserinfo 创建用户扩展信息
	CreateUserinfo(context.Context, *CreateUserinfoRequest) (*CreateUserinfoReply, error)
	// UpdateUserinfo 更新用户扩展信息
	UpdateUserinfo(context.Context, *UpdateUserinfoRequest) (*UpdateUserinfoReply, error)
	// DeleteUserinfo 删除用户扩展信息
	DeleteUserinfo(context.Context, *DeleteUserinfoRequest) (*DeleteUserinfoReply, error)
	mustEmbedUnimplementedUserinfoServer()
}

// UnimplementedUserinfoServer must be embedded to have forward compatible implementations.
type UnimplementedUserinfoServer struct {
}

func (UnimplementedUserinfoServer) ListUserinfo(context.Context, *ListUserinfoRequest) (*ListUserinfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserinfo not implemented")
}
func (UnimplementedUserinfoServer) CreateUserinfo(context.Context, *CreateUserinfoRequest) (*CreateUserinfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserinfo not implemented")
}
func (UnimplementedUserinfoServer) UpdateUserinfo(context.Context, *UpdateUserinfoRequest) (*UpdateUserinfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserinfo not implemented")
}
func (UnimplementedUserinfoServer) DeleteUserinfo(context.Context, *DeleteUserinfoRequest) (*DeleteUserinfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserinfo not implemented")
}
func (UnimplementedUserinfoServer) mustEmbedUnimplementedUserinfoServer() {}

// UnsafeUserinfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserinfoServer will
// result in compilation errors.
type UnsafeUserinfoServer interface {
	mustEmbedUnimplementedUserinfoServer()
}

func RegisterUserinfoServer(s grpc.ServiceRegistrar, srv UserinfoServer) {
	s.RegisterService(&Userinfo_ServiceDesc, srv)
}

func _Userinfo_ListUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoServer).ListUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userinfo_ListUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoServer).ListUserinfo(ctx, req.(*ListUserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfo_CreateUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoServer).CreateUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userinfo_CreateUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoServer).CreateUserinfo(ctx, req.(*CreateUserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfo_UpdateUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoServer).UpdateUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userinfo_UpdateUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoServer).UpdateUserinfo(ctx, req.(*UpdateUserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userinfo_DeleteUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserinfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserinfoServer).DeleteUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Userinfo_DeleteUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserinfoServer).DeleteUserinfo(ctx, req.(*DeleteUserinfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Userinfo_ServiceDesc is the grpc.ServiceDesc for Userinfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userinfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usercenter.api.usercenter.userinfo.v1.Userinfo",
	HandlerType: (*UserinfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserinfo",
			Handler:    _Userinfo_ListUserinfo_Handler,
		},
		{
			MethodName: "CreateUserinfo",
			Handler:    _Userinfo_CreateUserinfo_Handler,
		},
		{
			MethodName: "UpdateUserinfo",
			Handler:    _Userinfo_UpdateUserinfo_Handler,
		},
		{
			MethodName: "DeleteUserinfo",
			Handler:    _Userinfo_DeleteUserinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/usercenter/userinfo/usercenter_userinfo_service.proto",
}
