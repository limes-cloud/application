// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/usercenter/userinfo/usercenter_userinfo_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserinfoCreateUserinfo = "/usercenter.api.usercenter.userinfo.v1.Userinfo/CreateUserinfo"
const OperationUserinfoDeleteUserinfo = "/usercenter.api.usercenter.userinfo.v1.Userinfo/DeleteUserinfo"
const OperationUserinfoListUserinfo = "/usercenter.api.usercenter.userinfo.v1.Userinfo/ListUserinfo"
const OperationUserinfoUpdateUserinfo = "/usercenter.api.usercenter.userinfo.v1.Userinfo/UpdateUserinfo"

type UserinfoHTTPServer interface {
	// CreateUserinfo CreateUserinfo 创建用户扩展信息
	CreateUserinfo(context.Context, *CreateUserinfoRequest) (*CreateUserinfoReply, error)
	// DeleteUserinfo DeleteUserinfo 删除用户扩展信息
	DeleteUserinfo(context.Context, *DeleteUserinfoRequest) (*DeleteUserinfoReply, error)
	// ListUserinfo ListUserinfo 获取用户扩展信息列表
	ListUserinfo(context.Context, *ListUserinfoRequest) (*ListUserinfoReply, error)
	// UpdateUserinfo UpdateUserinfo 更新用户扩展信息
	UpdateUserinfo(context.Context, *UpdateUserinfoRequest) (*UpdateUserinfoReply, error)
}

func RegisterUserinfoHTTPServer(s *http.Server, srv UserinfoHTTPServer) {
	r := s.Route("/")
	r.GET("/usercenter/api/v1/userinfoes", _Userinfo_ListUserinfo0_HTTP_Handler(srv))
	r.POST("/usercenter/api/v1/userinfo", _Userinfo_CreateUserinfo0_HTTP_Handler(srv))
	r.PUT("/usercenter/api/v1/userinfo", _Userinfo_UpdateUserinfo0_HTTP_Handler(srv))
	r.DELETE("/usercenter/api/v1/userinfo", _Userinfo_DeleteUserinfo0_HTTP_Handler(srv))
}

func _Userinfo_ListUserinfo0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserinfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoListUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListUserinfo(ctx, req.(*ListUserinfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserinfoReply)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_CreateUserinfo0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserinfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoCreateUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateUserinfo(ctx, req.(*CreateUserinfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserinfoReply)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_UpdateUserinfo0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserinfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoUpdateUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUserinfo(ctx, req.(*UpdateUserinfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserinfoReply)
		return ctx.Result(200, reply)
	}
}

func _Userinfo_DeleteUserinfo0_HTTP_Handler(srv UserinfoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserinfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserinfoDeleteUserinfo)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteUserinfo(ctx, req.(*DeleteUserinfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserinfoReply)
		return ctx.Result(200, reply)
	}
}

type UserinfoHTTPClient interface {
	CreateUserinfo(ctx context.Context, req *CreateUserinfoRequest, opts ...http.CallOption) (rsp *CreateUserinfoReply, err error)
	DeleteUserinfo(ctx context.Context, req *DeleteUserinfoRequest, opts ...http.CallOption) (rsp *DeleteUserinfoReply, err error)
	ListUserinfo(ctx context.Context, req *ListUserinfoRequest, opts ...http.CallOption) (rsp *ListUserinfoReply, err error)
	UpdateUserinfo(ctx context.Context, req *UpdateUserinfoRequest, opts ...http.CallOption) (rsp *UpdateUserinfoReply, err error)
}

type UserinfoHTTPClientImpl struct {
	cc *http.Client
}

func NewUserinfoHTTPClient(client *http.Client) UserinfoHTTPClient {
	return &UserinfoHTTPClientImpl{client}
}

func (c *UserinfoHTTPClientImpl) CreateUserinfo(ctx context.Context, in *CreateUserinfoRequest, opts ...http.CallOption) (*CreateUserinfoReply, error) {
	var out CreateUserinfoReply
	pattern := "/usercenter/api/v1/userinfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoCreateUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserinfoHTTPClientImpl) DeleteUserinfo(ctx context.Context, in *DeleteUserinfoRequest, opts ...http.CallOption) (*DeleteUserinfoReply, error) {
	var out DeleteUserinfoReply
	pattern := "/usercenter/api/v1/userinfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserinfoDeleteUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserinfoHTTPClientImpl) ListUserinfo(ctx context.Context, in *ListUserinfoRequest, opts ...http.CallOption) (*ListUserinfoReply, error) {
	var out ListUserinfoReply
	pattern := "/usercenter/api/v1/userinfoes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserinfoListUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserinfoHTTPClientImpl) UpdateUserinfo(ctx context.Context, in *UpdateUserinfoRequest, opts ...http.CallOption) (*UpdateUserinfoReply, error) {
	var out UpdateUserinfoReply
	pattern := "/usercenter/api/v1/userinfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserinfoUpdateUserinfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
