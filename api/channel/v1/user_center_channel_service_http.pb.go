// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: user_center_channel_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddChannel = "/channel.Service/AddChannel"
const OperationServiceAllChannel = "/channel.Service/AllChannel"
const OperationServiceDeleteChannel = "/channel.Service/DeleteChannel"
const OperationServiceGetTypes = "/channel.Service/GetTypes"
const OperationServiceUpdateChannel = "/channel.Service/UpdateChannel"

type ServiceHTTPServer interface {
	// AddChannel AddChannel 添加渠道信息
	AddChannel(context.Context, *AddChannelRequest) (*AddChannelReply, error)
	// AllChannel AllChannel 获取全部渠道信息
	AllChannel(context.Context, *emptypb.Empty) (*AllChannelReply, error)
	// DeleteChannel DeleteChannel 删除渠道信息
	DeleteChannel(context.Context, *DeleteChannelRequest) (*emptypb.Empty, error)
	// GetTypes AllChannel 获取全部渠道信息
	GetTypes(context.Context, *emptypb.Empty) (*GetTypesReply, error)
	// UpdateChannel UpdateChannel 更新渠道信息
	UpdateChannel(context.Context, *UpdateChannelRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/user-center/v1/channels", _Service_AllChannel0_HTTP_Handler(srv))
	r.GET("/user-center/v1/channel/types", _Service_GetTypes0_HTTP_Handler(srv))
	r.POST("/user-center/v1/channel", _Service_AddChannel0_HTTP_Handler(srv))
	r.PUT("/user-center/v1/channel", _Service_UpdateChannel0_HTTP_Handler(srv))
	r.DELETE("/user-center/v1/channel", _Service_DeleteChannel0_HTTP_Handler(srv))
}

func _Service_AllChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllChannel(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTypes0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTypes)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTypes(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTypesReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddChannel(ctx, req.(*AddChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateChannel(ctx, req.(*UpdateChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteChannel0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteChannel)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteChannel(ctx, req.(*DeleteChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddChannel(ctx context.Context, req *AddChannelRequest, opts ...http.CallOption) (rsp *AddChannelReply, err error)
	AllChannel(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllChannelReply, err error)
	DeleteChannel(ctx context.Context, req *DeleteChannelRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetTypes(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetTypesReply, err error)
	UpdateChannel(ctx context.Context, req *UpdateChannelRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddChannel(ctx context.Context, in *AddChannelRequest, opts ...http.CallOption) (*AddChannelReply, error) {
	var out AddChannelReply
	pattern := "/user-center/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllChannel(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllChannelReply, error) {
	var out AllChannelReply
	pattern := "/user-center/v1/channels"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/v1/channel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetTypes(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetTypesReply, error) {
	var out GetTypesReply
	pattern := "/user-center/v1/channel/types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetTypes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/user-center/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
