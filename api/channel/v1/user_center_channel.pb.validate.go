// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_center_channel.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channel with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChannelMultiError, or nil if none found.
func (m *Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Logo

	// no validation rules for Platform

	// no validation rules for Name

	// no validation rules for Ak

	// no validation rules for Sk

	// no validation rules for Extra

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ChannelMultiError(errors)
	}

	return nil
}

// ChannelMultiError is an error wrapping multiple validation errors returned
// by Channel.ValidateAll() if the designated constraints aren't met.
type ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelMultiError) AllErrors() []error { return m }

// ChannelValidationError is the validation error returned by Channel.Validate
// if the designated constraints aren't met.
type ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelValidationError) ErrorName() string { return "ChannelValidationError" }

// Error satisfies the builtin error interface
func (e ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelValidationError{}

// Validate checks the field values on AllChannelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllChannelReplyMultiError, or nil if none found.
func (m *AllChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllChannelReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllChannelReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllChannelReplyMultiError(errors)
	}

	return nil
}

// AllChannelReplyMultiError is an error wrapping multiple validation errors
// returned by AllChannelReply.ValidateAll() if the designated constraints
// aren't met.
type AllChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllChannelReplyMultiError) AllErrors() []error { return m }

// AllChannelReplyValidationError is the validation error returned by
// AllChannelReply.Validate if the designated constraints aren't met.
type AllChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllChannelReplyValidationError) ErrorName() string { return "AllChannelReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllChannelReplyValidationError{}

// Validate checks the field values on AddChannelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddChannelRequestMultiError, or nil if none found.
func (m *AddChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := AddChannelRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := AddChannelRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddChannelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Ak != nil {
		// no validation rules for Ak
	}

	if m.Sk != nil {
		// no validation rules for Sk
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return AddChannelRequestMultiError(errors)
	}

	return nil
}

// AddChannelRequestMultiError is an error wrapping multiple validation errors
// returned by AddChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type AddChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddChannelRequestMultiError) AllErrors() []error { return m }

// AddChannelRequestValidationError is the validation error returned by
// AddChannelRequest.Validate if the designated constraints aren't met.
type AddChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddChannelRequestValidationError) ErrorName() string {
	return "AddChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddChannelRequestValidationError{}

// Validate checks the field values on AddChannelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddChannelReplyMultiError, or nil if none found.
func (m *AddChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddChannelReplyMultiError(errors)
	}

	return nil
}

// AddChannelReplyMultiError is an error wrapping multiple validation errors
// returned by AddChannelReply.ValidateAll() if the designated constraints
// aren't met.
type AddChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddChannelReplyMultiError) AllErrors() []error { return m }

// AddChannelReplyValidationError is the validation error returned by
// AddChannelReply.Validate if the designated constraints aren't met.
type AddChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddChannelReplyValidationError) ErrorName() string { return "AddChannelReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddChannelReplyValidationError{}

// Validate checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelRequestMultiError, or nil if none found.
func (m *UpdateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLogo()) < 1 {
		err := UpdateChannelRequestValidationError{
			field:  "Logo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatform()) < 1 {
		err := UpdateChannelRequestValidationError{
			field:  "Platform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateChannelRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Ak != nil {
		// no validation rules for Ak
	}

	if m.Sk != nil {
		// no validation rules for Sk
	}

	if m.Extra != nil {
		// no validation rules for Extra
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelRequestMultiError) AllErrors() []error { return m }

// UpdateChannelRequestValidationError is the validation error returned by
// UpdateChannelRequest.Validate if the designated constraints aren't met.
type UpdateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelRequestValidationError) ErrorName() string {
	return "UpdateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelRequestValidationError{}

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelRequestMultiError, or nil if none found.
func (m *DeleteChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteChannelRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelRequestMultiError) AllErrors() []error { return m }

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on GetTypesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTypesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTypesReplyMultiError, or
// nil if none found.
func (m *GetTypesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTypesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTypesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTypesReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTypesReplyMultiError(errors)
	}

	return nil
}

// GetTypesReplyMultiError is an error wrapping multiple validation errors
// returned by GetTypesReply.ValidateAll() if the designated constraints
// aren't met.
type GetTypesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypesReplyMultiError) AllErrors() []error { return m }

// GetTypesReplyValidationError is the validation error returned by
// GetTypesReply.Validate if the designated constraints aren't met.
type GetTypesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypesReplyValidationError) ErrorName() string { return "GetTypesReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTypesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypesReplyValidationError{}

// Validate checks the field values on GetTypesReply_Typer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTypesReply_Typer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTypesReply_Typer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTypesReply_TyperMultiError, or nil if none found.
func (m *GetTypesReply_Typer) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTypesReply_Typer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Platform

	// no validation rules for Name

	if len(errors) > 0 {
		return GetTypesReply_TyperMultiError(errors)
	}

	return nil
}

// GetTypesReply_TyperMultiError is an error wrapping multiple validation
// errors returned by GetTypesReply_Typer.ValidateAll() if the designated
// constraints aren't met.
type GetTypesReply_TyperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTypesReply_TyperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTypesReply_TyperMultiError) AllErrors() []error { return m }

// GetTypesReply_TyperValidationError is the validation error returned by
// GetTypesReply_Typer.Validate if the designated constraints aren't met.
type GetTypesReply_TyperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTypesReply_TyperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTypesReply_TyperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTypesReply_TyperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTypesReply_TyperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTypesReply_TyperValidationError) ErrorName() string {
	return "GetTypesReply_TyperValidationError"
}

// Error satisfies the builtin error interface
func (e GetTypesReply_TyperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTypesReply_Typer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTypesReply_TyperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTypesReply_TyperValidationError{}
